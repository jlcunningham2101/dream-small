{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isExecutableDefinitionNode } from \"../../language/predicates.mjs\";\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\n\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {\n        var definition = _node$definitions2[_i2];\n\n        if (!isExecutableDefinitionNode(definition)) {\n          var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), definition));\n        }\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","isExecutableDefinitionNode","ExecutableDefinitionsRule","context","Document","node","_i2","_node$definitions2","definitions","length","definition","defName","kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","name","value","reportError","concat"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isExecutableDefinitionNode } from \"../../language/predicates.mjs\";\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {\n        var definition = _node$definitions2[_i2];\n\n        if (!isExecutableDefinitionNode(definition)) {\n          var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), definition));\n        }\n      }\n\n      return false;\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,OAAnC,EAA4C;EACjD,OAAO;IACLC,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;MAChC,KAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,kBAAkB,GAAGF,IAAI,CAACG,WAA5C,EAAyDF,GAAG,GAAGC,kBAAkB,CAACE,MAAlF,EAA0FH,GAAG,EAA7F,EAAiG;QAC/F,IAAII,UAAU,GAAGH,kBAAkB,CAACD,GAAD,CAAnC;;QAEA,IAAI,CAACL,0BAA0B,CAACS,UAAD,CAA/B,EAA6C;UAC3C,IAAIC,OAAO,GAAGD,UAAU,CAACE,IAAX,KAAoBZ,IAAI,CAACa,iBAAzB,IAA8CH,UAAU,CAACE,IAAX,KAAoBZ,IAAI,CAACc,gBAAvE,GAA0F,QAA1F,GAAqG,MAAMJ,UAAU,CAACK,IAAX,CAAgBC,KAAtB,GAA8B,GAAjJ;UACAb,OAAO,CAACc,WAAR,CAAoB,IAAIlB,YAAJ,CAAiB,OAAOmB,MAAP,CAAcP,OAAd,EAAuB,gCAAvB,CAAjB,EAA2ED,UAA3E,CAApB;QACD;MACF;;MAED,OAAO,KAAP;IACD;EAZI,CAAP;AAcD"},"metadata":{},"sourceType":"module"}