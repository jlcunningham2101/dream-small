{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\n\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), node.typeCondition));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isCompositeType","typeFromAST","FragmentsOnCompositeTypesRule","context","InlineFragment","node","typeCondition","type","getSchema","typeStr","reportError","concat","FragmentDefinition","name","value"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), node.typeCondition));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,6BAAT,CAAuCC,OAAvC,EAAgD;EACrD,OAAO;IACLC,cAAc,EAAE,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;MAC5C,IAAIC,aAAa,GAAGD,IAAI,CAACC,aAAzB;;MAEA,IAAIA,aAAJ,EAAmB;QACjB,IAAIC,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,EAAsBF,aAAtB,CAAtB;;QAEA,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,EAAoC;UAClC,IAAIE,OAAO,GAAGV,KAAK,CAACO,aAAD,CAAnB;UACAH,OAAO,CAACO,WAAR,CAAoB,IAAIZ,YAAJ,CAAiB,qDAAqDa,MAArD,CAA4DF,OAA5D,EAAqE,KAArE,CAAjB,EAA8FH,aAA9F,CAApB;QACD;MACF;IACF,CAZI;IAaLM,kBAAkB,EAAE,SAASA,kBAAT,CAA4BP,IAA5B,EAAkC;MACpD,IAAIE,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,EAAsBH,IAAI,CAACC,aAA3B,CAAtB;;MAEA,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,EAAoC;QAClC,IAAIE,OAAO,GAAGV,KAAK,CAACM,IAAI,CAACC,aAAN,CAAnB;QACAH,OAAO,CAACO,WAAR,CAAoB,IAAIZ,YAAJ,CAAiB,cAAca,MAAd,CAAqBN,IAAI,CAACQ,IAAL,CAAUC,KAA/B,EAAsC,8CAAtC,EAAsFH,MAAtF,CAA6FF,OAA7F,EAAsG,KAAtG,CAAjB,EAA+HJ,IAAI,CAACC,aAApI,CAApB;MACD;IACF;EApBI,CAAP;AAsBD"},"metadata":{},"sourceType":"module"}