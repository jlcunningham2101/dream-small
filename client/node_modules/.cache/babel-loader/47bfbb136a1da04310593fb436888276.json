{"ast":null,"code":"import { devAssert } from './jsutils/devAssert.mjs';\nimport { isPromise } from './jsutils/isPromise.mjs';\nimport { parse } from './language/parser.mjs';\nimport { validateSchema } from './type/validate.mjs';\nimport { validate } from './validation/validate.mjs';\nimport { execute } from './execution/execute.mjs';\n/**\r\n * This is the primary entry point function for fulfilling GraphQL operations\r\n * by parsing, validating, and executing a GraphQL document along side a\r\n * GraphQL schema.\r\n *\r\n * More sophisticated GraphQL servers, such as those which persist queries,\r\n * may wish to separate the validation and execution phases to a static time\r\n * tooling step, and a server runtime step.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments:\r\n *\r\n * schema:\r\n *    The GraphQL type system to use when validating and executing a query.\r\n * source:\r\n *    A GraphQL language formatted string representing the requested operation.\r\n * rootValue:\r\n *    The value provided as the first argument to resolver functions on the top\r\n *    level type (e.g. the query object type).\r\n * contextValue:\r\n *    The context value is provided as an argument to resolver functions after\r\n *    field arguments. It is used to pass shared information useful at any point\r\n *    during executing this query, for example the currently logged in user and\r\n *    connections to databases or other services.\r\n * variableValues:\r\n *    A mapping of variable name to runtime value to use for all variables\r\n *    defined in the requestString.\r\n * operationName:\r\n *    The name of the operation to use if requestString contains multiple\r\n *    possible operations. Can be omitted if requestString contains only\r\n *    one operation.\r\n * fieldResolver:\r\n *    A resolver function to use when one is not provided by the schema.\r\n *    If not provided, the default field resolver is used (which looks for a\r\n *    value or method on the source value with the field's name).\r\n * typeResolver:\r\n *    A type resolver function to use when none is provided by the schema.\r\n *    If not provided, the default type resolver is used (which looks for a\r\n *    `__typename` field or alternatively calls the `isTypeOf` method).\r\n */\n\nexport function graphql(args) {\n  // Always return a Promise for a consistent API.\n  return new Promise(resolve => resolve(graphqlImpl(args)));\n}\n/**\r\n * The graphqlSync function also fulfills GraphQL operations by parsing,\r\n * validating, and executing a GraphQL document along side a GraphQL schema.\r\n * However, it guarantees to complete synchronously (or throw an error) assuming\r\n * that all field resolvers are also synchronous.\r\n */\n\nexport function graphqlSync(args) {\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver\n  } = args; // Validate Schema\n\n  const schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  let document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  const validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver\n  });\n}","map":{"version":3,"names":["devAssert","isPromise","parse","validateSchema","validate","execute","graphql","args","Promise","resolve","graphqlImpl","graphqlSync","result","Error","arguments","length","schema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","schemaValidationErrors","errors","document","syntaxError","validationErrors"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/graphql.mjs"],"sourcesContent":["import { devAssert } from './jsutils/devAssert.mjs';\r\nimport { isPromise } from './jsutils/isPromise.mjs';\r\nimport { parse } from './language/parser.mjs';\r\nimport { validateSchema } from './type/validate.mjs';\r\nimport { validate } from './validation/validate.mjs';\r\nimport { execute } from './execution/execute.mjs';\r\n/**\r\n * This is the primary entry point function for fulfilling GraphQL operations\r\n * by parsing, validating, and executing a GraphQL document along side a\r\n * GraphQL schema.\r\n *\r\n * More sophisticated GraphQL servers, such as those which persist queries,\r\n * may wish to separate the validation and execution phases to a static time\r\n * tooling step, and a server runtime step.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments:\r\n *\r\n * schema:\r\n *    The GraphQL type system to use when validating and executing a query.\r\n * source:\r\n *    A GraphQL language formatted string representing the requested operation.\r\n * rootValue:\r\n *    The value provided as the first argument to resolver functions on the top\r\n *    level type (e.g. the query object type).\r\n * contextValue:\r\n *    The context value is provided as an argument to resolver functions after\r\n *    field arguments. It is used to pass shared information useful at any point\r\n *    during executing this query, for example the currently logged in user and\r\n *    connections to databases or other services.\r\n * variableValues:\r\n *    A mapping of variable name to runtime value to use for all variables\r\n *    defined in the requestString.\r\n * operationName:\r\n *    The name of the operation to use if requestString contains multiple\r\n *    possible operations. Can be omitted if requestString contains only\r\n *    one operation.\r\n * fieldResolver:\r\n *    A resolver function to use when one is not provided by the schema.\r\n *    If not provided, the default field resolver is used (which looks for a\r\n *    value or method on the source value with the field's name).\r\n * typeResolver:\r\n *    A type resolver function to use when none is provided by the schema.\r\n *    If not provided, the default type resolver is used (which looks for a\r\n *    `__typename` field or alternatively calls the `isTypeOf` method).\r\n */\r\n\r\nexport function graphql(args) {\r\n  // Always return a Promise for a consistent API.\r\n  return new Promise((resolve) => resolve(graphqlImpl(args)));\r\n}\r\n/**\r\n * The graphqlSync function also fulfills GraphQL operations by parsing,\r\n * validating, and executing a GraphQL document along side a GraphQL schema.\r\n * However, it guarantees to complete synchronously (or throw an error) assuming\r\n * that all field resolvers are also synchronous.\r\n */\r\n\r\nexport function graphqlSync(args) {\r\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\r\n\r\n  if (isPromise(result)) {\r\n    throw new Error('GraphQL execution failed to complete synchronously.');\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction graphqlImpl(args) {\r\n  // Temporary for v15 to v16 migration. Remove in v17\r\n  arguments.length < 2 ||\r\n    devAssert(\r\n      false,\r\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\r\n    );\r\n  const {\r\n    schema,\r\n    source,\r\n    rootValue,\r\n    contextValue,\r\n    variableValues,\r\n    operationName,\r\n    fieldResolver,\r\n    typeResolver,\r\n  } = args; // Validate Schema\r\n\r\n  const schemaValidationErrors = validateSchema(schema);\r\n\r\n  if (schemaValidationErrors.length > 0) {\r\n    return {\r\n      errors: schemaValidationErrors,\r\n    };\r\n  } // Parse\r\n\r\n  let document;\r\n\r\n  try {\r\n    document = parse(source);\r\n  } catch (syntaxError) {\r\n    return {\r\n      errors: [syntaxError],\r\n    };\r\n  } // Validate\r\n\r\n  const validationErrors = validate(schema, document);\r\n\r\n  if (validationErrors.length > 0) {\r\n    return {\r\n      errors: validationErrors,\r\n    };\r\n  } // Execute\r\n\r\n  return execute({\r\n    schema,\r\n    document,\r\n    rootValue,\r\n    contextValue,\r\n    variableValues,\r\n    operationName,\r\n    fieldResolver,\r\n    typeResolver,\r\n  });\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;EAC5B;EACA,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaA,OAAO,CAACC,WAAW,CAACH,IAAD,CAAZ,CAAhC,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,WAAT,CAAqBJ,IAArB,EAA2B;EAChC,MAAMK,MAAM,GAAGF,WAAW,CAACH,IAAD,CAA1B,CADgC,CACE;;EAElC,IAAIN,SAAS,CAACW,MAAD,CAAb,EAAuB;IACrB,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;EACD;;EAED,OAAOD,MAAP;AACD;;AAED,SAASF,WAAT,CAAqBH,IAArB,EAA2B;EACzB;EACAO,SAAS,CAACC,MAAV,GAAmB,CAAnB,IACEf,SAAS,CACP,KADO,EAEP,qGAFO,CADX;EAKA,MAAM;IACJgB,MADI;IAEJC,MAFI;IAGJC,SAHI;IAIJC,YAJI;IAKJC,cALI;IAMJC,aANI;IAOJC,aAPI;IAQJC;EARI,IASFhB,IATJ,CAPyB,CAgBf;;EAEV,MAAMiB,sBAAsB,GAAGrB,cAAc,CAACa,MAAD,CAA7C;;EAEA,IAAIQ,sBAAsB,CAACT,MAAvB,GAAgC,CAApC,EAAuC;IACrC,OAAO;MACLU,MAAM,EAAED;IADH,CAAP;EAGD,CAxBwB,CAwBvB;;;EAEF,IAAIE,QAAJ;;EAEA,IAAI;IACFA,QAAQ,GAAGxB,KAAK,CAACe,MAAD,CAAhB;EACD,CAFD,CAEE,OAAOU,WAAP,EAAoB;IACpB,OAAO;MACLF,MAAM,EAAE,CAACE,WAAD;IADH,CAAP;EAGD,CAlCwB,CAkCvB;;;EAEF,MAAMC,gBAAgB,GAAGxB,QAAQ,CAACY,MAAD,EAASU,QAAT,CAAjC;;EAEA,IAAIE,gBAAgB,CAACb,MAAjB,GAA0B,CAA9B,EAAiC;IAC/B,OAAO;MACLU,MAAM,EAAEG;IADH,CAAP;EAGD,CA1CwB,CA0CvB;;;EAEF,OAAOvB,OAAO,CAAC;IACbW,MADa;IAEbU,QAFa;IAGbR,SAHa;IAIbC,YAJa;IAKbC,cALa;IAMbC,aANa;IAObC,aAPa;IAQbC;EARa,CAAD,CAAd;AAUD"},"metadata":{},"sourceType":"module"}