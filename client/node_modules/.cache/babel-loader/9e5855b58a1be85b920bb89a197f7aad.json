{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {\n      var spreadNode = spreadNodes[_i2];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var viaPath = cyclePath.slice(0, -1).map(function (s) {\n          return '\"' + s.name.value + '\"';\n        }).join(', ');\n        context.reportError(new GraphQLError(\"Cannot spread fragment \\\"\".concat(spreadName, \"\\\" within itself\") + (viaPath !== '' ? \" via \".concat(viaPath, \".\") : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}","map":{"version":3,"names":["GraphQLError","NoFragmentCyclesRule","context","visitedFrags","Object","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","detectCycleRecursive","fragment","name","value","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","length","_i2","spreadNode","spreadName","cycleIndex","push","undefined","spreadFragment","getFragment","cyclePath","slice","viaPath","map","s","join","reportError","concat","pop"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {\n      var spreadNode = spreadNodes[_i2];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var viaPath = cyclePath.slice(0, -1).map(function (s) {\n          return '\"' + s.name.value + '\"';\n        }).join(', ');\n        context.reportError(new GraphQLError(\"Cannot spread fragment \\\"\".concat(spreadName, \"\\\" within itself\") + (viaPath !== '' ? \" via \".concat(viaPath, \".\") : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;EAC5C;EACA;EACA,IAAIC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB,CAH4C,CAGJ;;EAExC,IAAIC,UAAU,GAAG,EAAjB,CAL4C,CAKvB;;EAErB,IAAIC,qBAAqB,GAAGH,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;EACA,OAAO;IACLG,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;MAClD,OAAO,KAAP;IACD,CAHI;IAILC,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;MACpDC,oBAAoB,CAACD,IAAD,CAApB;MACA,OAAO,KAAP;IACD;EAPI,CAAP,CAR4C,CAgBzC;EACH;EACA;;EAEA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwC;IACtC,IAAIT,YAAY,CAACS,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAhB,EAAuC;MACrC;IACD;;IAED,IAAIC,YAAY,GAAGH,QAAQ,CAACC,IAAT,CAAcC,KAAjC;IACAX,YAAY,CAACY,YAAD,CAAZ,GAA6B,IAA7B;IACA,IAAIC,WAAW,GAAGd,OAAO,CAACe,kBAAR,CAA2BL,QAAQ,CAACM,YAApC,CAAlB;;IAEA,IAAIF,WAAW,CAACG,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B;IACD;;IAEDZ,qBAAqB,CAACQ,YAAD,CAArB,GAAsCT,UAAU,CAACa,MAAjD;;IAEA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,WAAW,CAACG,MAApC,EAA4CC,GAAG,EAA/C,EAAmD;MACjD,IAAIC,UAAU,GAAGL,WAAW,CAACI,GAAD,CAA5B;MACA,IAAIE,UAAU,GAAGD,UAAU,CAACR,IAAX,CAAgBC,KAAjC;MACA,IAAIS,UAAU,GAAGhB,qBAAqB,CAACe,UAAD,CAAtC;MACAhB,UAAU,CAACkB,IAAX,CAAgBH,UAAhB;;MAEA,IAAIE,UAAU,KAAKE,SAAnB,EAA8B;QAC5B,IAAIC,cAAc,GAAGxB,OAAO,CAACyB,WAAR,CAAoBL,UAApB,CAArB;;QAEA,IAAII,cAAJ,EAAoB;UAClBf,oBAAoB,CAACe,cAAD,CAApB;QACD;MACF,CAND,MAMO;QACL,IAAIE,SAAS,GAAGtB,UAAU,CAACuB,KAAX,CAAiBN,UAAjB,CAAhB;QACA,IAAIO,OAAO,GAAGF,SAAS,CAACC,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,EAAuBE,GAAvB,CAA2B,UAAUC,CAAV,EAAa;UACpD,OAAO,MAAMA,CAAC,CAACnB,IAAF,CAAOC,KAAb,GAAqB,GAA5B;QACD,CAFa,EAEXmB,IAFW,CAEN,IAFM,CAAd;QAGA/B,OAAO,CAACgC,WAAR,CAAoB,IAAIlC,YAAJ,CAAiB,4BAA4BmC,MAA5B,CAAmCb,UAAnC,EAA+C,kBAA/C,KAAsEQ,OAAO,KAAK,EAAZ,GAAiB,QAAQK,MAAR,CAAeL,OAAf,EAAwB,GAAxB,CAAjB,GAAgD,GAAtH,CAAjB,EAA6IF,SAA7I,CAApB;MACD;;MAEDtB,UAAU,CAAC8B,GAAX;IACD;;IAED7B,qBAAqB,CAACQ,YAAD,CAArB,GAAsCU,SAAtC;EACD;AACF"},"metadata":{},"sourceType":"module"}