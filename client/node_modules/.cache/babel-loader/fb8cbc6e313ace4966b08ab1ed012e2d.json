{"ast":null,"code":"/**\r\n * This function transforms a JS object `ObjMap<Promise<T>>` into\r\n * a `Promise<ObjMap<T>>`\r\n *\r\n * This is akin to bluebird's `Promise.props`, but implemented only using\r\n * `Promise.all` so it will work with any implementation of ES6 promises.\r\n */\nexport function promiseForObject(object) {\n  return Promise.all(Object.values(object)).then(resolvedValues => {\n    const resolvedObject = Object.create(null);\n\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n\n    return resolvedObject;\n  });\n}","map":{"version":3,"names":["promiseForObject","object","Promise","all","Object","values","then","resolvedValues","resolvedObject","create","i","key","keys","entries"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/jsutils/promiseForObject.mjs"],"sourcesContent":["/**\r\n * This function transforms a JS object `ObjMap<Promise<T>>` into\r\n * a `Promise<ObjMap<T>>`\r\n *\r\n * This is akin to bluebird's `Promise.props`, but implemented only using\r\n * `Promise.all` so it will work with any implementation of ES6 promises.\r\n */\r\nexport function promiseForObject(object) {\r\n  return Promise.all(Object.values(object)).then((resolvedValues) => {\r\n    const resolvedObject = Object.create(null);\r\n\r\n    for (const [i, key] of Object.keys(object).entries()) {\r\n      resolvedObject[key] = resolvedValues[i];\r\n    }\r\n\r\n    return resolvedObject;\r\n  });\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;EACvC,OAAOC,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,MAAP,CAAcJ,MAAd,CAAZ,EAAmCK,IAAnC,CAAyCC,cAAD,IAAoB;IACjE,MAAMC,cAAc,GAAGJ,MAAM,CAACK,MAAP,CAAc,IAAd,CAAvB;;IAEA,KAAK,MAAM,CAACC,CAAD,EAAIC,GAAJ,CAAX,IAAuBP,MAAM,CAACQ,IAAP,CAAYX,MAAZ,EAAoBY,OAApB,EAAvB,EAAsD;MACpDL,cAAc,CAACG,GAAD,CAAd,GAAsBJ,cAAc,CAACG,CAAD,CAApC;IACD;;IAED,OAAOF,cAAP;EACD,CARM,CAAP;AASD"},"metadata":{},"sourceType":"module"}