{"ast":null,"code":"import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];\n  } // istanbul ignore next (Not reachable. All possible value nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected value node: ' + inspect(valueNode));\n}","map":{"version":3,"names":["inspect","invariant","keyValMap","Kind","valueFromASTUntyped","valueNode","variables","kind","NULL","INT","parseInt","value","FLOAT","parseFloat","STRING","ENUM","BOOLEAN","LIST","values","map","node","OBJECT","fields","field","name","VARIABLE"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/utilities/valueFromASTUntyped.mjs"],"sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];\n  } // istanbul ignore next (Not reachable. All possible value nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected value node: ' + inspect(valueNode));\n}\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,wBAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,IAAT,QAAqB,uBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwCC,SAAxC,EAAmD;EACxD,QAAQD,SAAS,CAACE,IAAlB;IACE,KAAKJ,IAAI,CAACK,IAAV;MACE,OAAO,IAAP;;IAEF,KAAKL,IAAI,CAACM,GAAV;MACE,OAAOC,QAAQ,CAACL,SAAS,CAACM,KAAX,EAAkB,EAAlB,CAAf;;IAEF,KAAKR,IAAI,CAACS,KAAV;MACE,OAAOC,UAAU,CAACR,SAAS,CAACM,KAAX,CAAjB;;IAEF,KAAKR,IAAI,CAACW,MAAV;IACA,KAAKX,IAAI,CAACY,IAAV;IACA,KAAKZ,IAAI,CAACa,OAAV;MACE,OAAOX,SAAS,CAACM,KAAjB;;IAEF,KAAKR,IAAI,CAACc,IAAV;MACE,OAAOZ,SAAS,CAACa,MAAV,CAAiBC,GAAjB,CAAqB,UAAUC,IAAV,EAAgB;QAC1C,OAAOhB,mBAAmB,CAACgB,IAAD,EAAOd,SAAP,CAA1B;MACD,CAFM,CAAP;;IAIF,KAAKH,IAAI,CAACkB,MAAV;MACE,OAAOnB,SAAS,CAACG,SAAS,CAACiB,MAAX,EAAmB,UAAUC,KAAV,EAAiB;QAClD,OAAOA,KAAK,CAACC,IAAN,CAAWb,KAAlB;MACD,CAFe,EAEb,UAAUY,KAAV,EAAiB;QAClB,OAAOnB,mBAAmB,CAACmB,KAAK,CAACZ,KAAP,EAAcL,SAAd,CAA1B;MACD,CAJe,CAAhB;;IAMF,KAAKH,IAAI,CAACsB,QAAV;MACE,OAAOnB,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACD,SAAS,CAACmB,IAAV,CAAeb,KAAhB,CAAtE;EA5BJ,CADwD,CA8BtD;;;EAGF,SAASV,SAAS,CAAC,CAAD,EAAI,4BAA4BD,OAAO,CAACK,SAAD,CAAvC,CAAlB;AACD"},"metadata":{},"sourceType":"module"}