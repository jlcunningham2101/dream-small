{"ast":null,"code":"import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\r\n * Unique input field names\r\n *\r\n * A GraphQL input object value is only valid if all supplied fields are\r\n * uniquely named.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\r\n */\n\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      }\n\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(`There can be only one input field named \"${fieldName}\".`, {\n          nodes: [knownNames[fieldName], node.name]\n        }));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n\n  };\n}","map":{"version":3,"names":["invariant","GraphQLError","UniqueInputFieldNamesRule","context","knownNameStack","knownNames","Object","create","ObjectValue","enter","push","leave","prevKnownNames","pop","ObjectField","node","fieldName","name","value","reportError","nodes"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"],"sourcesContent":["import { invariant } from '../../jsutils/invariant.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\n\r\n/**\r\n * Unique input field names\r\n *\r\n * A GraphQL input object value is only valid if all supplied fields are\r\n * uniquely named.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\r\n */\r\nexport function UniqueInputFieldNamesRule(context) {\r\n  const knownNameStack = [];\r\n  let knownNames = Object.create(null);\r\n  return {\r\n    ObjectValue: {\r\n      enter() {\r\n        knownNameStack.push(knownNames);\r\n        knownNames = Object.create(null);\r\n      },\r\n\r\n      leave() {\r\n        const prevKnownNames = knownNameStack.pop();\r\n        prevKnownNames || invariant(false);\r\n        knownNames = prevKnownNames;\r\n      },\r\n    },\r\n\r\n    ObjectField(node) {\r\n      const fieldName = node.name.value;\r\n\r\n      if (knownNames[fieldName]) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `There can be only one input field named \"${fieldName}\".`,\r\n            {\r\n              nodes: [knownNames[fieldName], node.name],\r\n            },\r\n          ),\r\n        );\r\n      } else {\r\n        knownNames[fieldName] = node.name;\r\n      }\r\n    },\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,6BAA1B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,OAAnC,EAA4C;EACjD,MAAMC,cAAc,GAAG,EAAvB;EACA,IAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;EACA,OAAO;IACLC,WAAW,EAAE;MACXC,KAAK,GAAG;QACNL,cAAc,CAACM,IAAf,CAAoBL,UAApB;QACAA,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;MACD,CAJU;;MAMXI,KAAK,GAAG;QACN,MAAMC,cAAc,GAAGR,cAAc,CAACS,GAAf,EAAvB;QACAD,cAAc,IAAIZ,SAAS,CAAC,KAAD,CAA3B;QACAK,UAAU,GAAGO,cAAb;MACD;;IAVU,CADR;;IAcLE,WAAW,CAACC,IAAD,EAAO;MAChB,MAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA5B;;MAEA,IAAIb,UAAU,CAACW,SAAD,CAAd,EAA2B;QACzBb,OAAO,CAACgB,WAAR,CACE,IAAIlB,YAAJ,CACG,4CAA2Ce,SAAU,IADxD,EAEE;UACEI,KAAK,EAAE,CAACf,UAAU,CAACW,SAAD,CAAX,EAAwBD,IAAI,CAACE,IAA7B;QADT,CAFF,CADF;MAQD,CATD,MASO;QACLZ,UAAU,CAACW,SAAD,CAAV,GAAwBD,IAAI,CAACE,IAA7B;MACD;IACF;;EA7BI,CAAP;AA+BD"},"metadata":{},"sourceType":"module"}