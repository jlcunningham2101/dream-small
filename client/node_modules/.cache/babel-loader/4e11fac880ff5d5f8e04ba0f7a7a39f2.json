{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {\n      var operationType = operationTypesNodes[_i2];\n      var operation = operationType.operation;\n      var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","UniqueOperationTypesRule","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","_node$operationTypes","operationTypesNodes","operationTypes","_i2","length","operationType","operation","alreadyDefinedOperationType","reportError","concat"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {\n      var operationType = operationTypesNodes[_i2];\n      var operation = operationType.operation;\n      var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;EAChD,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAb;EACA,IAAIC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;EACA,IAAIC,sBAAsB,GAAGL,MAAM,GAAG;IACpCM,KAAK,EAAEN,MAAM,CAACO,YAAP,EAD6B;IAEpCC,QAAQ,EAAER,MAAM,CAACS,eAAP,EAF0B;IAGpCC,YAAY,EAAEV,MAAM,CAACW,mBAAP;EAHsB,CAAH,GAI/B,EAJJ;EAKA,OAAO;IACLC,gBAAgB,EAAEC,mBADb;IAELC,eAAe,EAAED;EAFZ,CAAP;;EAKA,SAASA,mBAAT,CAA6BE,IAA7B,EAAmC;IACjC,IAAIC,oBAAJ,CADiC,CAGjC;;;IACA,IAAIC,mBAAmB,GAAG,CAACD,oBAAoB,GAAGD,IAAI,CAACG,cAA7B,MAAiD,IAAjD,IAAyDF,oBAAoB,KAAK,KAAK,CAAvF,GAA2FA,oBAA3F,GAAkH,EAA5I;;IAEA,KAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,mBAAmB,CAACG,MAA5C,EAAoDD,GAAG,EAAvD,EAA2D;MACzD,IAAIE,aAAa,GAAGJ,mBAAmB,CAACE,GAAD,CAAvC;MACA,IAAIG,SAAS,GAAGD,aAAa,CAACC,SAA9B;MACA,IAAIC,2BAA2B,GAAGrB,qBAAqB,CAACoB,SAAD,CAAvD;;MAEA,IAAIjB,sBAAsB,CAACiB,SAAD,CAA1B,EAAuC;QACrCvB,OAAO,CAACyB,WAAR,CAAoB,IAAI3B,YAAJ,CAAiB,YAAY4B,MAAZ,CAAmBH,SAAnB,EAA8B,yDAA9B,CAAjB,EAA2GD,aAA3G,CAApB;MACD,CAFD,MAEO,IAAIE,2BAAJ,EAAiC;QACtCxB,OAAO,CAACyB,WAAR,CAAoB,IAAI3B,YAAJ,CAAiB,yBAAyB4B,MAAzB,CAAgCH,SAAhC,EAA2C,kBAA3C,CAAjB,EAAiF,CAACC,2BAAD,EAA8BF,aAA9B,CAAjF,CAApB;MACD,CAFM,MAEA;QACLnB,qBAAqB,CAACoB,SAAD,CAArB,GAAmCD,aAAnC;MACD;IACF;;IAED,OAAO,KAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}