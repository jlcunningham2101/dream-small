{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n/**\r\n * Variables are input types\r\n *\r\n * A GraphQL operation is only valid if all the variables it defines are of\r\n * input types (scalar, enum, or input object).\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\r\n */\n\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(new GraphQLError(`Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`, {\n          nodes: node.type\n        }));\n      }\n    }\n\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isInputType","typeFromAST","VariablesAreInputTypesRule","context","VariableDefinition","node","type","getSchema","undefined","variableName","variable","name","value","typeName","reportError","nodes"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { print } from '../../language/printer.mjs';\r\nimport { isInputType } from '../../type/definition.mjs';\r\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\r\n\r\n/**\r\n * Variables are input types\r\n *\r\n * A GraphQL operation is only valid if all the variables it defines are of\r\n * input types (scalar, enum, or input object).\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\r\n */\r\nexport function VariablesAreInputTypesRule(context) {\r\n  return {\r\n    VariableDefinition(node) {\r\n      const type = typeFromAST(context.getSchema(), node.type);\r\n\r\n      if (type !== undefined && !isInputType(type)) {\r\n        const variableName = node.variable.name.value;\r\n        const typeName = print(node.type);\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\r\n            {\r\n              nodes: node.type,\r\n            },\r\n          ),\r\n        );\r\n      }\r\n    },\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCC,OAApC,EAA6C;EAClD,OAAO;IACLC,kBAAkB,CAACC,IAAD,EAAO;MACvB,MAAMC,IAAI,GAAGL,WAAW,CAACE,OAAO,CAACI,SAAR,EAAD,EAAsBF,IAAI,CAACC,IAA3B,CAAxB;;MAEA,IAAIA,IAAI,KAAKE,SAAT,IAAsB,CAACR,WAAW,CAACM,IAAD,CAAtC,EAA8C;QAC5C,MAAMG,YAAY,GAAGJ,IAAI,CAACK,QAAL,CAAcC,IAAd,CAAmBC,KAAxC;QACA,MAAMC,QAAQ,GAAGd,KAAK,CAACM,IAAI,CAACC,IAAN,CAAtB;QACAH,OAAO,CAACW,WAAR,CACE,IAAIhB,YAAJ,CACG,cAAaW,YAAa,+BAA8BI,QAAS,IADpE,EAEE;UACEE,KAAK,EAAEV,IAAI,CAACC;QADd,CAFF,CADF;MAQD;IACF;;EAhBI,CAAP;AAkBD"},"metadata":{},"sourceType":"module"}