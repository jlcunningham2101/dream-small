{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\n\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread: function FragmentSpread(node) {\n      var fragmentName = node.name.value;\n      var fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(new GraphQLError(\"Unknown fragment \\\"\".concat(fragmentName, \"\\\".\"), node.name));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","KnownFragmentNamesRule","context","FragmentSpread","node","fragmentName","name","value","fragment","getFragment","reportError","concat"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread: function FragmentSpread(node) {\n      var fragmentName = node.name.value;\n      var fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(new GraphQLError(\"Unknown fragment \\\"\".concat(fragmentName, \"\\\".\"), node.name));\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;EAC9C,OAAO;IACLC,cAAc,EAAE,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;MAC5C,IAAIC,YAAY,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA7B;MACA,IAAIC,QAAQ,GAAGN,OAAO,CAACO,WAAR,CAAoBJ,YAApB,CAAf;;MAEA,IAAI,CAACG,QAAL,EAAe;QACbN,OAAO,CAACQ,WAAR,CAAoB,IAAIV,YAAJ,CAAiB,sBAAsBW,MAAtB,CAA6BN,YAA7B,EAA2C,KAA3C,CAAjB,EAAoED,IAAI,CAACE,IAAzE,CAApB;MACD;IACF;EARI,CAAP;AAUD"},"metadata":{},"sourceType":"module"}