{"ast":null,"code":"import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport { isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isUnionType } from '../../type/definition.mjs';\n/**\r\n * Possible type extension\r\n *\r\n * A type extension is only valid if the type is defined and has the same kind.\r\n */\n\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n          nodes: defNode ? [defNode, node] : node\n        }));\n      }\n    } else {\n      const allTypeNames = Object.keys({ ...definedTypes,\n        ...(schema === null || schema === void 0 ? void 0 : schema.getTypeMap())\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(`Cannot extend type \"${typeName}\" because it is not defined.` + didYouMean(suggestedTypes), {\n        nodes: node.name\n      }));\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}","map":{"version":3,"names":["didYouMean","inspect","invariant","suggestionList","GraphQLError","Kind","isTypeDefinitionNode","isEnumType","isInputObjectType","isInterfaceType","isObjectType","isScalarType","isUnionType","PossibleTypeExtensionsRule","context","schema","getSchema","definedTypes","Object","create","def","getDocument","definitions","name","value","ScalarTypeExtension","checkExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","node","typeName","defNode","existingType","getType","expectedKind","defKindToExtKind","kind","typeToExtKind","kindStr","extensionKindToTypeName","reportError","nodes","allTypeNames","keys","getTypeMap","suggestedTypes","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","type"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\r\nimport { inspect } from '../../jsutils/inspect.mjs';\r\nimport { invariant } from '../../jsutils/invariant.mjs';\r\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { Kind } from '../../language/kinds.mjs';\r\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\r\nimport {\r\n  isEnumType,\r\n  isInputObjectType,\r\n  isInterfaceType,\r\n  isObjectType,\r\n  isScalarType,\r\n  isUnionType,\r\n} from '../../type/definition.mjs';\r\n\r\n/**\r\n * Possible type extension\r\n *\r\n * A type extension is only valid if the type is defined and has the same kind.\r\n */\r\nexport function PossibleTypeExtensionsRule(context) {\r\n  const schema = context.getSchema();\r\n  const definedTypes = Object.create(null);\r\n\r\n  for (const def of context.getDocument().definitions) {\r\n    if (isTypeDefinitionNode(def)) {\r\n      definedTypes[def.name.value] = def;\r\n    }\r\n  }\r\n\r\n  return {\r\n    ScalarTypeExtension: checkExtension,\r\n    ObjectTypeExtension: checkExtension,\r\n    InterfaceTypeExtension: checkExtension,\r\n    UnionTypeExtension: checkExtension,\r\n    EnumTypeExtension: checkExtension,\r\n    InputObjectTypeExtension: checkExtension,\r\n  };\r\n\r\n  function checkExtension(node) {\r\n    const typeName = node.name.value;\r\n    const defNode = definedTypes[typeName];\r\n    const existingType =\r\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\r\n    let expectedKind;\r\n\r\n    if (defNode) {\r\n      expectedKind = defKindToExtKind[defNode.kind];\r\n    } else if (existingType) {\r\n      expectedKind = typeToExtKind(existingType);\r\n    }\r\n\r\n    if (expectedKind) {\r\n      if (expectedKind !== node.kind) {\r\n        const kindStr = extensionKindToTypeName(node.kind);\r\n        context.reportError(\r\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\r\n            nodes: defNode ? [defNode, node] : node,\r\n          }),\r\n        );\r\n      }\r\n    } else {\r\n      const allTypeNames = Object.keys({\r\n        ...definedTypes,\r\n        ...(schema === null || schema === void 0\r\n          ? void 0\r\n          : schema.getTypeMap()),\r\n      });\r\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\r\n      context.reportError(\r\n        new GraphQLError(\r\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\r\n            didYouMean(suggestedTypes),\r\n          {\r\n            nodes: node.name,\r\n          },\r\n        ),\r\n      );\r\n    }\r\n  }\r\n}\r\nconst defKindToExtKind = {\r\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\r\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\r\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\r\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\r\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\r\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\r\n};\r\n\r\nfunction typeToExtKind(type) {\r\n  if (isScalarType(type)) {\r\n    return Kind.SCALAR_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isObjectType(type)) {\r\n    return Kind.OBJECT_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isInterfaceType(type)) {\r\n    return Kind.INTERFACE_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isUnionType(type)) {\r\n    return Kind.UNION_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isEnumType(type)) {\r\n    return Kind.ENUM_TYPE_EXTENSION;\r\n  }\r\n\r\n  if (isInputObjectType(type)) {\r\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\r\n  }\r\n  /* c8 ignore next 3 */\r\n  // Not reachable. All possible types have been considered\r\n\r\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\r\n}\r\n\r\nfunction extensionKindToTypeName(kind) {\r\n  switch (kind) {\r\n    case Kind.SCALAR_TYPE_EXTENSION:\r\n      return 'scalar';\r\n\r\n    case Kind.OBJECT_TYPE_EXTENSION:\r\n      return 'object';\r\n\r\n    case Kind.INTERFACE_TYPE_EXTENSION:\r\n      return 'interface';\r\n\r\n    case Kind.UNION_TYPE_EXTENSION:\r\n      return 'union';\r\n\r\n    case Kind.ENUM_TYPE_EXTENSION:\r\n      return 'enum';\r\n\r\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\r\n      return 'input object';\r\n    // Not reachable. All possible types have been considered\r\n\r\n    /* c8 ignore next */\r\n\r\n    default:\r\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}