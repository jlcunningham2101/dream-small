{"ast":null,"code":"import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), selectionSet));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n\n          var _typeStr = inspect(type);\n\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), node));\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError","concat","_fieldName","_typeStr"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"sourcesContent":["import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), selectionSet));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n\n          var _typeStr = inspect(type);\n\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), node));\n        }\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,2BAApB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,2BAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;EACvC,OAAO;IACLC,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;MAC1B,IAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,EAAX;MACA,IAAIC,YAAY,GAAGH,IAAI,CAACG,YAAxB;;MAEA,IAAIF,IAAJ,EAAU;QACR,IAAIL,UAAU,CAACD,YAAY,CAACM,IAAD,CAAb,CAAd,EAAoC;UAClC,IAAIE,YAAJ,EAAkB;YAChB,IAAIC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA1B;YACA,IAAIC,OAAO,GAAGd,OAAO,CAACQ,IAAD,CAArB;YACAH,OAAO,CAACU,WAAR,CAAoB,IAAId,YAAJ,CAAiB,WAAWe,MAAX,CAAkBL,SAAlB,EAA6B,4CAA7B,EAA2EK,MAA3E,CAAkFF,OAAlF,EAA2F,sBAA3F,CAAjB,EAAqIJ,YAArI,CAApB;UACD;QACF,CAND,MAMO,IAAI,CAACA,YAAL,EAAmB;UACxB,IAAIO,UAAU,GAAGV,IAAI,CAACK,IAAL,CAAUC,KAA3B;;UAEA,IAAIK,QAAQ,GAAGlB,OAAO,CAACQ,IAAD,CAAtB;;UAEAH,OAAO,CAACU,WAAR,CAAoB,IAAId,YAAJ,CAAiB,WAAWe,MAAX,CAAkBC,UAAlB,EAA8B,eAA9B,EAA+CD,MAA/C,CAAsDE,QAAtD,EAAgE,wDAAhE,EAA0HF,MAA1H,CAAiIC,UAAjI,EAA6I,aAA7I,CAAjB,EAA8KV,IAA9K,CAApB;QACD;MACF;IACF;EApBI,CAAP;AAsBD"},"metadata":{},"sourceType":"module"}