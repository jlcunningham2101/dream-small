{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport mapValue from \"../jsutils/mapValue.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { TokenKind } from \"../language/tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"../language/blockString.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../language/predicates.mjs\";\nimport { assertValidSDLExtension } from \"../validation/validate.mjs\";\nimport { getDirectiveValues } from \"../execution/values.mjs\";\nimport { assertSchema, GraphQLSchema } from \"../type/schema.mjs\";\nimport { specifiedScalarTypes, isSpecifiedScalarType } from \"../type/scalars.mjs\";\nimport { introspectionTypes, isIntrospectionType } from \"../type/introspection.mjs\";\nimport { GraphQLDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective } from \"../type/directives.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isListType, isNonNullType, isEnumType, isInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(0, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  var schemaConfig = schema.toConfig();\n  var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig ? schema : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid; // Collect the type definitions and extensions found in the document.\n\n\n  var typeDefs = [];\n  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  var directiveDefs = [];\n  var schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  var schemaExtensions = [];\n\n  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {\n    var def = _documentAST$definiti2[_i2];\n\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      var extendedTypeName = def.name.value;\n      var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n\n  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {\n    return schemaConfig;\n  }\n\n  var typeMap = Object.create(null);\n\n  for (var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++) {\n    var existingType = _schemaConfig$types2[_i4];\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {\n    var _stdTypeMap$name;\n\n    var typeNode = typeDefs[_i6];\n    var name = typeNode.name.value;\n    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);\n  }\n\n  var operationTypes = _objectSpread(_objectSpread({\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)\n  }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.\n\n\n  return _objectSpread(_objectSpread({\n    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value\n  }, operationTypes), {}, {\n    types: objectValues(typeMap),\n    directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),\n    extensions: undefined,\n    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false\n  }); // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      args: mapValue(config.args, extendArg)\n    }));\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n    false || invariant(0, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];\n    return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, function (field) {\n          return _objectSpread(_objectSpread({}, field), {}, {\n            type: replaceType(field.type)\n          });\n        })), buildInputFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];\n    return new GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {\n      values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];\n    var specifiedByUrl = config.specifiedByUrl;\n\n    for (var _i8 = 0; _i8 < extensions.length; _i8++) {\n      var _getSpecifiedByUrl;\n\n      var extensionNode = extensions[_i8];\n      specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;\n    }\n\n    return new GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {\n      specifiedByUrl: specifiedByUrl,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];\n    return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];\n    return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];\n    return new GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {\n      types: function types() {\n        return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendField(field) {\n    return _objectSpread(_objectSpread({}, field), {}, {\n      type: replaceType(field.type),\n      // $FlowFixMe[incompatible-call]\n      args: mapValue(field.args, extendArg)\n    });\n  }\n\n  function extendArg(arg) {\n    return _objectSpread(_objectSpread({}, arg), {}, {\n      type: replaceType(arg.type)\n    });\n  }\n\n  function getOperationTypes(nodes) {\n    var opTypes = {};\n\n    for (var _i10 = 0; _i10 < nodes.length; _i10++) {\n      var _node$operationTypes;\n\n      var node = nodes[_i10]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n      var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n      for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {\n        var operationType = operationTypesNodes[_i12];\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    } // Note: While this could make early assertions to get the correctly\n    // typed values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    var name = node.name.value;\n    var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(\"Unknown type: \\\"\".concat(name, \"\\\".\"));\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var locations = node.locations.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    return new GraphQLDirective({\n      name: node.name.value,\n      description: getDescription(node, options),\n      locations: locations,\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    var fieldConfigMap = Object.create(null);\n\n    for (var _i14 = 0; _i14 < nodes.length; _i14++) {\n      var _node$fields;\n\n      var node = nodes[_i14]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n      var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n\n      for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {\n        var field = nodeFields[_i16];\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description: getDescription(field, options),\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var argsNodes = args !== null && args !== void 0 ? args : [];\n    var argConfigMap = Object.create(null);\n\n    for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {\n      var arg = argsNodes[_i18]; // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n\n      var type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type: type,\n        description: getDescription(arg, options),\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    var inputFieldMap = Object.create(null);\n\n    for (var _i20 = 0; _i20 < nodes.length; _i20++) {\n      var _node$fields2;\n\n      var node = nodes[_i20]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n      var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];\n\n      for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {\n        var field = fieldsNodes[_i22]; // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n\n        var type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type: type,\n          description: getDescription(field, options),\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    var enumValueMap = Object.create(null);\n\n    for (var _i24 = 0; _i24 < nodes.length; _i24++) {\n      var _node$values;\n\n      var node = nodes[_i24]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n      var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n\n      for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {\n        var value = valuesNodes[_i26];\n        enumValueMap[value.name.value] = {\n          description: getDescription(value, options),\n          deprecationReason: getDeprecationReason(value),\n          astNode: value\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    var interfaces = [];\n\n    for (var _i28 = 0; _i28 < nodes.length; _i28++) {\n      var _node$interfaces;\n\n      var node = nodes[_i28]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n      var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];\n\n      for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {\n        var type = interfacesNodes[_i30]; // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n\n        interfaces.push(getNamedType(type));\n      }\n    }\n\n    return interfaces;\n  }\n\n  function buildUnionTypes(nodes) {\n    var types = [];\n\n    for (var _i32 = 0; _i32 < nodes.length; _i32++) {\n      var _node$types;\n\n      var node = nodes[_i32]; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n      var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];\n\n      for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {\n        var type = typeNodes[_i34]; // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n\n        types.push(getNamedType(type));\n      }\n    }\n\n    return types;\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    var name = astNode.name.value;\n    var description = getDescription(astNode, options);\n    var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        {\n          var extensionASTNodes = extensionNodes;\n          var allNodes = [astNode].concat(extensionASTNodes);\n          return new GraphQLObjectType({\n            name: name,\n            description: description,\n            interfaces: function interfaces() {\n              return buildInterfaces(allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes = extensionNodes;\n\n          var _allNodes = [astNode].concat(_extensionASTNodes);\n\n          return new GraphQLInterfaceType({\n            name: name,\n            description: description,\n            interfaces: function interfaces() {\n              return buildInterfaces(_allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(_allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes\n          });\n        }\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes2 = extensionNodes;\n\n          var _allNodes2 = [astNode].concat(_extensionASTNodes2);\n\n          return new GraphQLEnumType({\n            name: name,\n            description: description,\n            values: buildEnumValueMap(_allNodes2),\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes2\n          });\n        }\n\n      case Kind.UNION_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes3 = extensionNodes;\n\n          var _allNodes3 = [astNode].concat(_extensionASTNodes3);\n\n          return new GraphQLUnionType({\n            name: name,\n            description: description,\n            types: function types() {\n              return buildUnionTypes(_allNodes3);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes3\n          });\n        }\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes4 = extensionNodes;\n          return new GraphQLScalarType({\n            name: name,\n            description: description,\n            specifiedByUrl: getSpecifiedByUrl(astNode),\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes4\n          });\n        }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes5 = extensionNodes;\n\n          var _allNodes4 = [astNode].concat(_extensionASTNodes5);\n\n          return new GraphQLInputObjectType({\n            name: name,\n            description: description,\n            fields: function fields() {\n              return buildInputFieldMap(_allNodes4);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes5\n          });\n        }\n    } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)\n\n\n    false || invariant(0, 'Unexpected type definition node: ' + inspect(astNode));\n  }\n}\nvar stdTypeMap = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {\n  return type.name;\n});\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByUrl.\n */\n\n\nfunction getSpecifiedByUrl(node) {\n  var specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node);\n  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;\n}\n/**\n * Given an ast node, returns its string description.\n * @deprecated: provided to ease adoption and will be removed in v16.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\n\nexport function getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n\n  if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {\n    var rawValue = getLeadingCommentBlock(node);\n\n    if (rawValue !== undefined) {\n      return dedentBlockStringValue('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n\n  if (!loc) {\n    return;\n  }\n\n  var comments = [];\n  var token = loc.startToken.prev;\n\n  while (token != null && token.kind === TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n\n  return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","objectValues","keyMap","inspect","mapValue","invariant","devAssert","Kind","TokenKind","dedentBlockStringValue","isTypeDefinitionNode","isTypeExtensionNode","assertValidSDLExtension","getDirectiveValues","assertSchema","GraphQLSchema","specifiedScalarTypes","isSpecifiedScalarType","introspectionTypes","isIntrospectionType","GraphQLDirective","GraphQLDeprecatedDirective","GraphQLSpecifiedByDirective","isScalarType","isObjectType","isInterfaceType","isUnionType","isListType","isNonNullType","isEnumType","isInputObjectType","GraphQLList","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","valueFromAST","extendSchema","schema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","schemaConfig","toConfig","extendedConfig","extendSchemaImpl","_schemaDef","_schemaDef$descriptio","_schemaDef2","_options$assumeValid","typeDefs","typeExtensionsMap","create","directiveDefs","schemaDef","schemaExtensions","_i2","_documentAST$definiti2","definitions","def","SCHEMA_DEFINITION","SCHEMA_EXTENSION","extendedTypeName","name","existingTypeExtensions","concat","DIRECTIVE_DEFINITION","typeMap","_i4","_schemaConfig$types2","types","existingType","extendNamedType","_i6","_stdTypeMap$name","typeNode","stdTypeMap","buildType","operationTypes","query","replaceNamedType","mutation","subscription","getOperationTypes","description","directives","map","replaceDirective","buildDirective","extensions","undefined","astNode","extensionASTNodes","replaceType","type","ofType","directive","config","args","extendArg","extendScalarType","extendObjectType","extendInterfaceType","extendUnionType","extendEnumType","extendInputObjectType","_typeExtensionsMap$co","fields","field","buildInputFieldMap","_typeExtensionsMap$ty","values","buildEnumValueMap","_typeExtensionsMap$co2","specifiedByUrl","_i8","_getSpecifiedByUrl","extensionNode","getSpecifiedByUrl","_typeExtensionsMap$co3","interfaces","getInterfaces","buildInterfaces","extendField","buildFieldMap","_typeExtensionsMap$co4","_typeExtensionsMap$co5","getTypes","buildUnionTypes","arg","nodes","opTypes","_i10","_node$operationTypes","node","operationTypesNodes","_i12","operationType","operation","getNamedType","_stdTypeMap$name2","Error","getWrappedType","LIST_TYPE","NON_NULL_TYPE","locations","_ref","getDescription","isRepeatable","repeatable","buildArgumentMap","fieldConfigMap","_i14","_node$fields","nodeFields","_i16","deprecationReason","getDeprecationReason","argsNodes","argConfigMap","_i18","defaultValue","inputFieldMap","_i20","_node$fields2","fieldsNodes","_i22","enumValueMap","_i24","_node$values","valuesNodes","_i26","_i28","_node$interfaces","interfacesNodes","_i30","_i32","_node$types","typeNodes","_i34","_typeExtensionsMap$na","extensionNodes","OBJECT_TYPE_DEFINITION","allNodes","INTERFACE_TYPE_DEFINITION","_extensionASTNodes","_allNodes","ENUM_TYPE_DEFINITION","_extensionASTNodes2","_allNodes2","UNION_TYPE_DEFINITION","_extensionASTNodes3","_allNodes3","SCALAR_TYPE_DEFINITION","_extensionASTNodes4","INPUT_OBJECT_TYPE_DEFINITION","_extensionASTNodes5","_allNodes4","deprecated","reason","specifiedBy","url","commentDescriptions","rawValue","getLeadingCommentBlock","loc","comments","token","startToken","prev","COMMENT","next","line","String","reverse","join"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/utilities/extendSchema.mjs"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport mapValue from \"../jsutils/mapValue.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { TokenKind } from \"../language/tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"../language/blockString.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../language/predicates.mjs\";\nimport { assertValidSDLExtension } from \"../validation/validate.mjs\";\nimport { getDirectiveValues } from \"../execution/values.mjs\";\nimport { assertSchema, GraphQLSchema } from \"../type/schema.mjs\";\nimport { specifiedScalarTypes, isSpecifiedScalarType } from \"../type/scalars.mjs\";\nimport { introspectionTypes, isIntrospectionType } from \"../type/introspection.mjs\";\nimport { GraphQLDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective } from \"../type/directives.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isListType, isNonNullType, isEnumType, isInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(0, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  var schemaConfig = schema.toConfig();\n  var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig ? schema : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  var typeDefs = [];\n  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  var directiveDefs = [];\n  var schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  var schemaExtensions = [];\n\n  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {\n    var def = _documentAST$definiti2[_i2];\n\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      var extendedTypeName = def.name.value;\n      var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n\n  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {\n    return schemaConfig;\n  }\n\n  var typeMap = Object.create(null);\n\n  for (var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++) {\n    var existingType = _schemaConfig$types2[_i4];\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (var _i6 = 0; _i6 < typeDefs.length; _i6++) {\n    var _stdTypeMap$name;\n\n    var typeNode = typeDefs[_i6];\n    var name = typeNode.name.value;\n    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);\n  }\n\n  var operationTypes = _objectSpread(_objectSpread({\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)\n  }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.\n\n\n  return _objectSpread(_objectSpread({\n    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value\n  }, operationTypes), {}, {\n    types: objectValues(typeMap),\n    directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),\n    extensions: undefined,\n    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false\n  }); // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      args: mapValue(config.args, extendArg)\n    }));\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n    false || invariant(0, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];\n    return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, function (field) {\n          return _objectSpread(_objectSpread({}, field), {}, {\n            type: replaceType(field.type)\n          });\n        })), buildInputFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];\n    return new GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {\n      values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];\n    var specifiedByUrl = config.specifiedByUrl;\n\n    for (var _i8 = 0; _i8 < extensions.length; _i8++) {\n      var _getSpecifiedByUrl;\n\n      var extensionNode = extensions[_i8];\n      specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;\n    }\n\n    return new GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {\n      specifiedByUrl: specifiedByUrl,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];\n    return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];\n    return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];\n    return new GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {\n      types: function types() {\n        return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendField(field) {\n    return _objectSpread(_objectSpread({}, field), {}, {\n      type: replaceType(field.type),\n      // $FlowFixMe[incompatible-call]\n      args: mapValue(field.args, extendArg)\n    });\n  }\n\n  function extendArg(arg) {\n    return _objectSpread(_objectSpread({}, arg), {}, {\n      type: replaceType(arg.type)\n    });\n  }\n\n  function getOperationTypes(nodes) {\n    var opTypes = {};\n\n    for (var _i10 = 0; _i10 < nodes.length; _i10++) {\n      var _node$operationTypes;\n\n      var node = nodes[_i10];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n      for (var _i12 = 0; _i12 < operationTypesNodes.length; _i12++) {\n        var operationType = operationTypesNodes[_i12];\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    } // Note: While this could make early assertions to get the correctly\n    // typed values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    var name = node.name.value;\n    var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(\"Unknown type: \\\"\".concat(name, \"\\\".\"));\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var locations = node.locations.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    return new GraphQLDirective({\n      name: node.name.value,\n      description: getDescription(node, options),\n      locations: locations,\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    var fieldConfigMap = Object.create(null);\n\n    for (var _i14 = 0; _i14 < nodes.length; _i14++) {\n      var _node$fields;\n\n      var node = nodes[_i14];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n\n      for (var _i16 = 0; _i16 < nodeFields.length; _i16++) {\n        var field = nodeFields[_i16];\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description: getDescription(field, options),\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var argsNodes = args !== null && args !== void 0 ? args : [];\n    var argConfigMap = Object.create(null);\n\n    for (var _i18 = 0; _i18 < argsNodes.length; _i18++) {\n      var arg = argsNodes[_i18];\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      var type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type: type,\n        description: getDescription(arg, options),\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    var inputFieldMap = Object.create(null);\n\n    for (var _i20 = 0; _i20 < nodes.length; _i20++) {\n      var _node$fields2;\n\n      var node = nodes[_i20];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];\n\n      for (var _i22 = 0; _i22 < fieldsNodes.length; _i22++) {\n        var field = fieldsNodes[_i22];\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        var type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type: type,\n          description: getDescription(field, options),\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    var enumValueMap = Object.create(null);\n\n    for (var _i24 = 0; _i24 < nodes.length; _i24++) {\n      var _node$values;\n\n      var node = nodes[_i24];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n\n      for (var _i26 = 0; _i26 < valuesNodes.length; _i26++) {\n        var value = valuesNodes[_i26];\n        enumValueMap[value.name.value] = {\n          description: getDescription(value, options),\n          deprecationReason: getDeprecationReason(value),\n          astNode: value\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    var interfaces = [];\n\n    for (var _i28 = 0; _i28 < nodes.length; _i28++) {\n      var _node$interfaces;\n\n      var node = nodes[_i28];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];\n\n      for (var _i30 = 0; _i30 < interfacesNodes.length; _i30++) {\n        var type = interfacesNodes[_i30];\n        // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n        interfaces.push(getNamedType(type));\n      }\n    }\n\n    return interfaces;\n  }\n\n  function buildUnionTypes(nodes) {\n    var types = [];\n\n    for (var _i32 = 0; _i32 < nodes.length; _i32++) {\n      var _node$types;\n\n      var node = nodes[_i32];\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];\n\n      for (var _i34 = 0; _i34 < typeNodes.length; _i34++) {\n        var type = typeNodes[_i34];\n        // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n        types.push(getNamedType(type));\n      }\n    }\n\n    return types;\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    var name = astNode.name.value;\n    var description = getDescription(astNode, options);\n    var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        {\n          var extensionASTNodes = extensionNodes;\n          var allNodes = [astNode].concat(extensionASTNodes);\n          return new GraphQLObjectType({\n            name: name,\n            description: description,\n            interfaces: function interfaces() {\n              return buildInterfaces(allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes = extensionNodes;\n\n          var _allNodes = [astNode].concat(_extensionASTNodes);\n\n          return new GraphQLInterfaceType({\n            name: name,\n            description: description,\n            interfaces: function interfaces() {\n              return buildInterfaces(_allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(_allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes\n          });\n        }\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes2 = extensionNodes;\n\n          var _allNodes2 = [astNode].concat(_extensionASTNodes2);\n\n          return new GraphQLEnumType({\n            name: name,\n            description: description,\n            values: buildEnumValueMap(_allNodes2),\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes2\n          });\n        }\n\n      case Kind.UNION_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes3 = extensionNodes;\n\n          var _allNodes3 = [astNode].concat(_extensionASTNodes3);\n\n          return new GraphQLUnionType({\n            name: name,\n            description: description,\n            types: function types() {\n              return buildUnionTypes(_allNodes3);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes3\n          });\n        }\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes4 = extensionNodes;\n          return new GraphQLScalarType({\n            name: name,\n            description: description,\n            specifiedByUrl: getSpecifiedByUrl(astNode),\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes4\n          });\n        }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        {\n          var _extensionASTNodes5 = extensionNodes;\n\n          var _allNodes4 = [astNode].concat(_extensionASTNodes5);\n\n          return new GraphQLInputObjectType({\n            name: name,\n            description: description,\n            fields: function fields() {\n              return buildInputFieldMap(_allNodes4);\n            },\n            astNode: astNode,\n            extensionASTNodes: _extensionASTNodes5\n          });\n        }\n    } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)\n\n\n    false || invariant(0, 'Unexpected type definition node: ' + inspect(astNode));\n  }\n}\nvar stdTypeMap = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {\n  return type.name;\n});\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByUrl.\n */\n\n\nfunction getSpecifiedByUrl(node) {\n  var specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node);\n  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;\n}\n/**\n * Given an ast node, returns its string description.\n * @deprecated: provided to ease adoption and will be removed in v16.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\n\nexport function getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n\n  if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {\n    var rawValue = getLeadingCommentBlock(node);\n\n    if (rawValue !== undefined) {\n      return dedentBlockStringValue('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n\n  if (!loc) {\n    return;\n  }\n\n  var comments = [];\n  var token = loc.startToken.prev;\n\n  while (token != null && token.kind === TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n\n  return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\n"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;EAAE,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;EAAgC,IAAIG,MAAM,CAACC,qBAAX,EAAkC;IAAE,IAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;IAAoD,IAAIC,cAAJ,EAAoBI,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;MAAE,OAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;IAAiE,CAAjG,CAAV;IAA8GP,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB;EAAiC;;EAAC,OAAOH,IAAP;AAAc;;AAErV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;IAAE,IAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;IAAuD,IAAIA,CAAC,GAAG,CAAR,EAAW;MAAEf,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;QAAEC,eAAe,CAACP,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;MAA4C,CAAnG;IAAuG,CAApH,MAA0H,IAAIhB,MAAM,CAACkB,yBAAX,EAAsC;MAAElB,MAAM,CAACmB,gBAAP,CAAwBT,MAAxB,EAAgCV,MAAM,CAACkB,yBAAP,CAAiCJ,MAAjC,CAAhC;IAA4E,CAApH,MAA0H;MAAElB,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;QAAEhB,MAAM,CAACoB,cAAP,CAAsBV,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;MAAmF,CAApI;IAAwI;EAAE;;EAAC,OAAON,MAAP;AAAgB;;AAEthB,SAASO,eAAT,CAAyBI,GAAzB,EAA8BL,GAA9B,EAAmCM,KAAnC,EAA0C;EAAE,IAAIN,GAAG,IAAIK,GAAX,EAAgB;IAAErB,MAAM,CAACoB,cAAP,CAAsBC,GAAtB,EAA2BL,GAA3B,EAAgC;MAAEM,KAAK,EAAEA,KAAT;MAAgBhB,UAAU,EAAE,IAA5B;MAAkCiB,YAAY,EAAE,IAAhD;MAAsDC,QAAQ,EAAE;IAAhE,CAAhC;EAA0G,CAA5H,MAAkI;IAAEH,GAAG,CAACL,GAAD,CAAH,GAAWM,KAAX;EAAmB;;EAAC,OAAOD,GAAP;AAAa;;AAEjN,OAAOI,YAAP,MAAyB,+BAAzB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,4BAA1D;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,qBAA5D;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,2BAAxD;AACA,SAASC,gBAAT,EAA2BC,0BAA3B,EAAuDC,2BAAvD,QAA0F,wBAA1F;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,eAArC,EAAsDC,WAAtD,EAAmEC,UAAnE,EAA+EC,aAA/E,EAA8FC,UAA9F,EAA0GC,iBAA1G,EAA6HC,WAA7H,EAA0IC,cAA1I,EAA0JC,iBAA1J,EAA6KC,iBAA7K,EAAgMC,oBAAhM,EAAsNC,gBAAtN,EAAwOC,eAAxO,EAAyPC,sBAAzP,QAAuR,wBAAvR;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,WAA9B,EAA2CC,OAA3C,EAAoD;EACzD7B,YAAY,CAAC2B,MAAD,CAAZ;EACAC,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAACE,IAAZ,KAAqBrC,IAAI,CAACsC,QAAjD,IAA6DvC,SAAS,CAAC,CAAD,EAAI,kCAAJ,CAAtE;;EAEA,IAAI,CAACqC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,WAA3D,MAA4E,IAA5E,IAAoF,CAACH,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACI,cAA3D,MAA+E,IAAvK,EAA6K;IAC3KnC,uBAAuB,CAAC8B,WAAD,EAAcD,MAAd,CAAvB;EACD;;EAED,IAAIO,YAAY,GAAGP,MAAM,CAACQ,QAAP,EAAnB;EACA,IAAIC,cAAc,GAAGC,gBAAgB,CAACH,YAAD,EAAeN,WAAf,EAA4BC,OAA5B,CAArC;EACA,OAAOK,YAAY,KAAKE,cAAjB,GAAkCT,MAAlC,GAA2C,IAAI1B,aAAJ,CAAkBmC,cAAlB,CAAlD;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BH,YAA1B,EAAwCN,WAAxC,EAAqDC,OAArD,EAA8D;EACnE,IAAIS,UAAJ,EAAgBC,qBAAhB,EAAuCC,WAAvC,EAAoDC,oBAApD,CADmE,CAGnE;;;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,iBAAiB,GAAGjF,MAAM,CAACkF,MAAP,CAAc,IAAd,CAAxB,CALmE,CAKtB;EAC7C;;EAEA,IAAIC,aAAa,GAAG,EAApB;EACA,IAAIC,SAAJ,CATmE,CASpD;;EAEf,IAAIC,gBAAgB,GAAG,EAAvB;;EAEA,KAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,sBAAsB,GAAGrB,WAAW,CAACsB,WAAvD,EAAoEF,GAAG,GAAGC,sBAAsB,CAAC1E,MAAjG,EAAyGyE,GAAG,EAA5G,EAAgH;IAC9G,IAAIG,GAAG,GAAGF,sBAAsB,CAACD,GAAD,CAAhC;;IAEA,IAAIG,GAAG,CAACrB,IAAJ,KAAarC,IAAI,CAAC2D,iBAAtB,EAAyC;MACvCN,SAAS,GAAGK,GAAZ;IACD,CAFD,MAEO,IAAIA,GAAG,CAACrB,IAAJ,KAAarC,IAAI,CAAC4D,gBAAtB,EAAwC;MAC7CN,gBAAgB,CAAC9E,IAAjB,CAAsBkF,GAAtB;IACD,CAFM,MAEA,IAAIvD,oBAAoB,CAACuD,GAAD,CAAxB,EAA+B;MACpCT,QAAQ,CAACzE,IAAT,CAAckF,GAAd;IACD,CAFM,MAEA,IAAItD,mBAAmB,CAACsD,GAAD,CAAvB,EAA8B;MACnC,IAAIG,gBAAgB,GAAGH,GAAG,CAACI,IAAJ,CAASvE,KAAhC;MACA,IAAIwE,sBAAsB,GAAGb,iBAAiB,CAACW,gBAAD,CAA9C;MACAX,iBAAiB,CAACW,gBAAD,CAAjB,GAAsCE,sBAAsB,GAAGA,sBAAsB,CAACC,MAAvB,CAA8B,CAACN,GAAD,CAA9B,CAAH,GAA0C,CAACA,GAAD,CAAtG;IACD,CAJM,MAIA,IAAIA,GAAG,CAACrB,IAAJ,KAAarC,IAAI,CAACiE,oBAAtB,EAA4C;MACjDb,aAAa,CAAC5E,IAAd,CAAmBkF,GAAnB;IACD;EACF,CA7BkE,CA6BjE;EACF;;;EAGA,IAAIzF,MAAM,CAACD,IAAP,CAAYkF,iBAAZ,EAA+BpE,MAA/B,KAA0C,CAA1C,IAA+CmE,QAAQ,CAACnE,MAAT,KAAoB,CAAnE,IAAwEsE,aAAa,CAACtE,MAAd,KAAyB,CAAjG,IAAsGwE,gBAAgB,CAACxE,MAAjB,KAA4B,CAAlI,IAAuIuE,SAAS,IAAI,IAAxJ,EAA8J;IAC5J,OAAOZ,YAAP;EACD;;EAED,IAAIyB,OAAO,GAAGjG,MAAM,CAACkF,MAAP,CAAc,IAAd,CAAd;;EAEA,KAAK,IAAIgB,GAAG,GAAG,CAAV,EAAaC,oBAAoB,GAAG3B,YAAY,CAAC4B,KAAtD,EAA6DF,GAAG,GAAGC,oBAAoB,CAACtF,MAAxF,EAAgGqF,GAAG,EAAnG,EAAuG;IACrG,IAAIG,YAAY,GAAGF,oBAAoB,CAACD,GAAD,CAAvC;IACAD,OAAO,CAACI,YAAY,CAACR,IAAd,CAAP,GAA6BS,eAAe,CAACD,YAAD,CAA5C;EACD;;EAED,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGvB,QAAQ,CAACnE,MAAjC,EAAyC0F,GAAG,EAA5C,EAAgD;IAC9C,IAAIC,gBAAJ;;IAEA,IAAIC,QAAQ,GAAGzB,QAAQ,CAACuB,GAAD,CAAvB;IACA,IAAIV,IAAI,GAAGY,QAAQ,CAACZ,IAAT,CAAcvE,KAAzB;IACA2E,OAAO,CAACJ,IAAD,CAAP,GAAgB,CAACW,gBAAgB,GAAGE,UAAU,CAACb,IAAD,CAA9B,MAA0C,IAA1C,IAAkDW,gBAAgB,KAAK,KAAK,CAA5E,GAAgFA,gBAAhF,GAAmGG,SAAS,CAACF,QAAD,CAA5H;EACD;;EAED,IAAIG,cAAc,GAAGnG,aAAa,CAACA,aAAa,CAAC;IAC/C;IACAoG,KAAK,EAAErC,YAAY,CAACqC,KAAb,IAAsBC,gBAAgB,CAACtC,YAAY,CAACqC,KAAd,CAFE;IAG/CE,QAAQ,EAAEvC,YAAY,CAACuC,QAAb,IAAyBD,gBAAgB,CAACtC,YAAY,CAACuC,QAAd,CAHJ;IAI/CC,YAAY,EAAExC,YAAY,CAACwC,YAAb,IAA6BF,gBAAgB,CAACtC,YAAY,CAACwC,YAAd;EAJZ,CAAD,EAK7C5B,SAAS,IAAI6B,iBAAiB,CAAC,CAAC7B,SAAD,CAAD,CALe,CAAd,EAKe6B,iBAAiB,CAAC5B,gBAAD,CALhC,CAAlC,CApDmE,CAyDoB;;;EAGvF,OAAO5E,aAAa,CAACA,aAAa,CAAC;IACjCyG,WAAW,EAAE,CAACtC,UAAU,GAAGQ,SAAd,MAA6B,IAA7B,IAAqCR,UAAU,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsE,CAACC,qBAAqB,GAAGD,UAAU,CAACsC,WAApC,MAAqD,IAArD,IAA6DrC,qBAAqB,KAAK,KAAK,CAA5F,GAAgG,KAAK,CAArG,GAAyGA,qBAAqB,CAACvD;EADjL,CAAD,EAE/BsF,cAF+B,CAAd,EAEA,EAFA,EAEI;IACtBR,KAAK,EAAE3E,YAAY,CAACwE,OAAD,CADG;IAEtBkB,UAAU,EAAE,GAAGpB,MAAH,CAAUvB,YAAY,CAAC2C,UAAb,CAAwBC,GAAxB,CAA4BC,gBAA5B,CAAV,EAAyDlC,aAAa,CAACiC,GAAd,CAAkBE,cAAlB,CAAzD,CAFU;IAGtBC,UAAU,EAAEC,SAHU;IAItBC,OAAO,EAAE,CAAC3C,WAAW,GAAGM,SAAf,MAA8B,IAA9B,IAAsCN,WAAW,KAAK,KAAK,CAA3D,GAA+DA,WAA/D,GAA6EN,YAAY,CAACiD,OAJ7E;IAKtBC,iBAAiB,EAAElD,YAAY,CAACkD,iBAAb,CAA+B3B,MAA/B,CAAsCV,gBAAtC,CALG;IAMtBf,WAAW,EAAE,CAACS,oBAAoB,GAAGZ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,WAAlF,MAAmG,IAAnG,IAA2GS,oBAAoB,KAAK,KAAK,CAAzI,GAA6IA,oBAA7I,GAAoK;EAN3J,CAFJ,CAApB,CA5DmE,CAqE/D;EACJ;;EAEA,SAAS4C,WAAT,CAAqBC,IAArB,EAA2B;IACzB,IAAIzE,UAAU,CAACyE,IAAD,CAAd,EAAsB;MACpB;MACA,OAAO,IAAIrE,WAAJ,CAAgBoE,WAAW,CAACC,IAAI,CAACC,MAAN,CAA3B,CAAP;IACD;;IAED,IAAIzE,aAAa,CAACwE,IAAD,CAAjB,EAAyB;MACvB;MACA,OAAO,IAAIpE,cAAJ,CAAmBmE,WAAW,CAACC,IAAI,CAACC,MAAN,CAA9B,CAAP;IACD;;IAED,OAAOf,gBAAgB,CAACc,IAAD,CAAvB;EACD;;EAED,SAASd,gBAAT,CAA0Bc,IAA1B,EAAgC;IAC9B;IACA;IACA;IACA,OAAO3B,OAAO,CAAC2B,IAAI,CAAC/B,IAAN,CAAd;EACD;;EAED,SAASwB,gBAAT,CAA0BS,SAA1B,EAAqC;IACnC,IAAIC,MAAM,GAAGD,SAAS,CAACrD,QAAV,EAAb;IACA,OAAO,IAAI7B,gBAAJ,CAAqBnC,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAL,CAAd,EAA4B,EAA5B,EAAgC;MACvEC,IAAI,EAAEpG,QAAQ,CAACmG,MAAM,CAACC,IAAR,EAAcC,SAAd;IADyD,CAAhC,CAAlC,CAAP;EAGD;;EAED,SAAS3B,eAAT,CAAyBsB,IAAzB,EAA+B;IAC7B,IAAIjF,mBAAmB,CAACiF,IAAD,CAAnB,IAA6BnF,qBAAqB,CAACmF,IAAD,CAAtD,EAA8D;MAC5D;MACA,OAAOA,IAAP;IACD;;IAED,IAAI7E,YAAY,CAAC6E,IAAD,CAAhB,EAAwB;MACtB,OAAOM,gBAAgB,CAACN,IAAD,CAAvB;IACD;;IAED,IAAI5E,YAAY,CAAC4E,IAAD,CAAhB,EAAwB;MACtB,OAAOO,gBAAgB,CAACP,IAAD,CAAvB;IACD;;IAED,IAAI3E,eAAe,CAAC2E,IAAD,CAAnB,EAA2B;MACzB,OAAOQ,mBAAmB,CAACR,IAAD,CAA1B;IACD;;IAED,IAAI1E,WAAW,CAAC0E,IAAD,CAAf,EAAuB;MACrB,OAAOS,eAAe,CAACT,IAAD,CAAtB;IACD;;IAED,IAAIvE,UAAU,CAACuE,IAAD,CAAd,EAAsB;MACpB,OAAOU,cAAc,CAACV,IAAD,CAArB;IACD,CAxB4B,CAwB3B;;;IAGF,IAAItE,iBAAiB,CAACsE,IAAD,CAArB,EAA6B;MAC3B,OAAOW,qBAAqB,CAACX,IAAD,CAA5B;IACD,CA7B4B,CA6B3B;;;IAGF,SAAS/F,SAAS,CAAC,CAAD,EAAI,sBAAsBF,OAAO,CAACiG,IAAD,CAAjC,CAAlB;EACD;;EAED,SAASW,qBAAT,CAA+BX,IAA/B,EAAqC;IACnC,IAAIY,qBAAJ;;IAEA,IAAIT,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAb;IACA,IAAI8C,UAAU,GAAG,CAACiB,qBAAqB,GAAGvD,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA1C,MAA6D,IAA7D,IAAqE2C,qBAAqB,KAAK,KAAK,CAApG,GAAwGA,qBAAxG,GAAgI,EAAjJ;IACA,OAAO,IAAI1E,sBAAJ,CAA2BrD,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAL,CAAd,EAA4B,EAA5B,EAAgC;MAC7EU,MAAM,EAAE,SAASA,MAAT,GAAkB;QACxB,OAAOhI,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKmB,QAAQ,CAACmG,MAAM,CAACU,MAAR,EAAgB,UAAUC,KAAV,EAAiB;UAC9E,OAAOjI,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKiI,KAAL,CAAd,EAA2B,EAA3B,EAA+B;YACjDd,IAAI,EAAED,WAAW,CAACe,KAAK,CAACd,IAAP;UADgC,CAA/B,CAApB;QAGD,CAJ8C,CAAb,CAAd,EAIfe,kBAAkB,CAACpB,UAAD,CAJH,CAApB;MAKD,CAP4E;MAQ7EG,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB3B,MAAzB,CAAgCwB,UAAhC;IAR0D,CAAhC,CAAxC,CAAP;EAUD;;EAED,SAASe,cAAT,CAAwBV,IAAxB,EAA8B;IAC5B,IAAIgB,qBAAJ;;IAEA,IAAIb,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAb;IACA,IAAI8C,UAAU,GAAG,CAACqB,qBAAqB,GAAG3D,iBAAiB,CAAC2C,IAAI,CAAC/B,IAAN,CAA1C,MAA2D,IAA3D,IAAmE+C,qBAAqB,KAAK,KAAK,CAAlG,GAAsGA,qBAAtG,GAA8H,EAA/I;IACA,OAAO,IAAI/E,eAAJ,CAAoBpD,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAL,CAAd,EAA4B,EAA5B,EAAgC;MACtEc,MAAM,EAAEpI,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAM,CAACc,MAAZ,CAAd,EAAmCC,iBAAiB,CAACvB,UAAD,CAApD,CADiD;MAEtEG,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB3B,MAAzB,CAAgCwB,UAAhC;IAFmD,CAAhC,CAAjC,CAAP;EAID;;EAED,SAASW,gBAAT,CAA0BN,IAA1B,EAAgC;IAC9B,IAAImB,sBAAJ;;IAEA,IAAIhB,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAb;IACA,IAAI8C,UAAU,GAAG,CAACwB,sBAAsB,GAAG9D,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IAAsEkD,sBAAsB,KAAK,KAAK,CAAtG,GAA0GA,sBAA1G,GAAmI,EAApJ;IACA,IAAIC,cAAc,GAAGjB,MAAM,CAACiB,cAA5B;;IAEA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG1B,UAAU,CAAC1G,MAAnC,EAA2CoI,GAAG,EAA9C,EAAkD;MAChD,IAAIC,kBAAJ;;MAEA,IAAIC,aAAa,GAAG5B,UAAU,CAAC0B,GAAD,CAA9B;MACAD,cAAc,GAAG,CAACE,kBAAkB,GAAGE,iBAAiB,CAACD,aAAD,CAAvC,MAA4D,IAA5D,IAAoED,kBAAkB,KAAK,KAAK,CAAhG,GAAoGA,kBAApG,GAAyHF,cAA1I;IACD;;IAED,OAAO,IAAIvF,iBAAJ,CAAsBhD,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAL,CAAd,EAA4B,EAA5B,EAAgC;MACxEiB,cAAc,EAAEA,cADwD;MAExEtB,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB3B,MAAzB,CAAgCwB,UAAhC;IAFqD,CAAhC,CAAnC,CAAP;EAID;;EAED,SAASY,gBAAT,CAA0BP,IAA1B,EAAgC;IAC9B,IAAIyB,sBAAJ;;IAEA,IAAItB,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAb;IACA,IAAI8C,UAAU,GAAG,CAAC8B,sBAAsB,GAAGpE,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IAAsEwD,sBAAsB,KAAK,KAAK,CAAtG,GAA0GA,sBAA1G,GAAmI,EAApJ;IACA,OAAO,IAAI3F,iBAAJ,CAAsBjD,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAL,CAAd,EAA4B,EAA5B,EAAgC;MACxEuB,UAAU,EAAE,SAASA,UAAT,GAAsB;QAChC,OAAO,GAAGvD,MAAH,CAAU6B,IAAI,CAAC2B,aAAL,GAAqBnC,GAArB,CAAyBN,gBAAzB,CAAV,EAAsD0C,eAAe,CAACjC,UAAD,CAArE,CAAP;MACD,CAHuE;MAIxEkB,MAAM,EAAE,SAASA,MAAT,GAAkB;QACxB,OAAOhI,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKmB,QAAQ,CAACmG,MAAM,CAACU,MAAR,EAAgBgB,WAAhB,CAAb,CAAd,EAA0DC,aAAa,CAACnC,UAAD,CAAvE,CAApB;MACD,CANuE;MAOxEG,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB3B,MAAzB,CAAgCwB,UAAhC;IAPqD,CAAhC,CAAnC,CAAP;EASD;;EAED,SAASa,mBAAT,CAA6BR,IAA7B,EAAmC;IACjC,IAAI+B,sBAAJ;;IAEA,IAAI5B,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAb;IACA,IAAI8C,UAAU,GAAG,CAACoC,sBAAsB,GAAG1E,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IAAsE8D,sBAAsB,KAAK,KAAK,CAAtG,GAA0GA,sBAA1G,GAAmI,EAApJ;IACA,OAAO,IAAIhG,oBAAJ,CAAyBlD,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAL,CAAd,EAA4B,EAA5B,EAAgC;MAC3EuB,UAAU,EAAE,SAASA,UAAT,GAAsB;QAChC,OAAO,GAAGvD,MAAH,CAAU6B,IAAI,CAAC2B,aAAL,GAAqBnC,GAArB,CAAyBN,gBAAzB,CAAV,EAAsD0C,eAAe,CAACjC,UAAD,CAArE,CAAP;MACD,CAH0E;MAI3EkB,MAAM,EAAE,SAASA,MAAT,GAAkB;QACxB,OAAOhI,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKmB,QAAQ,CAACmG,MAAM,CAACU,MAAR,EAAgBgB,WAAhB,CAAb,CAAd,EAA0DC,aAAa,CAACnC,UAAD,CAAvE,CAApB;MACD,CAN0E;MAO3EG,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB3B,MAAzB,CAAgCwB,UAAhC;IAPwD,CAAhC,CAAtC,CAAP;EASD;;EAED,SAASc,eAAT,CAAyBT,IAAzB,EAA+B;IAC7B,IAAIgC,sBAAJ;;IAEA,IAAI7B,MAAM,GAAGH,IAAI,CAACnD,QAAL,EAAb;IACA,IAAI8C,UAAU,GAAG,CAACqC,sBAAsB,GAAG3E,iBAAiB,CAAC8C,MAAM,CAAClC,IAAR,CAA3C,MAA8D,IAA9D,IAAsE+D,sBAAsB,KAAK,KAAK,CAAtG,GAA0GA,sBAA1G,GAAmI,EAApJ;IACA,OAAO,IAAIhG,gBAAJ,CAAqBnD,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsH,MAAL,CAAd,EAA4B,EAA5B,EAAgC;MACvE3B,KAAK,EAAE,SAASA,KAAT,GAAiB;QACtB,OAAO,GAAGL,MAAH,CAAU6B,IAAI,CAACiC,QAAL,GAAgBzC,GAAhB,CAAoBN,gBAApB,CAAV,EAAiDgD,eAAe,CAACvC,UAAD,CAAhE,CAAP;MACD,CAHsE;MAIvEG,iBAAiB,EAAEK,MAAM,CAACL,iBAAP,CAAyB3B,MAAzB,CAAgCwB,UAAhC;IAJoD,CAAhC,CAAlC,CAAP;EAMD;;EAED,SAASkC,WAAT,CAAqBf,KAArB,EAA4B;IAC1B,OAAOjI,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKiI,KAAL,CAAd,EAA2B,EAA3B,EAA+B;MACjDd,IAAI,EAAED,WAAW,CAACe,KAAK,CAACd,IAAP,CADgC;MAEjD;MACAI,IAAI,EAAEpG,QAAQ,CAAC8G,KAAK,CAACV,IAAP,EAAaC,SAAb;IAHmC,CAA/B,CAApB;EAKD;;EAED,SAASA,SAAT,CAAmB8B,GAAnB,EAAwB;IACtB,OAAOtJ,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKsJ,GAAL,CAAd,EAAyB,EAAzB,EAA6B;MAC/CnC,IAAI,EAAED,WAAW,CAACoC,GAAG,CAACnC,IAAL;IAD8B,CAA7B,CAApB;EAGD;;EAED,SAASX,iBAAT,CAA2B+C,KAA3B,EAAkC;IAChC,IAAIC,OAAO,GAAG,EAAd;;IAEA,KAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGF,KAAK,CAACnJ,MAAhC,EAAwCqJ,IAAI,EAA5C,EAAgD;MAC9C,IAAIC,oBAAJ;;MAEA,IAAIC,IAAI,GAAGJ,KAAK,CAACE,IAAD,CAAhB,CAH8C,CAI9C;;MACA,IAAIG,mBAAmB,GAAG,CAACF,oBAAoB,GAAGC,IAAI,CAACxD,cAA7B,MAAiD,IAAjD,IAAyDuD,oBAAoB,KAAK,KAAK,CAAvF,GAA2FA,oBAA3F,GAAkH,EAA5I;;MAEA,KAAK,IAAIG,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGD,mBAAmB,CAACxJ,MAA9C,EAAsDyJ,IAAI,EAA1D,EAA8D;QAC5D,IAAIC,aAAa,GAAGF,mBAAmB,CAACC,IAAD,CAAvC;QACAL,OAAO,CAACM,aAAa,CAACC,SAAf,CAAP,GAAmCC,YAAY,CAACF,aAAa,CAAC3C,IAAf,CAA/C;MACD;IACF,CAd+B,CAc9B;IACF;IACA;;;IAGA,OAAOqC,OAAP;EACD;;EAED,SAASQ,YAAT,CAAsBL,IAAtB,EAA4B;IAC1B,IAAIM,iBAAJ;;IAEA,IAAI7E,IAAI,GAAGuE,IAAI,CAACvE,IAAL,CAAUvE,KAArB;IACA,IAAIsG,IAAI,GAAG,CAAC8C,iBAAiB,GAAGhE,UAAU,CAACb,IAAD,CAA/B,MAA2C,IAA3C,IAAmD6E,iBAAiB,KAAK,KAAK,CAA9E,GAAkFA,iBAAlF,GAAsGzE,OAAO,CAACJ,IAAD,CAAxH;;IAEA,IAAI+B,IAAI,KAAKJ,SAAb,EAAwB;MACtB,MAAM,IAAImD,KAAJ,CAAU,mBAAmB5E,MAAnB,CAA0BF,IAA1B,EAAgC,KAAhC,CAAV,CAAN;IACD;;IAED,OAAO+B,IAAP;EACD;;EAED,SAASgD,cAAT,CAAwBR,IAAxB,EAA8B;IAC5B,IAAIA,IAAI,CAAChG,IAAL,KAAcrC,IAAI,CAAC8I,SAAvB,EAAkC;MAChC,OAAO,IAAItH,WAAJ,CAAgBqH,cAAc,CAACR,IAAI,CAACxC,IAAN,CAA9B,CAAP;IACD;;IAED,IAAIwC,IAAI,CAAChG,IAAL,KAAcrC,IAAI,CAAC+I,aAAvB,EAAsC;MACpC,OAAO,IAAItH,cAAJ,CAAmBoH,cAAc,CAACR,IAAI,CAACxC,IAAN,CAAjC,CAAP;IACD;;IAED,OAAO6C,YAAY,CAACL,IAAD,CAAnB;EACD;;EAED,SAAS9C,cAAT,CAAwB8C,IAAxB,EAA8B;IAC5B,IAAIW,SAAS,GAAGX,IAAI,CAACW,SAAL,CAAe3D,GAAf,CAAmB,UAAU4D,IAAV,EAAgB;MACjD,IAAI1J,KAAK,GAAG0J,IAAI,CAAC1J,KAAjB;MACA,OAAOA,KAAP;IACD,CAHe,CAAhB;IAIA,OAAO,IAAIsB,gBAAJ,CAAqB;MAC1BiD,IAAI,EAAEuE,IAAI,CAACvE,IAAL,CAAUvE,KADU;MAE1B4F,WAAW,EAAE+D,cAAc,CAACb,IAAD,EAAOjG,OAAP,CAFD;MAG1B4G,SAAS,EAAEA,SAHe;MAI1BG,YAAY,EAAEd,IAAI,CAACe,UAJO;MAK1BnD,IAAI,EAAEoD,gBAAgB,CAAChB,IAAI,CAACxJ,SAAN,CALI;MAM1B6G,OAAO,EAAE2C;IANiB,CAArB,CAAP;EAQD;;EAED,SAASV,aAAT,CAAuBM,KAAvB,EAA8B;IAC5B,IAAIqB,cAAc,GAAGrL,MAAM,CAACkF,MAAP,CAAc,IAAd,CAArB;;IAEA,KAAK,IAAIoG,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGtB,KAAK,CAACnJ,MAAhC,EAAwCyK,IAAI,EAA5C,EAAgD;MAC9C,IAAIC,YAAJ;;MAEA,IAAInB,IAAI,GAAGJ,KAAK,CAACsB,IAAD,CAAhB,CAH8C,CAI9C;;MACA,IAAIE,UAAU,GAAG,CAACD,YAAY,GAAGnB,IAAI,CAAC3B,MAArB,MAAiC,IAAjC,IAAyC8C,YAAY,KAAK,KAAK,CAA/D,GAAmEA,YAAnE,GAAkF,EAAnG;;MAEA,KAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGD,UAAU,CAAC3K,MAArC,EAA6C4K,IAAI,EAAjD,EAAqD;QACnD,IAAI/C,KAAK,GAAG8C,UAAU,CAACC,IAAD,CAAtB;QACAJ,cAAc,CAAC3C,KAAK,CAAC7C,IAAN,CAAWvE,KAAZ,CAAd,GAAmC;UACjC;UACA;UACA;UACAsG,IAAI,EAAEgD,cAAc,CAAClC,KAAK,CAACd,IAAP,CAJa;UAKjCV,WAAW,EAAE+D,cAAc,CAACvC,KAAD,EAAQvE,OAAR,CALM;UAMjC6D,IAAI,EAAEoD,gBAAgB,CAAC1C,KAAK,CAAC9H,SAAP,CANW;UAOjC8K,iBAAiB,EAAEC,oBAAoB,CAACjD,KAAD,CAPN;UAQjCjB,OAAO,EAAEiB;QARwB,CAAnC;MAUD;IACF;;IAED,OAAO2C,cAAP;EACD;;EAED,SAASD,gBAAT,CAA0BpD,IAA1B,EAAgC;IAC9B;IACA,IAAI4D,SAAS,GAAG5D,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0C,EAA1D;IACA,IAAI6D,YAAY,GAAG7L,MAAM,CAACkF,MAAP,CAAc,IAAd,CAAnB;;IAEA,KAAK,IAAI4G,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGF,SAAS,CAAC/K,MAApC,EAA4CiL,IAAI,EAAhD,EAAoD;MAClD,IAAI/B,GAAG,GAAG6B,SAAS,CAACE,IAAD,CAAnB,CADkD,CAElD;MACA;MACA;;MACA,IAAIlE,IAAI,GAAGgD,cAAc,CAACb,GAAG,CAACnC,IAAL,CAAzB;MACAiE,YAAY,CAAC9B,GAAG,CAAClE,IAAJ,CAASvE,KAAV,CAAZ,GAA+B;QAC7BsG,IAAI,EAAEA,IADuB;QAE7BV,WAAW,EAAE+D,cAAc,CAAClB,GAAD,EAAM5F,OAAN,CAFE;QAG7B4H,YAAY,EAAEhI,YAAY,CAACgG,GAAG,CAACgC,YAAL,EAAmBnE,IAAnB,CAHG;QAI7B8D,iBAAiB,EAAEC,oBAAoB,CAAC5B,GAAD,CAJV;QAK7BtC,OAAO,EAAEsC;MALoB,CAA/B;IAOD;;IAED,OAAO8B,YAAP;EACD;;EAED,SAASlD,kBAAT,CAA4BqB,KAA5B,EAAmC;IACjC,IAAIgC,aAAa,GAAGhM,MAAM,CAACkF,MAAP,CAAc,IAAd,CAApB;;IAEA,KAAK,IAAI+G,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGjC,KAAK,CAACnJ,MAAhC,EAAwCoL,IAAI,EAA5C,EAAgD;MAC9C,IAAIC,aAAJ;;MAEA,IAAI9B,IAAI,GAAGJ,KAAK,CAACiC,IAAD,CAAhB,CAH8C,CAI9C;;MACA,IAAIE,WAAW,GAAG,CAACD,aAAa,GAAG9B,IAAI,CAAC3B,MAAtB,MAAkC,IAAlC,IAA0CyD,aAAa,KAAK,KAAK,CAAjE,GAAqEA,aAArE,GAAqF,EAAvG;;MAEA,KAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGD,WAAW,CAACtL,MAAtC,EAA8CuL,IAAI,EAAlD,EAAsD;QACpD,IAAI1D,KAAK,GAAGyD,WAAW,CAACC,IAAD,CAAvB,CADoD,CAEpD;QACA;QACA;;QACA,IAAIxE,IAAI,GAAGgD,cAAc,CAAClC,KAAK,CAACd,IAAP,CAAzB;QACAoE,aAAa,CAACtD,KAAK,CAAC7C,IAAN,CAAWvE,KAAZ,CAAb,GAAkC;UAChCsG,IAAI,EAAEA,IAD0B;UAEhCV,WAAW,EAAE+D,cAAc,CAACvC,KAAD,EAAQvE,OAAR,CAFK;UAGhC4H,YAAY,EAAEhI,YAAY,CAAC2E,KAAK,CAACqD,YAAP,EAAqBnE,IAArB,CAHM;UAIhC8D,iBAAiB,EAAEC,oBAAoB,CAACjD,KAAD,CAJP;UAKhCjB,OAAO,EAAEiB;QALuB,CAAlC;MAOD;IACF;;IAED,OAAOsD,aAAP;EACD;;EAED,SAASlD,iBAAT,CAA2BkB,KAA3B,EAAkC;IAChC,IAAIqC,YAAY,GAAGrM,MAAM,CAACkF,MAAP,CAAc,IAAd,CAAnB;;IAEA,KAAK,IAAIoH,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGtC,KAAK,CAACnJ,MAAhC,EAAwCyL,IAAI,EAA5C,EAAgD;MAC9C,IAAIC,YAAJ;;MAEA,IAAInC,IAAI,GAAGJ,KAAK,CAACsC,IAAD,CAAhB,CAH8C,CAI9C;;MACA,IAAIE,WAAW,GAAG,CAACD,YAAY,GAAGnC,IAAI,CAACvB,MAArB,MAAiC,IAAjC,IAAyC0D,YAAY,KAAK,KAAK,CAA/D,GAAmEA,YAAnE,GAAkF,EAApG;;MAEA,KAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGD,WAAW,CAAC3L,MAAtC,EAA8C4L,IAAI,EAAlD,EAAsD;QACpD,IAAInL,KAAK,GAAGkL,WAAW,CAACC,IAAD,CAAvB;QACAJ,YAAY,CAAC/K,KAAK,CAACuE,IAAN,CAAWvE,KAAZ,CAAZ,GAAiC;UAC/B4F,WAAW,EAAE+D,cAAc,CAAC3J,KAAD,EAAQ6C,OAAR,CADI;UAE/BuH,iBAAiB,EAAEC,oBAAoB,CAACrK,KAAD,CAFR;UAG/BmG,OAAO,EAAEnG;QAHsB,CAAjC;MAKD;IACF;;IAED,OAAO+K,YAAP;EACD;;EAED,SAAS7C,eAAT,CAAyBQ,KAAzB,EAAgC;IAC9B,IAAIV,UAAU,GAAG,EAAjB;;IAEA,KAAK,IAAIoD,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAG1C,KAAK,CAACnJ,MAAhC,EAAwC6L,IAAI,EAA5C,EAAgD;MAC9C,IAAIC,gBAAJ;;MAEA,IAAIvC,IAAI,GAAGJ,KAAK,CAAC0C,IAAD,CAAhB,CAH8C,CAI9C;;MACA,IAAIE,eAAe,GAAG,CAACD,gBAAgB,GAAGvC,IAAI,CAACd,UAAzB,MAAyC,IAAzC,IAAiDqD,gBAAgB,KAAK,KAAK,CAA3E,GAA+EA,gBAA/E,GAAkG,EAAxH;;MAEA,KAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGD,eAAe,CAAC/L,MAA1C,EAAkDgM,IAAI,EAAtD,EAA0D;QACxD,IAAIjF,IAAI,GAAGgF,eAAe,CAACC,IAAD,CAA1B,CADwD,CAExD;QACA;QACA;QACA;;QACAvD,UAAU,CAAC/I,IAAX,CAAgBkK,YAAY,CAAC7C,IAAD,CAA5B;MACD;IACF;;IAED,OAAO0B,UAAP;EACD;;EAED,SAASQ,eAAT,CAAyBE,KAAzB,EAAgC;IAC9B,IAAI5D,KAAK,GAAG,EAAZ;;IAEA,KAAK,IAAI0G,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAG9C,KAAK,CAACnJ,MAAhC,EAAwCiM,IAAI,EAA5C,EAAgD;MAC9C,IAAIC,WAAJ;;MAEA,IAAI3C,IAAI,GAAGJ,KAAK,CAAC8C,IAAD,CAAhB,CAH8C,CAI9C;;MACA,IAAIE,SAAS,GAAG,CAACD,WAAW,GAAG3C,IAAI,CAAChE,KAApB,MAA+B,IAA/B,IAAuC2G,WAAW,KAAK,KAAK,CAA5D,GAAgEA,WAAhE,GAA8E,EAA9F;;MAEA,KAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGD,SAAS,CAACnM,MAApC,EAA4CoM,IAAI,EAAhD,EAAoD;QAClD,IAAIrF,IAAI,GAAGoF,SAAS,CAACC,IAAD,CAApB,CADkD,CAElD;QACA;QACA;QACA;;QACA7G,KAAK,CAAC7F,IAAN,CAAWkK,YAAY,CAAC7C,IAAD,CAAvB;MACD;IACF;;IAED,OAAOxB,KAAP;EACD;;EAED,SAASO,SAAT,CAAmBc,OAAnB,EAA4B;IAC1B,IAAIyF,qBAAJ;;IAEA,IAAIrH,IAAI,GAAG4B,OAAO,CAAC5B,IAAR,CAAavE,KAAxB;IACA,IAAI4F,WAAW,GAAG+D,cAAc,CAACxD,OAAD,EAAUtD,OAAV,CAAhC;IACA,IAAIgJ,cAAc,GAAG,CAACD,qBAAqB,GAAGjI,iBAAiB,CAACY,IAAD,CAA1C,MAAsD,IAAtD,IAA8DqH,qBAAqB,KAAK,KAAK,CAA7F,GAAiGA,qBAAjG,GAAyH,EAA9I;;IAEA,QAAQzF,OAAO,CAACrD,IAAhB;MACE,KAAKrC,IAAI,CAACqL,sBAAV;QACE;UACE,IAAI1F,iBAAiB,GAAGyF,cAAxB;UACA,IAAIE,QAAQ,GAAG,CAAC5F,OAAD,EAAU1B,MAAV,CAAiB2B,iBAAjB,CAAf;UACA,OAAO,IAAIhE,iBAAJ,CAAsB;YAC3BmC,IAAI,EAAEA,IADqB;YAE3BqB,WAAW,EAAEA,WAFc;YAG3BoC,UAAU,EAAE,SAASA,UAAT,GAAsB;cAChC,OAAOE,eAAe,CAAC6D,QAAD,CAAtB;YACD,CAL0B;YAM3B5E,MAAM,EAAE,SAASA,MAAT,GAAkB;cACxB,OAAOiB,aAAa,CAAC2D,QAAD,CAApB;YACD,CAR0B;YAS3B5F,OAAO,EAAEA,OATkB;YAU3BC,iBAAiB,EAAEA;UAVQ,CAAtB,CAAP;QAYD;;MAEH,KAAK3F,IAAI,CAACuL,yBAAV;QACE;UACE,IAAIC,kBAAkB,GAAGJ,cAAzB;;UAEA,IAAIK,SAAS,GAAG,CAAC/F,OAAD,EAAU1B,MAAV,CAAiBwH,kBAAjB,CAAhB;;UAEA,OAAO,IAAI5J,oBAAJ,CAAyB;YAC9BkC,IAAI,EAAEA,IADwB;YAE9BqB,WAAW,EAAEA,WAFiB;YAG9BoC,UAAU,EAAE,SAASA,UAAT,GAAsB;cAChC,OAAOE,eAAe,CAACgE,SAAD,CAAtB;YACD,CAL6B;YAM9B/E,MAAM,EAAE,SAASA,MAAT,GAAkB;cACxB,OAAOiB,aAAa,CAAC8D,SAAD,CAApB;YACD,CAR6B;YAS9B/F,OAAO,EAAEA,OATqB;YAU9BC,iBAAiB,EAAE6F;UAVW,CAAzB,CAAP;QAYD;;MAEH,KAAKxL,IAAI,CAAC0L,oBAAV;QACE;UACE,IAAIC,mBAAmB,GAAGP,cAA1B;;UAEA,IAAIQ,UAAU,GAAG,CAAClG,OAAD,EAAU1B,MAAV,CAAiB2H,mBAAjB,CAAjB;;UAEA,OAAO,IAAI7J,eAAJ,CAAoB;YACzBgC,IAAI,EAAEA,IADmB;YAEzBqB,WAAW,EAAEA,WAFY;YAGzB2B,MAAM,EAAEC,iBAAiB,CAAC6E,UAAD,CAHA;YAIzBlG,OAAO,EAAEA,OAJgB;YAKzBC,iBAAiB,EAAEgG;UALM,CAApB,CAAP;QAOD;;MAEH,KAAK3L,IAAI,CAAC6L,qBAAV;QACE;UACE,IAAIC,mBAAmB,GAAGV,cAA1B;;UAEA,IAAIW,UAAU,GAAG,CAACrG,OAAD,EAAU1B,MAAV,CAAiB8H,mBAAjB,CAAjB;;UAEA,OAAO,IAAIjK,gBAAJ,CAAqB;YAC1BiC,IAAI,EAAEA,IADoB;YAE1BqB,WAAW,EAAEA,WAFa;YAG1Bd,KAAK,EAAE,SAASA,KAAT,GAAiB;cACtB,OAAO0D,eAAe,CAACgE,UAAD,CAAtB;YACD,CALyB;YAM1BrG,OAAO,EAAEA,OANiB;YAO1BC,iBAAiB,EAAEmG;UAPO,CAArB,CAAP;QASD;;MAEH,KAAK9L,IAAI,CAACgM,sBAAV;QACE;UACE,IAAIC,mBAAmB,GAAGb,cAA1B;UACA,OAAO,IAAI1J,iBAAJ,CAAsB;YAC3BoC,IAAI,EAAEA,IADqB;YAE3BqB,WAAW,EAAEA,WAFc;YAG3B8B,cAAc,EAAEI,iBAAiB,CAAC3B,OAAD,CAHN;YAI3BA,OAAO,EAAEA,OAJkB;YAK3BC,iBAAiB,EAAEsG;UALQ,CAAtB,CAAP;QAOD;;MAEH,KAAKjM,IAAI,CAACkM,4BAAV;QACE;UACE,IAAIC,mBAAmB,GAAGf,cAA1B;;UAEA,IAAIgB,UAAU,GAAG,CAAC1G,OAAD,EAAU1B,MAAV,CAAiBmI,mBAAjB,CAAjB;;UAEA,OAAO,IAAIpK,sBAAJ,CAA2B;YAChC+B,IAAI,EAAEA,IAD0B;YAEhCqB,WAAW,EAAEA,WAFmB;YAGhCuB,MAAM,EAAE,SAASA,MAAT,GAAkB;cACxB,OAAOE,kBAAkB,CAACwF,UAAD,CAAzB;YACD,CAL+B;YAMhC1G,OAAO,EAAEA,OANuB;YAOhCC,iBAAiB,EAAEwG;UAPa,CAA3B,CAAP;QASD;IAlGL,CAP0B,CA0GxB;;;IAGF,SAASrM,SAAS,CAAC,CAAD,EAAI,sCAAsCF,OAAO,CAAC8F,OAAD,CAAjD,CAAlB;EACD;AACF;AACD,IAAIf,UAAU,GAAGhF,MAAM,CAACc,oBAAoB,CAACuD,MAArB,CAA4BrD,kBAA5B,CAAD,EAAkD,UAAUkF,IAAV,EAAgB;EACvF,OAAOA,IAAI,CAAC/B,IAAZ;AACD,CAFsB,CAAvB;AAGA;AACA;AACA;AACA;;AAEA,SAAS8F,oBAAT,CAA8BvB,IAA9B,EAAoC;EAClC,IAAIgE,UAAU,GAAG/L,kBAAkB,CAACQ,0BAAD,EAA6BuH,IAA7B,CAAnC;EACA,OAAOgE,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACC,MAA1E;AACD;AACD;AACA;AACA;;;AAGA,SAASjF,iBAAT,CAA2BgB,IAA3B,EAAiC;EAC/B,IAAIkE,WAAW,GAAGjM,kBAAkB,CAACS,2BAAD,EAA8BsH,IAA9B,CAApC;EACA,OAAOkE,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACC,GAA7E;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAAStD,cAAT,CAAwBb,IAAxB,EAA8BjG,OAA9B,EAAuC;EAC5C,IAAIiG,IAAI,CAAClD,WAAT,EAAsB;IACpB,OAAOkD,IAAI,CAAClD,WAAL,CAAiB5F,KAAxB;EACD;;EAED,IAAI,CAAC6C,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACqK,mBAA3D,MAAoF,IAAxF,EAA8F;IAC5F,IAAIC,QAAQ,GAAGC,sBAAsB,CAACtE,IAAD,CAArC;;IAEA,IAAIqE,QAAQ,KAAKjH,SAAjB,EAA4B;MAC1B,OAAOvF,sBAAsB,CAAC,OAAOwM,QAAR,CAA7B;IACD;EACF;AACF;;AAED,SAASC,sBAAT,CAAgCtE,IAAhC,EAAsC;EACpC,IAAIuE,GAAG,GAAGvE,IAAI,CAACuE,GAAf;;EAEA,IAAI,CAACA,GAAL,EAAU;IACR;EACD;;EAED,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,KAAK,GAAGF,GAAG,CAACG,UAAJ,CAAeC,IAA3B;;EAEA,OAAOF,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACzK,IAAN,KAAepC,SAAS,CAACgN,OAA1C,IAAqDH,KAAK,CAACI,IAA3D,IAAmEJ,KAAK,CAACE,IAAzE,IAAiFF,KAAK,CAACK,IAAN,GAAa,CAAb,KAAmBL,KAAK,CAACI,IAAN,CAAWC,IAA/G,IAAuHL,KAAK,CAACK,IAAN,KAAeL,KAAK,CAACE,IAAN,CAAWG,IAAxJ,EAA8J;IAC5J,IAAI5N,KAAK,GAAG6N,MAAM,CAACN,KAAK,CAACvN,KAAP,CAAlB;IACAsN,QAAQ,CAACrO,IAAT,CAAce,KAAd;IACAuN,KAAK,GAAGA,KAAK,CAACE,IAAd;EACD;;EAED,OAAOH,QAAQ,CAAC/N,MAAT,GAAkB,CAAlB,GAAsB+N,QAAQ,CAACQ,OAAT,GAAmBC,IAAnB,CAAwB,IAAxB,CAAtB,GAAsD7H,SAA7D;AACD"},"metadata":{},"sourceType":"module"}