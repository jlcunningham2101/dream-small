{"ast":null,"code":"import find from \"../../polyfills/find.mjs\";\nimport objectEntries from \"../../polyfills/objectEntries.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subReason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \") + reasonMessage(subReason);\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {\n        var _ref3 = conflicts[_i2];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        var reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(\"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMsg, \". Use different aliases on the fields to fetch both if this was intentional.\"), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\n\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (var _i5 = 0, _objectEntries2 = objectEntries(fieldMap); _i5 < _objectEntries2.length; _i5++) {\n    var _ref5 = _objectEntries2[_i5];\n    var responseName = _ref5[0];\n    var fields = _ref5[1]; // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {\n    var responseName = _Object$keys2[_i7];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n\n  if (!areMutuallyExclusive) {\n    var _node1$arguments, _node2$arguments; // Two aliases must refer to the same field.\n\n\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\\\"\".concat(name1, \"\\\" and \\\"\").concat(name2, \"\\\" are different fields\")], [node1], [node2]];\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n\n  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \\\"\".concat(inspect(type1), \"\\\" and \\\"\").concat(inspect(type2), \"\\\"\")], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {\n    var selection = _selectionSet$selecti2[_i9];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet = /*#__PURE__*/function () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    this._pairSetAdd(a, b, areMutuallyExclusive);\n\n    this._pairSetAdd(b, a, areMutuallyExclusive);\n  };\n\n  _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {\n    var map = this._data[a];\n\n    if (!map) {\n      map = Object.create(null);\n      this._data[a] = map;\n    }\n\n    map[b] = areMutuallyExclusive;\n  };\n\n  return PairSet;\n}();","map":{"version":3,"names":["find","objectEntries","inspect","GraphQLError","Kind","print","getNamedType","isNonNullType","isLeafType","isObjectType","isListType","isInterfaceType","typeFromAST","reasonMessage","reason","Array","isArray","map","_ref","responseName","subReason","concat","join","OverlappingFieldsCanBeMergedRule","context","comparedFragmentPairs","PairSet","cachedFieldsAndFragmentNames","Map","SelectionSet","selectionSet","conflicts","findConflictsWithinSelectionSet","getParentType","_i2","length","_ref3","_ref2$","fields1","fields2","reasonMsg","reportError","parentType","_getFieldsAndFragment","getFieldsAndFragmentNames","fieldMap","fragmentNames","collectConflictsWithin","i","collectConflictsBetweenFieldsAndFragment","j","collectConflictsBetweenFragments","areMutuallyExclusive","fragmentName","fragment","getFragment","_getReferencedFieldsA","getReferencedFieldsAndFragmentNames","fieldMap2","fragmentNames2","collectConflictsBetween","fragmentName1","fragmentName2","has","add","fragment1","fragment2","_getReferencedFieldsA2","fieldMap1","fragmentNames1","_getReferencedFieldsA3","findConflictsBetweenSubSelectionSets","parentType1","selectionSet1","parentType2","selectionSet2","_getFieldsAndFragment2","_getFieldsAndFragment3","_i3","_j","_i5","_objectEntries2","_ref5","fields","conflict","findConflict","push","parentFieldsAreMutuallyExclusive","_i7","_Object$keys2","Object","keys","field1","field2","node1","def1","node2","def2","_node1$arguments","_node2$arguments","name1","name","value","name2","args1","arguments","args2","sameArguments","type1","type","type2","doTypesConflict","subfieldConflicts","arguments1","arguments2","every","argument1","argument2","argument","sameValue","value1","value2","ofType","cached","get","nodeAndDefs","create","_collectFieldsAndFragmentNames","set","fragmentType","getSchema","typeCondition","_i9","_selectionSet$selecti2","selections","selection","kind","FIELD","fieldName","fieldDef","getFields","alias","FRAGMENT_SPREAD","INLINE_FRAGMENT","inlineFragmentType","_ref6","reduce","allFields","_ref7","_ref8","_data","_proto","prototype","a","b","first","result","undefined","_pairSetAdd"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"],"sourcesContent":["import find from \"../../polyfills/find.mjs\";\nimport objectEntries from \"../../polyfills/objectEntries.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subReason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \") + reasonMessage(subReason);\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {\n        var _ref3 = conflicts[_i2];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        var reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(\"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMsg, \". Use different aliases on the fields to fetch both if this was intentional.\"), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (var _i5 = 0, _objectEntries2 = objectEntries(fieldMap); _i5 < _objectEntries2.length; _i5++) {\n    var _ref5 = _objectEntries2[_i5];\n    var responseName = _ref5[0];\n    var fields = _ref5[1];\n\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {\n    var responseName = _Object$keys2[_i7];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n\n  if (!areMutuallyExclusive) {\n    var _node1$arguments, _node2$arguments;\n\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\\\"\".concat(name1, \"\\\" and \\\"\").concat(name2, \"\\\" are different fields\")], [node1], [node2]];\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n\n  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \\\"\".concat(inspect(type1), \"\\\" and \\\"\").concat(inspect(type2), \"\\\"\")], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {\n    var selection = _selectionSet$selecti2[_i9];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet = /*#__PURE__*/function () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    this._pairSetAdd(a, b, areMutuallyExclusive);\n\n    this._pairSetAdd(b, a, areMutuallyExclusive);\n  };\n\n  _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {\n    var map = this._data[a];\n\n    if (!map) {\n      map = Object.create(null);\n      this._data[a] = map;\n    }\n\n    map[b] = areMutuallyExclusive;\n  };\n\n  return PairSet;\n}();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}