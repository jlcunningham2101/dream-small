{"ast":null,"code":"import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\r\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\r\n *\r\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\r\n * or an ExecutionResult (error). The promise will be rejected if the schema or\r\n * other arguments to this function are invalid, or if the resolved event stream\r\n * is not an async iterable.\r\n *\r\n * If the client-provided arguments to this function do not result in a\r\n * compliant subscription, a GraphQL Response (ExecutionResult) with\r\n * descriptive errors and no data will be returned.\r\n *\r\n * If the source stream could not be created due to faulty subscription\r\n * resolver logic or underlying systems, the promise will resolve to a single\r\n * ExecutionResult containing `errors` and no `data`.\r\n *\r\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\r\n * yields a stream of ExecutionResults representing the response stream.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments.\r\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver\n  } = args;\n  const resultOrStream = await createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n\n  const mapSourceToResponse = payload => execute({\n    schema,\n    document,\n    rootValue: payload,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver\n  }); // Map every source value to a ExecutionResult value as described above.\n\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n/**\r\n * Implements the \"CreateSourceEventStream\" algorithm described in the\r\n * GraphQL specification, resolving the subscription source event stream.\r\n *\r\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\r\n * or an ExecutionResult (error). The promise will be rejected if the schema or\r\n * other arguments to this function are invalid, or if the resolved event stream\r\n * is not an async iterable.\r\n *\r\n * If the client-provided arguments to this function do not result in a\r\n * compliant subscription, a GraphQL Response (ExecutionResult) with\r\n * descriptive errors and no data will be returned.\r\n *\r\n * If the the source stream could not be created due to faulty subscription\r\n * resolver logic or underlying systems, the promise will resolve to a single\r\n * ExecutionResult containing `errors` and no `data`.\r\n *\r\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\r\n * event stream returned by the resolver.\r\n *\r\n * A Source Event Stream represents a sequence of events, each of which triggers\r\n * a GraphQL execution for that event.\r\n *\r\n * This may be useful when hosting the stateful subscription service in a\r\n * different process or machine than the stateless GraphQL execution engine,\r\n * or otherwise separating these two steps. For more on this, see the\r\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\r\n */\n\nexport async function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error('Subscription field must return Async Iterable. ' + `Received: ${inspect(eventStream)}.`);\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error]\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const {\n    schema,\n    fragments,\n    operation,\n    variableValues,\n    rootValue\n  } = exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError('Schema is not configured to execute subscription operation.', {\n      nodes: operation\n    });\n  }\n\n  const rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n      nodes: fieldNodes\n    });\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n\n  try {\n    var _fieldDef$subscribe; // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n\n\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}","map":{"version":3,"names":["devAssert","inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","collectFields","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","execute","getFieldDef","mapAsyncIterator","getArgumentValues","subscribe","args","arguments","length","schema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","resultOrStream","createSourceEventStream","mapSourceToResponse","payload","exeContext","errors","eventStream","executeSubscription","Error","error","fragments","operation","rootType","getSubscriptionType","nodes","rootFields","selectionSet","responseName","fieldNodes","entries","fieldDef","fieldName","name","value","path","undefined","info","_fieldDef$subscribe","resolveFn"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/execution/subscribe.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { inspect } from '../jsutils/inspect.mjs';\r\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\r\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\r\nimport { GraphQLError } from '../error/GraphQLError.mjs';\r\nimport { locatedError } from '../error/locatedError.mjs';\r\nimport { collectFields } from './collectFields.mjs';\r\nimport {\r\n  assertValidExecutionArguments,\r\n  buildExecutionContext,\r\n  buildResolveInfo,\r\n  execute,\r\n  getFieldDef,\r\n} from './execute.mjs';\r\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\r\nimport { getArgumentValues } from './values.mjs';\r\n/**\r\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\r\n *\r\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\r\n * or an ExecutionResult (error). The promise will be rejected if the schema or\r\n * other arguments to this function are invalid, or if the resolved event stream\r\n * is not an async iterable.\r\n *\r\n * If the client-provided arguments to this function do not result in a\r\n * compliant subscription, a GraphQL Response (ExecutionResult) with\r\n * descriptive errors and no data will be returned.\r\n *\r\n * If the source stream could not be created due to faulty subscription\r\n * resolver logic or underlying systems, the promise will resolve to a single\r\n * ExecutionResult containing `errors` and no `data`.\r\n *\r\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\r\n * yields a stream of ExecutionResults representing the response stream.\r\n *\r\n * Accepts either an object with named arguments, or individual arguments.\r\n */\r\n\r\nexport async function subscribe(args) {\r\n  // Temporary for v15 to v16 migration. Remove in v17\r\n  arguments.length < 2 ||\r\n    devAssert(\r\n      false,\r\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\r\n    );\r\n  const {\r\n    schema,\r\n    document,\r\n    rootValue,\r\n    contextValue,\r\n    variableValues,\r\n    operationName,\r\n    fieldResolver,\r\n    subscribeFieldResolver,\r\n  } = args;\r\n  const resultOrStream = await createSourceEventStream(\r\n    schema,\r\n    document,\r\n    rootValue,\r\n    contextValue,\r\n    variableValues,\r\n    operationName,\r\n    subscribeFieldResolver,\r\n  );\r\n\r\n  if (!isAsyncIterable(resultOrStream)) {\r\n    return resultOrStream;\r\n  } // For each payload yielded from a subscription, map it over the normal\r\n  // GraphQL `execute` function, with `payload` as the rootValue.\r\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\r\n  // the GraphQL specification. The `execute` function provides the\r\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\r\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\r\n\r\n  const mapSourceToResponse = (payload) =>\r\n    execute({\r\n      schema,\r\n      document,\r\n      rootValue: payload,\r\n      contextValue,\r\n      variableValues,\r\n      operationName,\r\n      fieldResolver,\r\n    }); // Map every source value to a ExecutionResult value as described above.\r\n\r\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\r\n}\r\n/**\r\n * Implements the \"CreateSourceEventStream\" algorithm described in the\r\n * GraphQL specification, resolving the subscription source event stream.\r\n *\r\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\r\n * or an ExecutionResult (error). The promise will be rejected if the schema or\r\n * other arguments to this function are invalid, or if the resolved event stream\r\n * is not an async iterable.\r\n *\r\n * If the client-provided arguments to this function do not result in a\r\n * compliant subscription, a GraphQL Response (ExecutionResult) with\r\n * descriptive errors and no data will be returned.\r\n *\r\n * If the the source stream could not be created due to faulty subscription\r\n * resolver logic or underlying systems, the promise will resolve to a single\r\n * ExecutionResult containing `errors` and no `data`.\r\n *\r\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\r\n * event stream returned by the resolver.\r\n *\r\n * A Source Event Stream represents a sequence of events, each of which triggers\r\n * a GraphQL execution for that event.\r\n *\r\n * This may be useful when hosting the stateful subscription service in a\r\n * different process or machine than the stateless GraphQL execution engine,\r\n * or otherwise separating these two steps. For more on this, see the\r\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\r\n */\r\n\r\nexport async function createSourceEventStream(\r\n  schema,\r\n  document,\r\n  rootValue,\r\n  contextValue,\r\n  variableValues,\r\n  operationName,\r\n  subscribeFieldResolver,\r\n) {\r\n  // If arguments are missing or incorrectly typed, this is an internal\r\n  // developer mistake which should throw an early error.\r\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\r\n  // a \"Response\" with only errors is returned.\r\n\r\n  const exeContext = buildExecutionContext({\r\n    schema,\r\n    document,\r\n    rootValue,\r\n    contextValue,\r\n    variableValues,\r\n    operationName,\r\n    subscribeFieldResolver,\r\n  }); // Return early errors if execution context failed.\r\n\r\n  if (!('schema' in exeContext)) {\r\n    return {\r\n      errors: exeContext,\r\n    };\r\n  }\r\n\r\n  try {\r\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\r\n\r\n    if (!isAsyncIterable(eventStream)) {\r\n      throw new Error(\r\n        'Subscription field must return Async Iterable. ' +\r\n          `Received: ${inspect(eventStream)}.`,\r\n      );\r\n    }\r\n\r\n    return eventStream;\r\n  } catch (error) {\r\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\r\n    // Otherwise treat the error as a system-class error and re-throw it.\r\n    if (error instanceof GraphQLError) {\r\n      return {\r\n        errors: [error],\r\n      };\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function executeSubscription(exeContext) {\r\n  const { schema, fragments, operation, variableValues, rootValue } =\r\n    exeContext;\r\n  const rootType = schema.getSubscriptionType();\r\n\r\n  if (rootType == null) {\r\n    throw new GraphQLError(\r\n      'Schema is not configured to execute subscription operation.',\r\n      {\r\n        nodes: operation,\r\n      },\r\n    );\r\n  }\r\n\r\n  const rootFields = collectFields(\r\n    schema,\r\n    fragments,\r\n    variableValues,\r\n    rootType,\r\n    operation.selectionSet,\r\n  );\r\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\r\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\r\n\r\n  if (!fieldDef) {\r\n    const fieldName = fieldNodes[0].name.value;\r\n    throw new GraphQLError(\r\n      `The subscription field \"${fieldName}\" is not defined.`,\r\n      {\r\n        nodes: fieldNodes,\r\n      },\r\n    );\r\n  }\r\n\r\n  const path = addPath(undefined, responseName, rootType.name);\r\n  const info = buildResolveInfo(\r\n    exeContext,\r\n    fieldDef,\r\n    fieldNodes,\r\n    rootType,\r\n    path,\r\n  );\r\n\r\n  try {\r\n    var _fieldDef$subscribe;\r\n\r\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\r\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\r\n    // Build a JS object of arguments from the field.arguments AST, using the\r\n    // variables scope to fulfill any variable references.\r\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\r\n    // is provided to every resolve function within an execution. It is commonly\r\n    // used to represent an authenticated user, or request-specific caches.\r\n\r\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\r\n    // AsyncIterable yielding raw payloads.\r\n\r\n    const resolveFn =\r\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\r\n      _fieldDef$subscribe !== void 0\r\n        ? _fieldDef$subscribe\r\n        : exeContext.subscribeFieldResolver;\r\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\r\n\r\n    if (eventStream instanceof Error) {\r\n      throw eventStream;\r\n    }\r\n\r\n    return eventStream;\r\n  } catch (error) {\r\n    throw locatedError(error, fieldNodes, pathToArray(path));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}