{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n\n    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {\n      var fieldDef = fieldNodes[_i2];\n      var fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}","map":{"version":3,"names":["GraphQLError","isObjectType","isInterfaceType","isInputObjectType","UniqueFieldDefinitionNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","value","fieldNodes","fields","fieldNames","_i2","length","fieldDef","fieldName","hasField","reportError","concat","type","getFields"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n\n    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {\n      var fieldDef = fieldNodes[_i2];\n      var fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,iBAAxC,QAAiE,2BAAjE;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;EACtD,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAb;EACA,IAAIC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArD;EACA,IAAIC,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;EACA,OAAO;IACLE,yBAAyB,EAAEC,oBADtB;IAELC,wBAAwB,EAAED,oBAFrB;IAGLE,uBAAuB,EAAEF,oBAHpB;IAILG,sBAAsB,EAAEH,oBAJnB;IAKLI,oBAAoB,EAAEJ,oBALjB;IAMLK,mBAAmB,EAAEL;EANhB,CAAP;;EASA,SAASA,oBAAT,CAA8BM,IAA9B,EAAoC;IAClC,IAAIC,YAAJ;;IAEA,IAAIC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAAzB;;IAEA,IAAI,CAACZ,eAAe,CAACU,QAAD,CAApB,EAAgC;MAC9BV,eAAe,CAACU,QAAD,CAAf,GAA4BZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;IACD,CAPiC,CAOhC;;;IAGF,IAAIc,UAAU,GAAG,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAArB,MAAiC,IAAjC,IAAyCL,YAAY,KAAK,KAAK,CAA/D,GAAmEA,YAAnE,GAAkF,EAAnG;IACA,IAAIM,UAAU,GAAGf,eAAe,CAACU,QAAD,CAAhC;;IAEA,KAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,UAAU,CAACI,MAAnC,EAA2CD,GAAG,EAA9C,EAAkD;MAChD,IAAIE,QAAQ,GAAGL,UAAU,CAACG,GAAD,CAAzB;MACA,IAAIG,SAAS,GAAGD,QAAQ,CAACP,IAAT,CAAcC,KAA9B;;MAEA,IAAIQ,QAAQ,CAACxB,eAAe,CAACc,QAAD,CAAhB,EAA4BS,SAA5B,CAAZ,EAAoD;QAClD1B,OAAO,CAAC4B,WAAR,CAAoB,IAAIjC,YAAJ,CAAiB,WAAWkC,MAAX,CAAkBZ,QAAlB,EAA4B,GAA5B,EAAiCY,MAAjC,CAAwCH,SAAxC,EAAmD,oFAAnD,CAAjB,EAA2JD,QAAQ,CAACP,IAApK,CAApB;MACD,CAFD,MAEO,IAAII,UAAU,CAACI,SAAD,CAAd,EAA2B;QAChC1B,OAAO,CAAC4B,WAAR,CAAoB,IAAIjC,YAAJ,CAAiB,WAAWkC,MAAX,CAAkBZ,QAAlB,EAA4B,GAA5B,EAAiCY,MAAjC,CAAwCH,SAAxC,EAAmD,8BAAnD,CAAjB,EAAqG,CAACJ,UAAU,CAACI,SAAD,CAAX,EAAwBD,QAAQ,CAACP,IAAjC,CAArG,CAApB;MACD,CAFM,MAEA;QACLI,UAAU,CAACI,SAAD,CAAV,GAAwBD,QAAQ,CAACP,IAAjC;MACD;IACF;;IAED,OAAO,KAAP;EACD;AACF;;AAED,SAASS,QAAT,CAAkBG,IAAlB,EAAwBJ,SAAxB,EAAmC;EACjC,IAAI9B,YAAY,CAACkC,IAAD,CAAZ,IAAsBjC,eAAe,CAACiC,IAAD,CAArC,IAA+ChC,iBAAiB,CAACgC,IAAD,CAApE,EAA4E;IAC1E,OAAOA,IAAI,CAACC,SAAL,GAAiBL,SAAjB,KAA+B,IAAtC;EACD;;EAED,OAAO,KAAP;AACD"},"metadata":{},"sourceType":"module"}