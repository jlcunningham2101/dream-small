{"ast":null,"code":"import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { visit, visitInParallel } from \"../language/visitor.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\nimport { specifiedRules, specifiedSDLRules } from \"./specifiedRules.mjs\";\nimport { SDLValidationContext, ValidationContext } from \"./ValidationContext.mjs\";\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    maxErrors: undefined\n  };\n  documentAST || devAssert(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var abortObj = Object.freeze({});\n  var errors = [];\n  var context = new ValidationContext(schema, documentAST, typeInfo, function (error) {\n    if (options.maxErrors != null && errors.length >= options.maxErrors) {\n      errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var errors = [];\n  var context = new SDLValidationContext(documentAST, schemaToExtend, function (error) {\n    errors.push(error);\n  });\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}","map":{"version":3,"names":["devAssert","GraphQLError","visit","visitInParallel","assertValidSchema","TypeInfo","visitWithTypeInfo","specifiedRules","specifiedSDLRules","SDLValidationContext","ValidationContext","validate","schema","documentAST","rules","arguments","length","undefined","typeInfo","options","maxErrors","abortObj","Object","freeze","errors","context","error","push","visitor","map","rule","e","validateSDL","schemaToExtend","visitors","assertValidSDL","Error","message","join","assertValidSDLExtension"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/validate.mjs"],"sourcesContent":["import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { visit, visitInParallel } from \"../language/visitor.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\nimport { specifiedRules, specifiedSDLRules } from \"./specifiedRules.mjs\";\nimport { SDLValidationContext, ValidationContext } from \"./ValidationContext.mjs\";\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    maxErrors: undefined\n  };\n  documentAST || devAssert(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var abortObj = Object.freeze({});\n  var errors = [];\n  var context = new ValidationContext(schema, documentAST, typeInfo, function (error) {\n    if (options.maxErrors != null && errors.length >= options.maxErrors) {\n      errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var errors = [];\n  var context = new SDLValidationContext(documentAST, schemaToExtend, function (error) {\n    errors.push(error);\n  });\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}