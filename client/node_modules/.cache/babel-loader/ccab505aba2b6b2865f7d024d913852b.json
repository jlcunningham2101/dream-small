{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n/**\r\n * Prepares an object map of variableValues of the correct type based on the\r\n * provided variable definitions and arbitrary input. If the input cannot be\r\n * parsed to match the variable definitions, a GraphQLError will be thrown.\r\n *\r\n * Note: The returned value is a plain Object with a prototype, since it is\r\n * exposed to user code. Care should be taken to not pull values from the\r\n * Object prototype.\r\n */\n\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {\n      if (maxErrors != null && errors.length >= maxErrors) {\n        throw new GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n      }\n\n      errors.push(error);\n    });\n\n    if (errors.length === 0) {\n      return {\n        coerced\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(new GraphQLError(`Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`, {\n        nodes: varDefNode.type\n      }));\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(new GraphQLError(`Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`, {\n          nodes: varDefNode\n        }));\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(new GraphQLError(`Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`, {\n        nodes: varDefNode\n      }));\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(value, varType, (path, invalidValue, error) => {\n      let prefix = `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n      if (path.length > 0) {\n        prefix += ` at \"${varName}${printPathArray(path)}\"`;\n      }\n\n      onError(new GraphQLError(prefix + '; ' + error.message, {\n        nodes: varDefNode,\n        originalError: error.originalError\n      }));\n    });\n  }\n\n  return coercedValues;\n}\n/**\r\n * Prepares an object map of argument values given a list of argument\r\n * definitions and list of argument AST nodes.\r\n *\r\n * Note: The returned value is a plain Object with a prototype, since it is\r\n * exposed to user code. Care should be taken to not pull values from the\r\n * Object prototype.\r\n */\n\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];\n  const argNodeMap = keyMap(argumentNodes, arg => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', {\n          nodes: node\n        });\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n            nodes: valueNode\n          });\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', {\n        nodes: valueNode\n      });\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, {\n        nodes: valueNode\n      });\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\r\n * Prepares an object map of argument values given a directive definition\r\n * and a AST node which may contain directives. Optionally also accepts a map\r\n * of variable values.\r\n *\r\n * If the directive does not exist on the node, returns undefined.\r\n *\r\n * Note: The returned value is a plain Object with a prototype, since it is\r\n * exposed to user code. Care should be taken to not pull values from the\r\n * Object prototype.\r\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(directive => directive.name.value === directiveDef.name);\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","map":{"version":3,"names":["inspect","keyMap","printPathArray","GraphQLError","Kind","print","isInputType","isNonNullType","coerceInputValue","typeFromAST","valueFromAST","getVariableValues","schema","varDefNodes","inputs","options","errors","maxErrors","coerced","coerceVariableValues","error","length","push","onError","coercedValues","varDefNode","varName","variable","name","value","varType","type","varTypeStr","nodes","hasOwnProperty","defaultValue","path","invalidValue","prefix","message","originalError","getArgumentValues","def","node","variableValues","_node$arguments","argumentNodes","arguments","argNodeMap","arg","argDef","args","argType","argumentNode","undefined","valueNode","isNull","kind","NULL","VARIABLE","variableName","coercedValue","getDirectiveValues","directiveDef","_node$directives","directiveNode","directives","find","directive","obj","prop","Object","prototype","call"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/execution/values.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\r\nimport { keyMap } from '../jsutils/keyMap.mjs';\r\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\r\nimport { GraphQLError } from '../error/GraphQLError.mjs';\r\nimport { Kind } from '../language/kinds.mjs';\r\nimport { print } from '../language/printer.mjs';\r\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\r\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\r\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\r\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\r\n\r\n/**\r\n * Prepares an object map of variableValues of the correct type based on the\r\n * provided variable definitions and arbitrary input. If the input cannot be\r\n * parsed to match the variable definitions, a GraphQLError will be thrown.\r\n *\r\n * Note: The returned value is a plain Object with a prototype, since it is\r\n * exposed to user code. Care should be taken to not pull values from the\r\n * Object prototype.\r\n */\r\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\r\n  const errors = [];\r\n  const maxErrors =\r\n    options === null || options === void 0 ? void 0 : options.maxErrors;\r\n\r\n  try {\r\n    const coerced = coerceVariableValues(\r\n      schema,\r\n      varDefNodes,\r\n      inputs,\r\n      (error) => {\r\n        if (maxErrors != null && errors.length >= maxErrors) {\r\n          throw new GraphQLError(\r\n            'Too many errors processing variables, error limit reached. Execution aborted.',\r\n          );\r\n        }\r\n\r\n        errors.push(error);\r\n      },\r\n    );\r\n\r\n    if (errors.length === 0) {\r\n      return {\r\n        coerced,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    errors.push(error);\r\n  }\r\n\r\n  return {\r\n    errors,\r\n  };\r\n}\r\n\r\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\r\n  const coercedValues = {};\r\n\r\n  for (const varDefNode of varDefNodes) {\r\n    const varName = varDefNode.variable.name.value;\r\n    const varType = typeFromAST(schema, varDefNode.type);\r\n\r\n    if (!isInputType(varType)) {\r\n      // Must use input types for variables. This should be caught during\r\n      // validation, however is checked again here for safety.\r\n      const varTypeStr = print(varDefNode.type);\r\n      onError(\r\n        new GraphQLError(\r\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\r\n          {\r\n            nodes: varDefNode.type,\r\n          },\r\n        ),\r\n      );\r\n      continue;\r\n    }\r\n\r\n    if (!hasOwnProperty(inputs, varName)) {\r\n      if (varDefNode.defaultValue) {\r\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\r\n      } else if (isNonNullType(varType)) {\r\n        const varTypeStr = inspect(varType);\r\n        onError(\r\n          new GraphQLError(\r\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\r\n            {\r\n              nodes: varDefNode,\r\n            },\r\n          ),\r\n        );\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    const value = inputs[varName];\r\n\r\n    if (value === null && isNonNullType(varType)) {\r\n      const varTypeStr = inspect(varType);\r\n      onError(\r\n        new GraphQLError(\r\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\r\n          {\r\n            nodes: varDefNode,\r\n          },\r\n        ),\r\n      );\r\n      continue;\r\n    }\r\n\r\n    coercedValues[varName] = coerceInputValue(\r\n      value,\r\n      varType,\r\n      (path, invalidValue, error) => {\r\n        let prefix =\r\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\r\n\r\n        if (path.length > 0) {\r\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\r\n        }\r\n\r\n        onError(\r\n          new GraphQLError(prefix + '; ' + error.message, {\r\n            nodes: varDefNode,\r\n            originalError: error.originalError,\r\n          }),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  return coercedValues;\r\n}\r\n/**\r\n * Prepares an object map of argument values given a list of argument\r\n * definitions and list of argument AST nodes.\r\n *\r\n * Note: The returned value is a plain Object with a prototype, since it is\r\n * exposed to user code. Care should be taken to not pull values from the\r\n * Object prototype.\r\n */\r\n\r\nexport function getArgumentValues(def, node, variableValues) {\r\n  var _node$arguments;\r\n\r\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n  /* c8 ignore next */\r\n\r\n  const argumentNodes =\r\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\r\n      ? _node$arguments\r\n      : [];\r\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\r\n\r\n  for (const argDef of def.args) {\r\n    const name = argDef.name;\r\n    const argType = argDef.type;\r\n    const argumentNode = argNodeMap[name];\r\n\r\n    if (!argumentNode) {\r\n      if (argDef.defaultValue !== undefined) {\r\n        coercedValues[name] = argDef.defaultValue;\r\n      } else if (isNonNullType(argType)) {\r\n        throw new GraphQLError(\r\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\r\n            'was not provided.',\r\n          {\r\n            nodes: node,\r\n          },\r\n        );\r\n      }\r\n\r\n      continue;\r\n    }\r\n\r\n    const valueNode = argumentNode.value;\r\n    let isNull = valueNode.kind === Kind.NULL;\r\n\r\n    if (valueNode.kind === Kind.VARIABLE) {\r\n      const variableName = valueNode.name.value;\r\n\r\n      if (\r\n        variableValues == null ||\r\n        !hasOwnProperty(variableValues, variableName)\r\n      ) {\r\n        if (argDef.defaultValue !== undefined) {\r\n          coercedValues[name] = argDef.defaultValue;\r\n        } else if (isNonNullType(argType)) {\r\n          throw new GraphQLError(\r\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\r\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\r\n            {\r\n              nodes: valueNode,\r\n            },\r\n          );\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      isNull = variableValues[variableName] == null;\r\n    }\r\n\r\n    if (isNull && isNonNullType(argType)) {\r\n      throw new GraphQLError(\r\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\r\n          'must not be null.',\r\n        {\r\n          nodes: valueNode,\r\n        },\r\n      );\r\n    }\r\n\r\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\r\n\r\n    if (coercedValue === undefined) {\r\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\r\n      // execution. This is a runtime check to ensure execution does not\r\n      // continue with an invalid argument value.\r\n      throw new GraphQLError(\r\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\r\n        {\r\n          nodes: valueNode,\r\n        },\r\n      );\r\n    }\r\n\r\n    coercedValues[name] = coercedValue;\r\n  }\r\n\r\n  return coercedValues;\r\n}\r\n/**\r\n * Prepares an object map of argument values given a directive definition\r\n * and a AST node which may contain directives. Optionally also accepts a map\r\n * of variable values.\r\n *\r\n * If the directive does not exist on the node, returns undefined.\r\n *\r\n * Note: The returned value is a plain Object with a prototype, since it is\r\n * exposed to user code. Care should be taken to not pull values from the\r\n * Object prototype.\r\n */\r\n\r\nexport function getDirectiveValues(directiveDef, node, variableValues) {\r\n  var _node$directives;\r\n\r\n  const directiveNode =\r\n    (_node$directives = node.directives) === null || _node$directives === void 0\r\n      ? void 0\r\n      : _node$directives.find(\r\n          (directive) => directive.name.value === directiveDef.name,\r\n        );\r\n\r\n  if (directiveNode) {\r\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\r\n  }\r\n}\r\n\r\nfunction hasOwnProperty(obj, prop) {\r\n  return Object.prototype.hasOwnProperty.call(obj, prop);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}