{"ast":null,"code":"/**\r\n * Produce the GraphQL query recommended for a full schema introspection.\r\n * Accepts optional IntrospectionOptions.\r\n */\nexport function getIntrospectionQuery(options) {\n  const optionsWithDefault = {\n    descriptions: true,\n    specifiedByUrl: false,\n    directiveIsRepeatable: false,\n    schemaDescription: false,\n    inputValueDeprecation: false,\n    ...options\n  };\n  const descriptions = optionsWithDefault.descriptions ? 'description' : '';\n  const specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByURL' : '';\n  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';\n  const schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';\n\n  function inputDeprecation(str) {\n    return optionsWithDefault.inputValueDeprecation ? str : '';\n  }\n\n  return `\n    query IntrospectionQuery {\n      __schema {\n        ${schemaDescription}\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${descriptions}\n          ${directiveIsRepeatable}\n          locations\n          args${inputDeprecation('(includeDeprecated: true)')} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${descriptions}\n      ${specifiedByUrl}\n      fields(includeDeprecated: true) {\n        name\n        ${descriptions}\n        args${inputDeprecation('(includeDeprecated: true)')} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${inputDeprecation('(includeDeprecated: true)')} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${descriptions}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${descriptions}\n      type { ...TypeRef }\n      defaultValue\n      ${inputDeprecation('isDeprecated')}\n      ${inputDeprecation('deprecationReason')}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n}","map":{"version":3,"names":["getIntrospectionQuery","options","optionsWithDefault","descriptions","specifiedByUrl","directiveIsRepeatable","schemaDescription","inputValueDeprecation","inputDeprecation","str"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/utilities/getIntrospectionQuery.mjs"],"sourcesContent":["/**\r\n * Produce the GraphQL query recommended for a full schema introspection.\r\n * Accepts optional IntrospectionOptions.\r\n */\r\nexport function getIntrospectionQuery(options) {\r\n  const optionsWithDefault = {\r\n    descriptions: true,\r\n    specifiedByUrl: false,\r\n    directiveIsRepeatable: false,\r\n    schemaDescription: false,\r\n    inputValueDeprecation: false,\r\n    ...options,\r\n  };\r\n  const descriptions = optionsWithDefault.descriptions ? 'description' : '';\r\n  const specifiedByUrl = optionsWithDefault.specifiedByUrl\r\n    ? 'specifiedByURL'\r\n    : '';\r\n  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable\r\n    ? 'isRepeatable'\r\n    : '';\r\n  const schemaDescription = optionsWithDefault.schemaDescription\r\n    ? descriptions\r\n    : '';\r\n\r\n  function inputDeprecation(str) {\r\n    return optionsWithDefault.inputValueDeprecation ? str : '';\r\n  }\r\n\r\n  return `\r\n    query IntrospectionQuery {\r\n      __schema {\r\n        ${schemaDescription}\r\n        queryType { name }\r\n        mutationType { name }\r\n        subscriptionType { name }\r\n        types {\r\n          ...FullType\r\n        }\r\n        directives {\r\n          name\r\n          ${descriptions}\r\n          ${directiveIsRepeatable}\r\n          locations\r\n          args${inputDeprecation('(includeDeprecated: true)')} {\r\n            ...InputValue\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    fragment FullType on __Type {\r\n      kind\r\n      name\r\n      ${descriptions}\r\n      ${specifiedByUrl}\r\n      fields(includeDeprecated: true) {\r\n        name\r\n        ${descriptions}\r\n        args${inputDeprecation('(includeDeprecated: true)')} {\r\n          ...InputValue\r\n        }\r\n        type {\r\n          ...TypeRef\r\n        }\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      inputFields${inputDeprecation('(includeDeprecated: true)')} {\r\n        ...InputValue\r\n      }\r\n      interfaces {\r\n        ...TypeRef\r\n      }\r\n      enumValues(includeDeprecated: true) {\r\n        name\r\n        ${descriptions}\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      possibleTypes {\r\n        ...TypeRef\r\n      }\r\n    }\r\n\r\n    fragment InputValue on __InputValue {\r\n      name\r\n      ${descriptions}\r\n      type { ...TypeRef }\r\n      defaultValue\r\n      ${inputDeprecation('isDeprecated')}\r\n      ${inputDeprecation('deprecationReason')}\r\n    }\r\n\r\n    fragment TypeRef on __Type {\r\n      kind\r\n      name\r\n      ofType {\r\n        kind\r\n        name\r\n        ofType {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAT,CAA+BC,OAA/B,EAAwC;EAC7C,MAAMC,kBAAkB,GAAG;IACzBC,YAAY,EAAE,IADW;IAEzBC,cAAc,EAAE,KAFS;IAGzBC,qBAAqB,EAAE,KAHE;IAIzBC,iBAAiB,EAAE,KAJM;IAKzBC,qBAAqB,EAAE,KALE;IAMzB,GAAGN;EANsB,CAA3B;EAQA,MAAME,YAAY,GAAGD,kBAAkB,CAACC,YAAnB,GAAkC,aAAlC,GAAkD,EAAvE;EACA,MAAMC,cAAc,GAAGF,kBAAkB,CAACE,cAAnB,GACnB,gBADmB,GAEnB,EAFJ;EAGA,MAAMC,qBAAqB,GAAGH,kBAAkB,CAACG,qBAAnB,GAC1B,cAD0B,GAE1B,EAFJ;EAGA,MAAMC,iBAAiB,GAAGJ,kBAAkB,CAACI,iBAAnB,GACtBH,YADsB,GAEtB,EAFJ;;EAIA,SAASK,gBAAT,CAA0BC,GAA1B,EAA+B;IAC7B,OAAOP,kBAAkB,CAACK,qBAAnB,GAA2CE,GAA3C,GAAiD,EAAxD;EACD;;EAED,OAAQ;AACV;AACA;AACA,UAAUH,iBAAkB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYH,YAAa;AACzB,YAAYE,qBAAsB;AAClC;AACA,gBAAgBG,gBAAgB,CAAC,2BAAD,CAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQL,YAAa;AACrB,QAAQC,cAAe;AACvB;AACA;AACA,UAAUD,YAAa;AACvB,cAAcK,gBAAgB,CAAC,2BAAD,CAA8B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBA,gBAAgB,CAAC,2BAAD,CAA8B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUL,YAAa;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQA,YAAa;AACrB;AACA;AACA,QAAQK,gBAAgB,CAAC,cAAD,CAAiB;AACzC,QAAQA,gBAAgB,CAAC,mBAAD,CAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAjGE;AAkGD"},"metadata":{},"sourceType":"module"}