{"ast":null,"code":"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    // axios.defaults.headers.common[\"Authorization\"] = null;\n    localStorage.removeItem(\"id_token\"); // this will reload the page and reset the state of the application\n\n    window.location.assign(\"/\");\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["C:/Users/Owner/Desktop/Project-3/dream-small/client/src/utils/auth.js"],"sourcesContent":["import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    // axios.defaults.headers.common[\"Authorization\"] = null;\n    localStorage.removeItem(\"id_token\");\n    // this will reload the page and reset the state of the application\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,WAAN,CAAkB;EAChBC,UAAU,GAAG;IACX,OAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;EACD;;EAEDC,QAAQ,GAAG;IACT;IACA,MAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd;IACA,OAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB,CAHS,CAGsC;EAChD;;EAEDC,cAAc,CAACD,KAAD,EAAQ;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;MACA,IAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;QACnC,OAAO,IAAP;MACD,CAFD,MAEO,OAAO,KAAP;IACR,CALD,CAKE,OAAOC,GAAP,EAAY;MACZ,OAAO,KAAP;IACD;EACF;;EAEDR,QAAQ,GAAG;IACT;IACA,OAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;EACD;;EAEDC,KAAK,CAACC,OAAD,EAAU;IACb;IACAH,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;IAEAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;EAEDC,MAAM,GAAG;IACP;IACA;IACAR,YAAY,CAACS,UAAb,CAAwB,UAAxB,EAHO,CAIP;;IACAJ,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;AAxCe;;AA2ClB,eAAe,IAAIlB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}