{"ast":null,"code":"function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport find from \"../polyfills/find.mjs\";\nimport arrayFrom from \"../polyfills/arrayFrom.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { __Schema } from \"./introspection.mjs\";\nimport { GraphQLDirective, isDirective, specifiedDirectives } from \"./directives.mjs\";\nimport { isObjectType, isInterfaceType, isUnionType, isInputObjectType, getNamedType } from \"./definition.mjs\";\n/**\n * Test if the given value is a GraphQL schema.\n */\n// eslint-disable-next-line no-redeclare\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(\"Expected \".concat(inspect(schema), \" to be a GraphQL schema.\"));\n  }\n\n  return schema;\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n *     const characterInterface = new GraphQLInterfaceType({\n *       name: 'Character',\n *       ...\n *     });\n *\n *     const humanType = new GraphQLObjectType({\n *       name: 'Human',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const droidType = new GraphQLObjectType({\n *       name: 'Droid',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const schema = new GraphQLSchema({\n *       query: new GraphQLObjectType({\n *         name: 'Query',\n *         fields: {\n *           hero: { type: characterInterface, ... },\n *         }\n *       }),\n *       ...\n *       // Since this schema references only the `Character` interface it's\n *       // necessary to explicitly list the types that implement it if\n *       // you want them to be included in the final schema.\n *       types: [humanType, droidType],\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema = /*#__PURE__*/function () {\n  // Used as a cache for validateSchema().\n  function GraphQLSchema(config) {\n    var _config$directives; // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n\n\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) || devAssert(0, 'Must provide configuration object.');\n    !config.types || Array.isArray(config.types) || devAssert(0, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\"));\n    !config.directives || Array.isArray(config.directives) || devAssert(0, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\"));\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    var allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {\n        var type = _config$types2[_i2]; // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++) {\n      var directive = _this$_directives2[_i4]; // Directives are not validated until validateSchema() is called.\n\n      if (isDirective(directive)) {\n        for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {\n          var arg = _directive$args2[_i6];\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (var _i8 = 0, _arrayFrom2 = arrayFrom(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++) {\n      var namedType = _arrayFrom2[_i8];\n\n      if (namedType == null) {\n        continue;\n      }\n\n      var typeName = namedType.name;\n      typeName || devAssert(0, 'One of the provided types for building the Schema is missing a name.');\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\"Schema must contain uniquely named types but contains multiple types named \\\"\".concat(typeName, \"\\\".\"));\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++) {\n          var iface = _namedType$getInterfa2[_i10];\n\n          if (isInterfaceType(iface)) {\n            var implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++) {\n          var _iface = _namedType$getInterfa4[_i12];\n\n          if (isInterfaceType(_iface)) {\n            var _implementations = this._implementationsMap[_iface.name];\n\n            if (_implementations === undefined) {\n              _implementations = this._implementationsMap[_iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n\n            _implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  var _proto = GraphQLSchema.prototype;\n\n  _proto.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  _proto.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  _proto.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  _proto.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  _proto.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {\n    return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;\n  };\n\n  _proto.getImplementations = function getImplementations(interfaceType) {\n    var implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0 ? implementations : {\n      objects: [],\n      interfaces: []\n    };\n  } // @deprecated: use isSubType instead - will be removed in v16.\n  ;\n\n  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    return this.isSubType(abstractType, possibleType);\n  };\n\n  _proto.isSubType = function isSubType(abstractType, maybeSubType) {\n    var map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++) {\n          var type = _abstractType$getType2[_i14];\n          map[type.name] = true;\n        }\n      } else {\n        var implementations = this.getImplementations(abstractType);\n\n        for (var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++) {\n          var _type = _implementations$obje2[_i16];\n          map[_type.name] = true;\n        }\n\n        for (var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++) {\n          var _type2 = _implementations$inte2[_i18];\n          map[_type2.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  };\n\n  _proto.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  _proto.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  _proto.toConfig = function toConfig() {\n    var _this$extensionASTNod;\n\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: objectValues(this.getTypeMap()),\n      directives: this.getDirectives().slice(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],\n      assumeValid: this.__validationErrors !== undefined\n    };\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLSchema, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLSchema';\n    }\n  }]);\n\n  return GraphQLSchema;\n}();\n\nfunction collectReferencedTypes(type, typeSet) {\n  var namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++) {\n        var memberType = _namedType$getTypes2[_i20];\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++) {\n        var interfaceType = _namedType$getInterfa6[_i22];\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (var _i24 = 0, _objectValues2 = objectValues(namedType.getFields()); _i24 < _objectValues2.length; _i24++) {\n        var field = _objectValues2[_i24];\n        collectReferencedTypes(field.type, typeSet);\n\n        for (var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++) {\n          var arg = _field$args2[_i26];\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (var _i28 = 0, _objectValues4 = objectValues(namedType.getFields()); _i28 < _objectValues4.length; _i28++) {\n        var _field = _objectValues4[_i28];\n        collectReferencedTypes(_field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}","map":{"version":3,"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","find","arrayFrom","objectValues","SYMBOL_TO_STRING_TAG","inspect","toObjMap","devAssert","instanceOf","isObjectLike","__Schema","GraphQLDirective","isDirective","specifiedDirectives","isObjectType","isInterfaceType","isUnionType","isInputObjectType","getNamedType","isSchema","schema","GraphQLSchema","assertSchema","Error","concat","config","_config$directives","__validationErrors","assumeValid","undefined","types","Array","isArray","directives","description","extensions","astNode","extensionASTNodes","_queryType","query","_mutationType","mutation","_subscriptionType","subscription","_directives","allReferencedTypes","Set","_i2","_config$types2","type","delete","collectReferencedTypes","_i4","_this$_directives2","directive","_i6","_directive$args2","args","arg","_typeMap","create","_subTypeMap","_implementationsMap","_i8","_arrayFrom2","namedType","typeName","name","_i10","_namedType$getInterfa2","getInterfaces","iface","implementations","objects","interfaces","push","_i12","_namedType$getInterfa4","_iface","_implementations","_proto","getQueryType","getMutationType","getSubscriptionType","getTypeMap","getType","getPossibleTypes","abstractType","getTypes","getImplementations","interfaceType","isPossibleType","possibleType","isSubType","maybeSubType","map","_i14","_abstractType$getType2","_i16","_implementations$obje2","_type","_i18","_implementations$inte2","_type2","getDirectives","getDirective","toConfig","_this$extensionASTNod","slice","get","typeSet","has","add","_i20","_namedType$getTypes2","memberType","_i22","_namedType$getInterfa6","_i24","_objectValues2","getFields","field","_i26","_field$args2","_i28","_objectValues4","_field"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/type/schema.mjs"],"sourcesContent":["function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport find from \"../polyfills/find.mjs\";\nimport arrayFrom from \"../polyfills/arrayFrom.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { __Schema } from \"./introspection.mjs\";\nimport { GraphQLDirective, isDirective, specifiedDirectives } from \"./directives.mjs\";\nimport { isObjectType, isInterfaceType, isUnionType, isInputObjectType, getNamedType } from \"./definition.mjs\";\n/**\n * Test if the given value is a GraphQL schema.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(\"Expected \".concat(inspect(schema), \" to be a GraphQL schema.\"));\n  }\n\n  return schema;\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n *     const characterInterface = new GraphQLInterfaceType({\n *       name: 'Character',\n *       ...\n *     });\n *\n *     const humanType = new GraphQLObjectType({\n *       name: 'Human',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const droidType = new GraphQLObjectType({\n *       name: 'Droid',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const schema = new GraphQLSchema({\n *       query: new GraphQLObjectType({\n *         name: 'Query',\n *         fields: {\n *           hero: { type: characterInterface, ... },\n *         }\n *       }),\n *       ...\n *       // Since this schema references only the `Character` interface it's\n *       // necessary to explicitly list the types that implement it if\n *       // you want them to be included in the final schema.\n *       types: [humanType, droidType],\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema = /*#__PURE__*/function () {\n  // Used as a cache for validateSchema().\n  function GraphQLSchema(config) {\n    var _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) || devAssert(0, 'Must provide configuration object.');\n    !config.types || Array.isArray(config.types) || devAssert(0, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\"));\n    !config.directives || Array.isArray(config.directives) || devAssert(0, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\"));\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    var allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {\n        var type = _config$types2[_i2];\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++) {\n      var directive = _this$_directives2[_i4];\n\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {\n          var arg = _directive$args2[_i6];\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (var _i8 = 0, _arrayFrom2 = arrayFrom(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++) {\n      var namedType = _arrayFrom2[_i8];\n\n      if (namedType == null) {\n        continue;\n      }\n\n      var typeName = namedType.name;\n      typeName || devAssert(0, 'One of the provided types for building the Schema is missing a name.');\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\"Schema must contain uniquely named types but contains multiple types named \\\"\".concat(typeName, \"\\\".\"));\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++) {\n          var iface = _namedType$getInterfa2[_i10];\n\n          if (isInterfaceType(iface)) {\n            var implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++) {\n          var _iface = _namedType$getInterfa4[_i12];\n\n          if (isInterfaceType(_iface)) {\n            var _implementations = this._implementationsMap[_iface.name];\n\n            if (_implementations === undefined) {\n              _implementations = this._implementationsMap[_iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n\n            _implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  var _proto = GraphQLSchema.prototype;\n\n  _proto.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  _proto.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  _proto.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  _proto.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  _proto.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {\n    return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;\n  };\n\n  _proto.getImplementations = function getImplementations(interfaceType) {\n    var implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0 ? implementations : {\n      objects: [],\n      interfaces: []\n    };\n  } // @deprecated: use isSubType instead - will be removed in v16.\n  ;\n\n  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    return this.isSubType(abstractType, possibleType);\n  };\n\n  _proto.isSubType = function isSubType(abstractType, maybeSubType) {\n    var map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++) {\n          var type = _abstractType$getType2[_i14];\n          map[type.name] = true;\n        }\n      } else {\n        var implementations = this.getImplementations(abstractType);\n\n        for (var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++) {\n          var _type = _implementations$obje2[_i16];\n          map[_type.name] = true;\n        }\n\n        for (var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++) {\n          var _type2 = _implementations$inte2[_i18];\n          map[_type2.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  };\n\n  _proto.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  _proto.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  _proto.toConfig = function toConfig() {\n    var _this$extensionASTNod;\n\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: objectValues(this.getTypeMap()),\n      directives: this.getDirectives().slice(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],\n      assumeValid: this.__validationErrors !== undefined\n    };\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLSchema, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLSchema';\n    }\n  }]);\n\n  return GraphQLSchema;\n}();\n\nfunction collectReferencedTypes(type, typeSet) {\n  var namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++) {\n        var memberType = _namedType$getTypes2[_i20];\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++) {\n        var interfaceType = _namedType$getInterfa6[_i22];\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (var _i24 = 0, _objectValues2 = objectValues(namedType.getFields()); _i24 < _objectValues2.length; _i24++) {\n        var field = _objectValues2[_i24];\n        collectReferencedTypes(field.type, typeSet);\n\n        for (var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++) {\n          var arg = _field$args2[_i26];\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (var _i28 = 0, _objectValues4 = objectValues(namedType.getFields()); _i28 < _objectValues4.length; _i28++) {\n        var _field = _objectValues4[_i28];\n        collectReferencedTypes(_field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}