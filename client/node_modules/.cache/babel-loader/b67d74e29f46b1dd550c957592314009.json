{"ast":null,"code":"import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\r\n * There are predicates for each kind of GraphQL type.\r\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Interface type.`);\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Input Object type.`);\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\r\n * These types may be used as input types for arguments and directives.\r\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\r\n * These types may be used as output types as the result of fields.\r\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\r\n * These types may describe types which may be leaf values.\r\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\r\n * These types may describe the parent context of a selection set.\r\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL composite type.`);\n  }\n\n  return type;\n}\n/**\r\n * These types may describe the parent context of a selection set.\r\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\r\n * List Type Wrapper\r\n *\r\n * A list is a wrapping type which points to another type.\r\n * Lists are often created within the context of defining the fields of\r\n * an object type.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const PersonType = new GraphQLObjectType({\r\n *   name: 'Person',\r\n *   fields: () => ({\r\n *     parents: { type: new GraphQLList(PersonType) },\r\n *     children: { type: new GraphQLList(PersonType) },\r\n *   })\r\n * })\r\n * ```\r\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) || devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n/**\r\n * Non-Null Type Wrapper\r\n *\r\n * A non-null is a wrapping type which points to another type.\r\n * Non-null types enforce that their values are never null and can ensure\r\n * an error is raised if this ever occurs during a request. It is useful for\r\n * fields which you can make a strong guarantee on non-nullability, for example\r\n * usually the id field of a database row will never be null.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const RowType = new GraphQLObjectType({\r\n *   name: 'Row',\r\n *   fields: () => ({\r\n *     id: { type: new GraphQLNonNull(GraphQLString) },\r\n *   })\r\n * })\r\n * ```\r\n * Note: the enforcement of non-nullability occurs within the executor.\r\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) || devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL nullable type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n/**\r\n * These types wrap and modify other types\r\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\r\n * These types can all accept null as a value.\r\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\r\n * These named types do not include modifiers like List or NonNull.\r\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\r\n * Used while defining GraphQL types to allow for circular references in\r\n * otherwise immutable type definitions.\r\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\n\n/**\r\n * Scalar Type Definition\r\n *\r\n * The leaf values of any request and input values to arguments are\r\n * Scalars (or Enums) and are defined with a name and a series of functions\r\n * used to parse input from ast or variables and to ensure validity.\r\n *\r\n * If a type's serialize function returns `null` or does not return a value\r\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\r\n * value will be returned in the response. It is always better to validate\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const OddType = new GraphQLScalarType({\r\n *   name: 'Odd',\r\n *   serialize(value) {\r\n *     if (!Number.isFinite(value)) {\r\n *       throw new Error(\r\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\r\n *       );\r\n *     }\r\n *\r\n *     if (value % 2 === 0) {\r\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\r\n *     }\r\n *     return value;\r\n *   }\r\n * });\r\n * ```\r\n */\n\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;\n\n    const parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];\n    config.specifiedByURL == null || typeof config.specifiedByURL === 'string' || devAssert(false, `${this.name} must provide \"specifiedByURL\" as a string, ` + `but got: ${inspect(config.specifiedByURL)}.`);\n    config.serialize == null || typeof config.serialize === 'function' || devAssert(false, `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`);\n\n    if (config.parseLiteral) {\n      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || devAssert(false, `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n/**\r\n * Object Type Definition\r\n *\r\n * Almost all of the GraphQL types you define will be object types. Object types\r\n * have a name, but most importantly describe their fields.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const AddressType = new GraphQLObjectType({\r\n *   name: 'Address',\r\n *   fields: {\r\n *     street: { type: GraphQLString },\r\n *     number: { type: GraphQLInt },\r\n *     formatted: {\r\n *       type: GraphQLString,\r\n *       resolve(obj) {\r\n *         return obj.number + ' ' + obj.street\r\n *       }\r\n *     }\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * When two types need to refer to each other, or a type needs to refer to\r\n * itself in a field, you can use a function expression (aka a closure or a\r\n * thunk) to supply the fields lazily.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const PersonType = new GraphQLObjectType({\r\n *   name: 'Person',\r\n *   fields: () => ({\r\n *     name: { type: GraphQLString },\r\n *     bestFriend: { type: PersonType },\r\n *   })\r\n * });\r\n * ```\r\n */\n\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN2 = config.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null || typeof config.isTypeOf === 'function' || devAssert(false, `${this.name} must provide \"isTypeOf\" as a function, ` + `but got: ${inspect(config.isTypeOf)}.`);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk((_config$interfaces = config.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []);\n  Array.isArray(interfaces) || devAssert(false, `${config.name} interfaces must be an Array or a function which returns an Array.`);\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(false, `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) || devAssert(false, `${config.name}.${fieldName} field config must be an object.`);\n    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || devAssert(false, `${config.name}.${fieldName} field resolver must be a function if ` + `provided, but got: ${inspect(fieldConfig.resolve)}.`);\n    const argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};\n    isPlainObj(argsConfig) || devAssert(false, `${config.name}.${fieldName} args must be an object with argument names as keys.`);\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(_ref => {\n    let [argName, argConfig] = _ref;\n    return {\n      name: assertName(argName),\n      description: argConfig.description,\n      type: argConfig.type,\n      defaultValue: argConfig.defaultValue,\n      deprecationReason: argConfig.deprecationReason,\n      extensions: toObjMap(argConfig.extensions),\n      astNode: argConfig.astNode\n    };\n  });\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, field => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode\n  }));\n}\n/**\r\n * @internal\r\n */\n\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(args, arg => arg.name, arg => ({\n    description: arg.description,\n    type: arg.type,\n    defaultValue: arg.defaultValue,\n    deprecationReason: arg.deprecationReason,\n    extensions: arg.extensions,\n    astNode: arg.astNode\n  }));\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n/**\r\n * Interface Type Definition\r\n *\r\n * When a field can return one of a heterogeneous set of types, a Interface type\r\n * is used to describe what types are possible, what fields are in common across\r\n * all types, as well as a function to determine which type is actually used\r\n * when the field is resolved.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const EntityType = new GraphQLInterfaceType({\r\n *   name: 'Entity',\r\n *   fields: {\r\n *     name: { type: GraphQLString }\r\n *   }\r\n * });\r\n * ```\r\n */\n\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN3 = config.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(false, `${this.name} must provide \"resolveType\" as a function, ` + `but got: ${inspect(config.resolveType)}.`);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n/**\r\n * Union Type Definition\r\n *\r\n * When a field can return one of a heterogeneous set of types, a Union type\r\n * is used to describe what types are possible as well as providing a function\r\n * to determine which type is actually used when the field is resolved.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const PetType = new GraphQLUnionType({\r\n *   name: 'Pet',\r\n *   types: [ DogType, CatType ],\r\n *   resolveType(value) {\r\n *     if (value instanceof Dog) {\r\n *       return DogType;\r\n *     }\r\n *     if (value instanceof Cat) {\r\n *       return CatType;\r\n *     }\r\n *   }\r\n * });\r\n * ```\r\n */\n\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN4 = config.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(false, `${this.name} must provide \"resolveType\" as a function, ` + `but got: ${inspect(config.resolveType)}.`);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) || devAssert(false, `Must provide Array of types or a function which returns such an array for Union ${config.name}.`);\n  return types;\n}\n/**\r\n * Enum Type Definition\r\n *\r\n * Some leaf values of requests and input values are Enums. GraphQL serializes\r\n * Enum values as strings, however internally Enums can be represented by any\r\n * kind of type, often integers.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const RGBType = new GraphQLEnumType({\r\n *   name: 'RGB',\r\n *   values: {\r\n *     RED: { value: 0 },\r\n *     GREEN: { value: 1 },\r\n *     BLUE: { value: 2 }\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Note: If a value is not provided in a definition, the name of the enum value\r\n * will be used as its internal value.\r\n */\n\n\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN5 = config.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [];\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(this._values.map(enumValue => [enumValue.value, enumValue]));\n    this._nameLookup = keyMap(this._values, value => value.name);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    return this._values;\n  }\n\n  getValue(name) {\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(`Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`);\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue)\n  /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(`Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr));\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(`Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` + didYouMeanEnumValue(this, inputValue));\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables)\n  /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(`Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr), {\n        nodes: valueNode\n      });\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(`Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` + didYouMeanEnumValue(this, valueStr), {\n        nodes: valueNode\n      });\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(this.getValues(), value => value.name, value => ({\n      description: value.description,\n      value: value.value,\n      deprecationReason: value.deprecationReason,\n      extensions: value.extensions,\n      astNode: value.astNode\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map(value => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) || devAssert(false, `${typeName} values must be an object with value names as keys.`);\n  return Object.entries(valueMap).map(_ref2 => {\n    let [valueName, valueConfig] = _ref2;\n    isPlainObj(valueConfig) || devAssert(false, `${typeName}.${valueName} must refer to an object with a \"value\" key ` + `representing an internal value but got: ${inspect(valueConfig)}.`);\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode\n    };\n  });\n}\n/**\r\n * Input Object Type Definition\r\n *\r\n * An input object defines a structured collection of fields which may be\r\n * supplied to a field argument.\r\n *\r\n * Using `NonNull` will ensure that a value must be provided by the query\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const GeoPoint = new GraphQLInputObjectType({\r\n *   name: 'GeoPoint',\r\n *   fields: {\r\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\r\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\r\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\r\n *   }\r\n * });\r\n * ```\r\n */\n\n\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN6 = config.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [];\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), field => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(false, `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) || devAssert(false, `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`);\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}","map":{"version":3,"names":["devAssert","didYouMean","identityFunc","inspect","instanceOf","isObjectLike","keyMap","keyValMap","mapValue","suggestionList","toObjMap","GraphQLError","Kind","print","valueFromASTUntyped","assertEnumValueName","assertName","isType","type","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","assertType","Error","GraphQLScalarType","assertScalarType","GraphQLObjectType","assertObjectType","GraphQLInterfaceType","assertInterfaceType","GraphQLUnionType","assertUnionType","GraphQLEnumType","assertEnumType","GraphQLInputObjectType","assertInputObjectType","GraphQLList","assertListType","GraphQLNonNull","assertNonNullType","isInputType","isWrappingType","ofType","assertInputType","isOutputType","assertOutputType","isLeafType","assertLeafType","isCompositeType","assertCompositeType","isAbstractType","assertAbstractType","constructor","Symbol","toStringTag","toString","String","toJSON","isNullableType","assertWrappingType","assertNullableType","getNullableType","isNamedType","assertNamedType","getNamedType","unwrappedType","resolveReadonlyArrayThunk","thunk","resolveObjMapThunk","config","_config$parseValue","_config$serialize","_config$parseLiteral","_config$extensionASTN","parseValue","name","description","specifiedByURL","serialize","parseLiteral","node","variables","extensions","astNode","extensionASTNodes","toConfig","_config$extensionASTN2","isTypeOf","_fields","defineFieldMap","_interfaces","defineInterfaces","getFields","getInterfaces","interfaces","fields","fieldsToFieldsConfig","_config$interfaces","Array","isArray","fieldMap","isPlainObj","fieldConfig","fieldName","_fieldConfig$args","resolve","argsConfig","args","defineArguments","subscribe","deprecationReason","Object","entries","map","argName","argConfig","defaultValue","obj","field","argsToArgsConfig","arg","isRequiredArgument","undefined","_config$extensionASTN3","resolveType","bind","_config$extensionASTN4","_types","defineTypes","getTypes","types","_config$extensionASTN5","_values","defineEnumValues","values","_valueLookup","Map","enumValue","value","_nameLookup","getValues","getValue","outputValue","get","inputValue","valueStr","didYouMeanEnumValue","valueNode","_variables","kind","ENUM","nodes","enumType","unknownValueStr","allNames","suggestedValues","typeName","valueMap","valueName","valueConfig","_config$extensionASTN6","defineInputFieldMap","isRequiredInputField"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/type/definition.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\r\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\r\nimport { inspect } from '../jsutils/inspect.mjs';\r\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\r\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\r\nimport { keyMap } from '../jsutils/keyMap.mjs';\r\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\r\nimport { mapValue } from '../jsutils/mapValue.mjs';\r\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\r\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\r\nimport { GraphQLError } from '../error/GraphQLError.mjs';\r\nimport { Kind } from '../language/kinds.mjs';\r\nimport { print } from '../language/printer.mjs';\r\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\r\nimport { assertEnumValueName, assertName } from './assertName.mjs';\r\nexport function isType(type) {\r\n  return (\r\n    isScalarType(type) ||\r\n    isObjectType(type) ||\r\n    isInterfaceType(type) ||\r\n    isUnionType(type) ||\r\n    isEnumType(type) ||\r\n    isInputObjectType(type) ||\r\n    isListType(type) ||\r\n    isNonNullType(type)\r\n  );\r\n}\r\nexport function assertType(type) {\r\n  if (!isType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * There are predicates for each kind of GraphQL type.\r\n */\r\n\r\nexport function isScalarType(type) {\r\n  return instanceOf(type, GraphQLScalarType);\r\n}\r\nexport function assertScalarType(type) {\r\n  if (!isScalarType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function isObjectType(type) {\r\n  return instanceOf(type, GraphQLObjectType);\r\n}\r\nexport function assertObjectType(type) {\r\n  if (!isObjectType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function isInterfaceType(type) {\r\n  return instanceOf(type, GraphQLInterfaceType);\r\n}\r\nexport function assertInterfaceType(type) {\r\n  if (!isInterfaceType(type)) {\r\n    throw new Error(\r\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\r\n    );\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function isUnionType(type) {\r\n  return instanceOf(type, GraphQLUnionType);\r\n}\r\nexport function assertUnionType(type) {\r\n  if (!isUnionType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function isEnumType(type) {\r\n  return instanceOf(type, GraphQLEnumType);\r\n}\r\nexport function assertEnumType(type) {\r\n  if (!isEnumType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function isInputObjectType(type) {\r\n  return instanceOf(type, GraphQLInputObjectType);\r\n}\r\nexport function assertInputObjectType(type) {\r\n  if (!isInputObjectType(type)) {\r\n    throw new Error(\r\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\r\n    );\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function isListType(type) {\r\n  return instanceOf(type, GraphQLList);\r\n}\r\nexport function assertListType(type) {\r\n  if (!isListType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function isNonNullType(type) {\r\n  return instanceOf(type, GraphQLNonNull);\r\n}\r\nexport function assertNonNullType(type) {\r\n  if (!isNonNullType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * These types may be used as input types for arguments and directives.\r\n */\r\n\r\nexport function isInputType(type) {\r\n  return (\r\n    isScalarType(type) ||\r\n    isEnumType(type) ||\r\n    isInputObjectType(type) ||\r\n    (isWrappingType(type) && isInputType(type.ofType))\r\n  );\r\n}\r\nexport function assertInputType(type) {\r\n  if (!isInputType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * These types may be used as output types as the result of fields.\r\n */\r\n\r\nexport function isOutputType(type) {\r\n  return (\r\n    isScalarType(type) ||\r\n    isObjectType(type) ||\r\n    isInterfaceType(type) ||\r\n    isUnionType(type) ||\r\n    isEnumType(type) ||\r\n    (isWrappingType(type) && isOutputType(type.ofType))\r\n  );\r\n}\r\nexport function assertOutputType(type) {\r\n  if (!isOutputType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * These types may describe types which may be leaf values.\r\n */\r\n\r\nexport function isLeafType(type) {\r\n  return isScalarType(type) || isEnumType(type);\r\n}\r\nexport function assertLeafType(type) {\r\n  if (!isLeafType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * These types may describe the parent context of a selection set.\r\n */\r\n\r\nexport function isCompositeType(type) {\r\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\r\n}\r\nexport function assertCompositeType(type) {\r\n  if (!isCompositeType(type)) {\r\n    throw new Error(\r\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\r\n    );\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * These types may describe the parent context of a selection set.\r\n */\r\n\r\nexport function isAbstractType(type) {\r\n  return isInterfaceType(type) || isUnionType(type);\r\n}\r\nexport function assertAbstractType(type) {\r\n  if (!isAbstractType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * List Type Wrapper\r\n *\r\n * A list is a wrapping type which points to another type.\r\n * Lists are often created within the context of defining the fields of\r\n * an object type.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const PersonType = new GraphQLObjectType({\r\n *   name: 'Person',\r\n *   fields: () => ({\r\n *     parents: { type: new GraphQLList(PersonType) },\r\n *     children: { type: new GraphQLList(PersonType) },\r\n *   })\r\n * })\r\n * ```\r\n */\r\n\r\nexport class GraphQLList {\r\n  constructor(ofType) {\r\n    isType(ofType) ||\r\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\r\n    this.ofType = ofType;\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLList';\r\n  }\r\n\r\n  toString() {\r\n    return '[' + String(this.ofType) + ']';\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n/**\r\n * Non-Null Type Wrapper\r\n *\r\n * A non-null is a wrapping type which points to another type.\r\n * Non-null types enforce that their values are never null and can ensure\r\n * an error is raised if this ever occurs during a request. It is useful for\r\n * fields which you can make a strong guarantee on non-nullability, for example\r\n * usually the id field of a database row will never be null.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const RowType = new GraphQLObjectType({\r\n *   name: 'Row',\r\n *   fields: () => ({\r\n *     id: { type: new GraphQLNonNull(GraphQLString) },\r\n *   })\r\n * })\r\n * ```\r\n * Note: the enforcement of non-nullability occurs within the executor.\r\n */\r\n\r\nexport class GraphQLNonNull {\r\n  constructor(ofType) {\r\n    isNullableType(ofType) ||\r\n      devAssert(\r\n        false,\r\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\r\n      );\r\n    this.ofType = ofType;\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLNonNull';\r\n  }\r\n\r\n  toString() {\r\n    return String(this.ofType) + '!';\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n/**\r\n * These types wrap and modify other types\r\n */\r\n\r\nexport function isWrappingType(type) {\r\n  return isListType(type) || isNonNullType(type);\r\n}\r\nexport function assertWrappingType(type) {\r\n  if (!isWrappingType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * These types can all accept null as a value.\r\n */\r\n\r\nexport function isNullableType(type) {\r\n  return isType(type) && !isNonNullType(type);\r\n}\r\nexport function assertNullableType(type) {\r\n  if (!isNullableType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function getNullableType(type) {\r\n  if (type) {\r\n    return isNonNullType(type) ? type.ofType : type;\r\n  }\r\n}\r\n/**\r\n * These named types do not include modifiers like List or NonNull.\r\n */\r\n\r\nexport function isNamedType(type) {\r\n  return (\r\n    isScalarType(type) ||\r\n    isObjectType(type) ||\r\n    isInterfaceType(type) ||\r\n    isUnionType(type) ||\r\n    isEnumType(type) ||\r\n    isInputObjectType(type)\r\n  );\r\n}\r\nexport function assertNamedType(type) {\r\n  if (!isNamedType(type)) {\r\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\r\n  }\r\n\r\n  return type;\r\n}\r\nexport function getNamedType(type) {\r\n  if (type) {\r\n    let unwrappedType = type;\r\n\r\n    while (isWrappingType(unwrappedType)) {\r\n      unwrappedType = unwrappedType.ofType;\r\n    }\r\n\r\n    return unwrappedType;\r\n  }\r\n}\r\n/**\r\n * Used while defining GraphQL types to allow for circular references in\r\n * otherwise immutable type definitions.\r\n */\r\n\r\nexport function resolveReadonlyArrayThunk(thunk) {\r\n  return typeof thunk === 'function' ? thunk() : thunk;\r\n}\r\nexport function resolveObjMapThunk(thunk) {\r\n  return typeof thunk === 'function' ? thunk() : thunk;\r\n}\r\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\r\n\r\n/**\r\n * Scalar Type Definition\r\n *\r\n * The leaf values of any request and input values to arguments are\r\n * Scalars (or Enums) and are defined with a name and a series of functions\r\n * used to parse input from ast or variables and to ensure validity.\r\n *\r\n * If a type's serialize function returns `null` or does not return a value\r\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\r\n * value will be returned in the response. It is always better to validate\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const OddType = new GraphQLScalarType({\r\n *   name: 'Odd',\r\n *   serialize(value) {\r\n *     if (!Number.isFinite(value)) {\r\n *       throw new Error(\r\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\r\n *       );\r\n *     }\r\n *\r\n *     if (value % 2 === 0) {\r\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\r\n *     }\r\n *     return value;\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport class GraphQLScalarType {\r\n  constructor(config) {\r\n    var _config$parseValue,\r\n      _config$serialize,\r\n      _config$parseLiteral,\r\n      _config$extensionASTN;\r\n\r\n    const parseValue =\r\n      (_config$parseValue = config.parseValue) !== null &&\r\n      _config$parseValue !== void 0\r\n        ? _config$parseValue\r\n        : identityFunc;\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.specifiedByURL = config.specifiedByURL;\r\n    this.serialize =\r\n      (_config$serialize = config.serialize) !== null &&\r\n      _config$serialize !== void 0\r\n        ? _config$serialize\r\n        : identityFunc;\r\n    this.parseValue = parseValue;\r\n    this.parseLiteral =\r\n      (_config$parseLiteral = config.parseLiteral) !== null &&\r\n      _config$parseLiteral !== void 0\r\n        ? _config$parseLiteral\r\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    this.extensionASTNodes =\r\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\r\n      _config$extensionASTN !== void 0\r\n        ? _config$extensionASTN\r\n        : [];\r\n    config.specifiedByURL == null ||\r\n      typeof config.specifiedByURL === 'string' ||\r\n      devAssert(\r\n        false,\r\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\r\n          `but got: ${inspect(config.specifiedByURL)}.`,\r\n      );\r\n    config.serialize == null ||\r\n      typeof config.serialize === 'function' ||\r\n      devAssert(\r\n        false,\r\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\r\n      );\r\n\r\n    if (config.parseLiteral) {\r\n      (typeof config.parseValue === 'function' &&\r\n        typeof config.parseLiteral === 'function') ||\r\n        devAssert(\r\n          false,\r\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\r\n        );\r\n    }\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLScalarType';\r\n  }\r\n\r\n  toConfig() {\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      specifiedByURL: this.specifiedByURL,\r\n      serialize: this.serialize,\r\n      parseValue: this.parseValue,\r\n      parseLiteral: this.parseLiteral,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n      extensionASTNodes: this.extensionASTNodes,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * Object Type Definition\r\n *\r\n * Almost all of the GraphQL types you define will be object types. Object types\r\n * have a name, but most importantly describe their fields.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const AddressType = new GraphQLObjectType({\r\n *   name: 'Address',\r\n *   fields: {\r\n *     street: { type: GraphQLString },\r\n *     number: { type: GraphQLInt },\r\n *     formatted: {\r\n *       type: GraphQLString,\r\n *       resolve(obj) {\r\n *         return obj.number + ' ' + obj.street\r\n *       }\r\n *     }\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * When two types need to refer to each other, or a type needs to refer to\r\n * itself in a field, you can use a function expression (aka a closure or a\r\n * thunk) to supply the fields lazily.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const PersonType = new GraphQLObjectType({\r\n *   name: 'Person',\r\n *   fields: () => ({\r\n *     name: { type: GraphQLString },\r\n *     bestFriend: { type: PersonType },\r\n *   })\r\n * });\r\n * ```\r\n */\r\nexport class GraphQLObjectType {\r\n  constructor(config) {\r\n    var _config$extensionASTN2;\r\n\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.isTypeOf = config.isTypeOf;\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    this.extensionASTNodes =\r\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\r\n      _config$extensionASTN2 !== void 0\r\n        ? _config$extensionASTN2\r\n        : [];\r\n\r\n    this._fields = () => defineFieldMap(config);\r\n\r\n    this._interfaces = () => defineInterfaces(config);\r\n\r\n    config.isTypeOf == null ||\r\n      typeof config.isTypeOf === 'function' ||\r\n      devAssert(\r\n        false,\r\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\r\n          `but got: ${inspect(config.isTypeOf)}.`,\r\n      );\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLObjectType';\r\n  }\r\n\r\n  getFields() {\r\n    if (typeof this._fields === 'function') {\r\n      this._fields = this._fields();\r\n    }\r\n\r\n    return this._fields;\r\n  }\r\n\r\n  getInterfaces() {\r\n    if (typeof this._interfaces === 'function') {\r\n      this._interfaces = this._interfaces();\r\n    }\r\n\r\n    return this._interfaces;\r\n  }\r\n\r\n  toConfig() {\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      interfaces: this.getInterfaces(),\r\n      fields: fieldsToFieldsConfig(this.getFields()),\r\n      isTypeOf: this.isTypeOf,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n      extensionASTNodes: this.extensionASTNodes,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\nfunction defineInterfaces(config) {\r\n  var _config$interfaces;\r\n\r\n  const interfaces = resolveReadonlyArrayThunk(\r\n    (_config$interfaces = config.interfaces) !== null &&\r\n      _config$interfaces !== void 0\r\n      ? _config$interfaces\r\n      : [],\r\n  );\r\n  Array.isArray(interfaces) ||\r\n    devAssert(\r\n      false,\r\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\r\n    );\r\n  return interfaces;\r\n}\r\n\r\nfunction defineFieldMap(config) {\r\n  const fieldMap = resolveObjMapThunk(config.fields);\r\n  isPlainObj(fieldMap) ||\r\n    devAssert(\r\n      false,\r\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\r\n    );\r\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\r\n    var _fieldConfig$args;\r\n\r\n    isPlainObj(fieldConfig) ||\r\n      devAssert(\r\n        false,\r\n        `${config.name}.${fieldName} field config must be an object.`,\r\n      );\r\n    fieldConfig.resolve == null ||\r\n      typeof fieldConfig.resolve === 'function' ||\r\n      devAssert(\r\n        false,\r\n        `${config.name}.${fieldName} field resolver must be a function if ` +\r\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\r\n      );\r\n    const argsConfig =\r\n      (_fieldConfig$args = fieldConfig.args) !== null &&\r\n      _fieldConfig$args !== void 0\r\n        ? _fieldConfig$args\r\n        : {};\r\n    isPlainObj(argsConfig) ||\r\n      devAssert(\r\n        false,\r\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\r\n      );\r\n    return {\r\n      name: assertName(fieldName),\r\n      description: fieldConfig.description,\r\n      type: fieldConfig.type,\r\n      args: defineArguments(argsConfig),\r\n      resolve: fieldConfig.resolve,\r\n      subscribe: fieldConfig.subscribe,\r\n      deprecationReason: fieldConfig.deprecationReason,\r\n      extensions: toObjMap(fieldConfig.extensions),\r\n      astNode: fieldConfig.astNode,\r\n    };\r\n  });\r\n}\r\n\r\nexport function defineArguments(config) {\r\n  return Object.entries(config).map(([argName, argConfig]) => ({\r\n    name: assertName(argName),\r\n    description: argConfig.description,\r\n    type: argConfig.type,\r\n    defaultValue: argConfig.defaultValue,\r\n    deprecationReason: argConfig.deprecationReason,\r\n    extensions: toObjMap(argConfig.extensions),\r\n    astNode: argConfig.astNode,\r\n  }));\r\n}\r\n\r\nfunction isPlainObj(obj) {\r\n  return isObjectLike(obj) && !Array.isArray(obj);\r\n}\r\n\r\nfunction fieldsToFieldsConfig(fields) {\r\n  return mapValue(fields, (field) => ({\r\n    description: field.description,\r\n    type: field.type,\r\n    args: argsToArgsConfig(field.args),\r\n    resolve: field.resolve,\r\n    subscribe: field.subscribe,\r\n    deprecationReason: field.deprecationReason,\r\n    extensions: field.extensions,\r\n    astNode: field.astNode,\r\n  }));\r\n}\r\n/**\r\n * @internal\r\n */\r\n\r\nexport function argsToArgsConfig(args) {\r\n  return keyValMap(\r\n    args,\r\n    (arg) => arg.name,\r\n    (arg) => ({\r\n      description: arg.description,\r\n      type: arg.type,\r\n      defaultValue: arg.defaultValue,\r\n      deprecationReason: arg.deprecationReason,\r\n      extensions: arg.extensions,\r\n      astNode: arg.astNode,\r\n    }),\r\n  );\r\n}\r\nexport function isRequiredArgument(arg) {\r\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\r\n}\r\n\r\n/**\r\n * Interface Type Definition\r\n *\r\n * When a field can return one of a heterogeneous set of types, a Interface type\r\n * is used to describe what types are possible, what fields are in common across\r\n * all types, as well as a function to determine which type is actually used\r\n * when the field is resolved.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const EntityType = new GraphQLInterfaceType({\r\n *   name: 'Entity',\r\n *   fields: {\r\n *     name: { type: GraphQLString }\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport class GraphQLInterfaceType {\r\n  constructor(config) {\r\n    var _config$extensionASTN3;\r\n\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.resolveType = config.resolveType;\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    this.extensionASTNodes =\r\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\r\n      _config$extensionASTN3 !== void 0\r\n        ? _config$extensionASTN3\r\n        : [];\r\n    this._fields = defineFieldMap.bind(undefined, config);\r\n    this._interfaces = defineInterfaces.bind(undefined, config);\r\n    config.resolveType == null ||\r\n      typeof config.resolveType === 'function' ||\r\n      devAssert(\r\n        false,\r\n        `${this.name} must provide \"resolveType\" as a function, ` +\r\n          `but got: ${inspect(config.resolveType)}.`,\r\n      );\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLInterfaceType';\r\n  }\r\n\r\n  getFields() {\r\n    if (typeof this._fields === 'function') {\r\n      this._fields = this._fields();\r\n    }\r\n\r\n    return this._fields;\r\n  }\r\n\r\n  getInterfaces() {\r\n    if (typeof this._interfaces === 'function') {\r\n      this._interfaces = this._interfaces();\r\n    }\r\n\r\n    return this._interfaces;\r\n  }\r\n\r\n  toConfig() {\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      interfaces: this.getInterfaces(),\r\n      fields: fieldsToFieldsConfig(this.getFields()),\r\n      resolveType: this.resolveType,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n      extensionASTNodes: this.extensionASTNodes,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * Union Type Definition\r\n *\r\n * When a field can return one of a heterogeneous set of types, a Union type\r\n * is used to describe what types are possible as well as providing a function\r\n * to determine which type is actually used when the field is resolved.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const PetType = new GraphQLUnionType({\r\n *   name: 'Pet',\r\n *   types: [ DogType, CatType ],\r\n *   resolveType(value) {\r\n *     if (value instanceof Dog) {\r\n *       return DogType;\r\n *     }\r\n *     if (value instanceof Cat) {\r\n *       return CatType;\r\n *     }\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport class GraphQLUnionType {\r\n  constructor(config) {\r\n    var _config$extensionASTN4;\r\n\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.resolveType = config.resolveType;\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    this.extensionASTNodes =\r\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\r\n      _config$extensionASTN4 !== void 0\r\n        ? _config$extensionASTN4\r\n        : [];\r\n    this._types = defineTypes.bind(undefined, config);\r\n    config.resolveType == null ||\r\n      typeof config.resolveType === 'function' ||\r\n      devAssert(\r\n        false,\r\n        `${this.name} must provide \"resolveType\" as a function, ` +\r\n          `but got: ${inspect(config.resolveType)}.`,\r\n      );\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLUnionType';\r\n  }\r\n\r\n  getTypes() {\r\n    if (typeof this._types === 'function') {\r\n      this._types = this._types();\r\n    }\r\n\r\n    return this._types;\r\n  }\r\n\r\n  toConfig() {\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      types: this.getTypes(),\r\n      resolveType: this.resolveType,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n      extensionASTNodes: this.extensionASTNodes,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\nfunction defineTypes(config) {\r\n  const types = resolveReadonlyArrayThunk(config.types);\r\n  Array.isArray(types) ||\r\n    devAssert(\r\n      false,\r\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\r\n    );\r\n  return types;\r\n}\r\n\r\n/**\r\n * Enum Type Definition\r\n *\r\n * Some leaf values of requests and input values are Enums. GraphQL serializes\r\n * Enum values as strings, however internally Enums can be represented by any\r\n * kind of type, often integers.\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const RGBType = new GraphQLEnumType({\r\n *   name: 'RGB',\r\n *   values: {\r\n *     RED: { value: 0 },\r\n *     GREEN: { value: 1 },\r\n *     BLUE: { value: 2 }\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Note: If a value is not provided in a definition, the name of the enum value\r\n * will be used as its internal value.\r\n */\r\nexport class GraphQLEnumType {\r\n  /* <T> */\r\n  constructor(config) {\r\n    var _config$extensionASTN5;\r\n\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    this.extensionASTNodes =\r\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\r\n      _config$extensionASTN5 !== void 0\r\n        ? _config$extensionASTN5\r\n        : [];\r\n    this._values = defineEnumValues(this.name, config.values);\r\n    this._valueLookup = new Map(\r\n      this._values.map((enumValue) => [enumValue.value, enumValue]),\r\n    );\r\n    this._nameLookup = keyMap(this._values, (value) => value.name);\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLEnumType';\r\n  }\r\n\r\n  getValues() {\r\n    return this._values;\r\n  }\r\n\r\n  getValue(name) {\r\n    return this._nameLookup[name];\r\n  }\r\n\r\n  serialize(outputValue) {\r\n    const enumValue = this._valueLookup.get(outputValue);\r\n\r\n    if (enumValue === undefined) {\r\n      throw new GraphQLError(\r\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\r\n      );\r\n    }\r\n\r\n    return enumValue.name;\r\n  }\r\n\r\n  parseValue(inputValue) /* T */\r\n  {\r\n    if (typeof inputValue !== 'string') {\r\n      const valueStr = inspect(inputValue);\r\n      throw new GraphQLError(\r\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\r\n          didYouMeanEnumValue(this, valueStr),\r\n      );\r\n    }\r\n\r\n    const enumValue = this.getValue(inputValue);\r\n\r\n    if (enumValue == null) {\r\n      throw new GraphQLError(\r\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\r\n          didYouMeanEnumValue(this, inputValue),\r\n      );\r\n    }\r\n\r\n    return enumValue.value;\r\n  }\r\n\r\n  parseLiteral(valueNode, _variables) /* T */\r\n  {\r\n    // Note: variables will be resolved to a value before calling this function.\r\n    if (valueNode.kind !== Kind.ENUM) {\r\n      const valueStr = print(valueNode);\r\n      throw new GraphQLError(\r\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\r\n          didYouMeanEnumValue(this, valueStr),\r\n        {\r\n          nodes: valueNode,\r\n        },\r\n      );\r\n    }\r\n\r\n    const enumValue = this.getValue(valueNode.value);\r\n\r\n    if (enumValue == null) {\r\n      const valueStr = print(valueNode);\r\n      throw new GraphQLError(\r\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\r\n          didYouMeanEnumValue(this, valueStr),\r\n        {\r\n          nodes: valueNode,\r\n        },\r\n      );\r\n    }\r\n\r\n    return enumValue.value;\r\n  }\r\n\r\n  toConfig() {\r\n    const values = keyValMap(\r\n      this.getValues(),\r\n      (value) => value.name,\r\n      (value) => ({\r\n        description: value.description,\r\n        value: value.value,\r\n        deprecationReason: value.deprecationReason,\r\n        extensions: value.extensions,\r\n        astNode: value.astNode,\r\n      }),\r\n    );\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      values,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n      extensionASTNodes: this.extensionASTNodes,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\r\n  const allNames = enumType.getValues().map((value) => value.name);\r\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\r\n  return didYouMean('the enum value', suggestedValues);\r\n}\r\n\r\nfunction defineEnumValues(typeName, valueMap) {\r\n  isPlainObj(valueMap) ||\r\n    devAssert(\r\n      false,\r\n      `${typeName} values must be an object with value names as keys.`,\r\n    );\r\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\r\n    isPlainObj(valueConfig) ||\r\n      devAssert(\r\n        false,\r\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\r\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\r\n      );\r\n    return {\r\n      name: assertEnumValueName(valueName),\r\n      description: valueConfig.description,\r\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\r\n      deprecationReason: valueConfig.deprecationReason,\r\n      extensions: toObjMap(valueConfig.extensions),\r\n      astNode: valueConfig.astNode,\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Input Object Type Definition\r\n *\r\n * An input object defines a structured collection of fields which may be\r\n * supplied to a field argument.\r\n *\r\n * Using `NonNull` will ensure that a value must be provided by the query\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const GeoPoint = new GraphQLInputObjectType({\r\n *   name: 'GeoPoint',\r\n *   fields: {\r\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\r\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\r\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport class GraphQLInputObjectType {\r\n  constructor(config) {\r\n    var _config$extensionASTN6;\r\n\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    this.extensionASTNodes =\r\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\r\n      _config$extensionASTN6 !== void 0\r\n        ? _config$extensionASTN6\r\n        : [];\r\n    this._fields = defineInputFieldMap.bind(undefined, config);\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLInputObjectType';\r\n  }\r\n\r\n  getFields() {\r\n    if (typeof this._fields === 'function') {\r\n      this._fields = this._fields();\r\n    }\r\n\r\n    return this._fields;\r\n  }\r\n\r\n  toConfig() {\r\n    const fields = mapValue(this.getFields(), (field) => ({\r\n      description: field.description,\r\n      type: field.type,\r\n      defaultValue: field.defaultValue,\r\n      deprecationReason: field.deprecationReason,\r\n      extensions: field.extensions,\r\n      astNode: field.astNode,\r\n    }));\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      fields,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n      extensionASTNodes: this.extensionASTNodes,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\nfunction defineInputFieldMap(config) {\r\n  const fieldMap = resolveObjMapThunk(config.fields);\r\n  isPlainObj(fieldMap) ||\r\n    devAssert(\r\n      false,\r\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\r\n    );\r\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\r\n    !('resolve' in fieldConfig) ||\r\n      devAssert(\r\n        false,\r\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\r\n      );\r\n    return {\r\n      name: assertName(fieldName),\r\n      description: fieldConfig.description,\r\n      type: fieldConfig.type,\r\n      defaultValue: fieldConfig.defaultValue,\r\n      deprecationReason: fieldConfig.deprecationReason,\r\n      extensions: toObjMap(fieldConfig.extensions),\r\n      astNode: fieldConfig.astNode,\r\n    };\r\n  });\r\n}\r\n\r\nexport function isRequiredInputField(field) {\r\n  return isNonNullType(field.type) && field.defaultValue === undefined;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}