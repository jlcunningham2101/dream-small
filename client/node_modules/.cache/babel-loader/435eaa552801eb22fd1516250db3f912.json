{"ast":null,"code":"import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\r\n * Sort ValueNode.\r\n *\r\n * This function returns a sorted copy of the given ValueNode.\r\n *\r\n * @internal\r\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode,\n        fields: sortFields(valueNode.fields)\n      };\n\n    case Kind.LIST:\n      return { ...valueNode,\n        values: valueNode.values.map(sortValueNode)\n      };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields.map(fieldNode => ({ ...fieldNode,\n    value: sortValueNode(fieldNode.value)\n  })).sort((fieldA, fieldB) => naturalCompare(fieldA.name.value, fieldB.name.value));\n}","map":{"version":3,"names":["naturalCompare","Kind","sortValueNode","valueNode","kind","OBJECT","fields","sortFields","LIST","values","map","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","VARIABLE","fieldNode","value","sort","fieldA","fieldB","name"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/utilities/sortValueNode.mjs"],"sourcesContent":["import { naturalCompare } from '../jsutils/naturalCompare.mjs';\r\nimport { Kind } from '../language/kinds.mjs';\r\n/**\r\n * Sort ValueNode.\r\n *\r\n * This function returns a sorted copy of the given ValueNode.\r\n *\r\n * @internal\r\n */\r\n\r\nexport function sortValueNode(valueNode) {\r\n  switch (valueNode.kind) {\r\n    case Kind.OBJECT:\r\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\r\n\r\n    case Kind.LIST:\r\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\r\n\r\n    case Kind.INT:\r\n    case Kind.FLOAT:\r\n    case Kind.STRING:\r\n    case Kind.BOOLEAN:\r\n    case Kind.NULL:\r\n    case Kind.ENUM:\r\n    case Kind.VARIABLE:\r\n      return valueNode;\r\n  }\r\n}\r\n\r\nfunction sortFields(fields) {\r\n  return fields\r\n    .map((fieldNode) => ({\r\n      ...fieldNode,\r\n      value: sortValueNode(fieldNode.value),\r\n    }))\r\n    .sort((fieldA, fieldB) =>\r\n      naturalCompare(fieldA.name.value, fieldB.name.value),\r\n    );\r\n}\r\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,+BAA/B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;EACvC,QAAQA,SAAS,CAACC,IAAlB;IACE,KAAKH,IAAI,CAACI,MAAV;MACE,OAAO,EAAE,GAAGF,SAAL;QAAgBG,MAAM,EAAEC,UAAU,CAACJ,SAAS,CAACG,MAAX;MAAlC,CAAP;;IAEF,KAAKL,IAAI,CAACO,IAAV;MACE,OAAO,EAAE,GAAGL,SAAL;QAAgBM,MAAM,EAAEN,SAAS,CAACM,MAAV,CAAiBC,GAAjB,CAAqBR,aAArB;MAAxB,CAAP;;IAEF,KAAKD,IAAI,CAACU,GAAV;IACA,KAAKV,IAAI,CAACW,KAAV;IACA,KAAKX,IAAI,CAACY,MAAV;IACA,KAAKZ,IAAI,CAACa,OAAV;IACA,KAAKb,IAAI,CAACc,IAAV;IACA,KAAKd,IAAI,CAACe,IAAV;IACA,KAAKf,IAAI,CAACgB,QAAV;MACE,OAAOd,SAAP;EAdJ;AAgBD;;AAED,SAASI,UAAT,CAAoBD,MAApB,EAA4B;EAC1B,OAAOA,MAAM,CACVI,GADI,CACCQ,SAAD,KAAgB,EACnB,GAAGA,SADgB;IAEnBC,KAAK,EAAEjB,aAAa,CAACgB,SAAS,CAACC,KAAX;EAFD,CAAhB,CADA,EAKJC,IALI,CAKC,CAACC,MAAD,EAASC,MAAT,KACJtB,cAAc,CAACqB,MAAM,CAACE,IAAP,CAAYJ,KAAb,EAAoBG,MAAM,CAACC,IAAP,CAAYJ,KAAhC,CANX,CAAP;AAQD"},"metadata":{},"sourceType":"module"}