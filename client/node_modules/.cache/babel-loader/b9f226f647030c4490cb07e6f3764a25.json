{"ast":null,"code":"import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\r\n * Configuration options to control parser behavior\r\n */\n\n/**\r\n * Given a GraphQL source, parses it into a Document.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n */\n\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\r\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\r\n * that value.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Values directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: valueFromAST().\r\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\r\n * Similar to parseValue(), but raises a parse error if it encounters a\r\n * variable. The return type will be a constant value.\r\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\r\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\r\n * that type.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Types directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: typeFromAST().\r\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\r\n * This class is exported only to assist people in implementing their own parsers\r\n * without duplicating too much code and should be used only as last resort for cases\r\n * such as experimental syntax or if certain features could not be contributed upstream.\r\n *\r\n * It is still part of the internal API and is versioned, so any changes to it are never\r\n * considered breaking changes. If you still need to support multiple versions of the\r\n * library, please use the `versionInfo` variable for version detection.\r\n *\r\n * @internal\r\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\r\n   * Converts a name lex token into a name parse node.\r\n   */\n\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\r\n   * Document : Definition+\r\n   */\n\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF)\n    });\n  }\n  /**\r\n   * Definition :\r\n   *   - ExecutableDefinition\r\n   *   - TypeSystemDefinition\r\n   *   - TypeSystemExtension\r\n   *\r\n   * ExecutableDefinition :\r\n   *   - OperationDefinition\r\n   *   - FragmentDefinition\r\n   *\r\n   * TypeSystemDefinition :\r\n   *   - SchemaDefinition\r\n   *   - TypeDefinition\r\n   *   - DirectiveDefinition\r\n   *\r\n   * TypeDefinition :\r\n   *   - ScalarTypeDefinition\r\n   *   - ObjectTypeDefinition\r\n   *   - InterfaceTypeDefinition\r\n   *   - UnionTypeDefinition\r\n   *   - EnumTypeDefinition\r\n   *   - InputObjectTypeDefinition\r\n   */\n\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\r\n   * OperationDefinition :\r\n   *  - SelectionSet\r\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\r\n   */\n\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\r\n   * OperationType : one of query mutation subscription\r\n   */\n\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\r\n   * VariableDefinitions : ( VariableDefinition+ )\r\n   */\n\n\n  parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\r\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\r\n   */\n\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,\n      directives: this.parseConstDirectives()\n    });\n  }\n  /**\r\n   * Variable : $ Name\r\n   */\n\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName()\n    });\n  }\n  /**\r\n   * ```\r\n   * SelectionSet : { Selection+ }\r\n   * ```\r\n   */\n\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R)\n    });\n  }\n  /**\r\n   * Selection :\r\n   *   - Field\r\n   *   - FragmentSpread\r\n   *   - InlineFragment\r\n   */\n\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\r\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\r\n   *\r\n   * Alias : Name :\r\n   */\n\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined\n    });\n  }\n  /**\r\n   * Arguments[Const] : ( Argument[?Const]+ )\r\n   */\n\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\r\n   * Argument[Const] : Name : Value[?Const]\r\n   */\n\n\n  parseArgument() {\n    let isConst = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst)\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\r\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\r\n   *\r\n   * FragmentSpread : ... FragmentName Directives?\r\n   *\r\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\r\n   */\n\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false)\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\r\n   * FragmentDefinition :\r\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\r\n   *\r\n   * TypeCondition : NamedType\r\n   */\n\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.allowLegacyFragmentVariables) === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\r\n   * FragmentName : Name but not `on`\r\n   */\n\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\r\n   * Value[Const] :\r\n   *   - [~Const] Variable\r\n   *   - IntValue\r\n   *   - FloatValue\r\n   *   - StringValue\r\n   *   - BooleanValue\r\n   *   - NullValue\r\n   *   - EnumValue\r\n   *   - ListValue[?Const]\r\n   *   - ObjectValue[?Const]\r\n   *\r\n   * BooleanValue : one of `true` `false`\r\n   *\r\n   * NullValue : `null`\r\n   *\r\n   * EnumValue : Name but not `true`, `false` or `null`\r\n   */\n\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(this._lexer.source, token.start, `Unexpected variable \"$${varName}\" in constant value.`);\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING\n    });\n  }\n  /**\r\n   * ListValue[Const] :\r\n   *   - [ ]\r\n   *   - [ Value[?Const]+ ]\r\n   */\n\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)\n    });\n  }\n  /**\r\n   * ```\r\n   * ObjectValue[Const] :\r\n   *   - { }\r\n   *   - { ObjectField[?Const]+ }\r\n   * ```\r\n   */\n\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)\n    });\n  }\n  /**\r\n   * ObjectField[Const] : Name : Value[?Const]\r\n   */\n\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst)\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\r\n   * Directives[Const] : Directive[?Const]+\r\n   */\n\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\r\n   * ```\r\n   * Directive[Const] : @ Name Arguments[?Const]?\r\n   * ```\r\n   */\n\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst)\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\r\n   * Type :\r\n   *   - NamedType\r\n   *   - ListType\r\n   *   - NonNullType\r\n   */\n\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type\n      });\n    }\n\n    return type;\n  }\n  /**\r\n   * NamedType : Name\r\n   */\n\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName()\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\r\n   * Description : StringValue\r\n   */\n\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\r\n   * ```\r\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\r\n   * ```\r\n   */\n\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes\n    });\n  }\n  /**\r\n   * OperationTypeDefinition : OperationType : NamedType\r\n   */\n\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type\n    });\n  }\n  /**\r\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\r\n   */\n\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives\n    });\n  }\n  /**\r\n   * ObjectTypeDefinition :\r\n   *   Description?\r\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\r\n   */\n\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\r\n   * ImplementsInterfaces :\r\n   *   - implements `&`? NamedType\r\n   *   - ImplementsInterfaces & NamedType\r\n   */\n\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements') ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];\n  }\n  /**\r\n   * ```\r\n   * FieldsDefinition : { FieldDefinition+ }\r\n   * ```\r\n   */\n\n\n  parseFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\r\n   * FieldDefinition :\r\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\r\n   */\n\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives\n    });\n  }\n  /**\r\n   * ArgumentsDefinition : ( InputValueDefinition+ )\r\n   */\n\n\n  parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\r\n   * InputValueDefinition :\r\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\r\n   */\n\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives\n    });\n  }\n  /**\r\n   * InterfaceTypeDefinition :\r\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\r\n   */\n\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\r\n   * UnionTypeDefinition :\r\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\r\n   */\n\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types\n    });\n  }\n  /**\r\n   * UnionMemberTypes :\r\n   *   - = `|`? NamedType\r\n   *   - UnionMemberTypes | NamedType\r\n   */\n\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\r\n   * EnumTypeDefinition :\r\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\r\n   */\n\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values\n    });\n  }\n  /**\r\n   * ```\r\n   * EnumValuesDefinition : { EnumValueDefinition+ }\r\n   * ```\r\n   */\n\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\r\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\r\n   */\n\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives\n    });\n  }\n  /**\r\n   * EnumValue : Name but not `true`, `false` or `null`\r\n   */\n\n\n  parseEnumValueName() {\n    if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {\n      throw syntaxError(this._lexer.source, this._lexer.token.start, `${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);\n    }\n\n    return this.parseName();\n  }\n  /**\r\n   * InputObjectTypeDefinition :\r\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\r\n   */\n\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields\n    });\n  }\n  /**\r\n   * ```\r\n   * InputFieldsDefinition : { InputValueDefinition+ }\r\n   * ```\r\n   */\n\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\r\n   * TypeSystemExtension :\r\n   *   - SchemaExtension\r\n   *   - TypeExtension\r\n   *\r\n   * TypeExtension :\r\n   *   - ScalarTypeExtension\r\n   *   - ObjectTypeExtension\r\n   *   - InterfaceTypeExtension\r\n   *   - UnionTypeExtension\r\n   *   - EnumTypeExtension\r\n   *   - InputObjectTypeDefinition\r\n   */\n\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\r\n   * ```\r\n   * SchemaExtension :\r\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\r\n   *  - extend schema Directives[Const]\r\n   * ```\r\n   */\n\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes\n    });\n  }\n  /**\r\n   * ScalarTypeExtension :\r\n   *   - extend scalar Name Directives[Const]\r\n   */\n\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives\n    });\n  }\n  /**\r\n   * ObjectTypeExtension :\r\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\r\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\r\n   *  - extend type Name ImplementsInterfaces\r\n   */\n\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\r\n   * InterfaceTypeExtension :\r\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\r\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\r\n   *  - extend interface Name ImplementsInterfaces\r\n   */\n\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\r\n   * UnionTypeExtension :\r\n   *   - extend union Name Directives[Const]? UnionMemberTypes\r\n   *   - extend union Name Directives[Const]\r\n   */\n\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types\n    });\n  }\n  /**\r\n   * EnumTypeExtension :\r\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\r\n   *   - extend enum Name Directives[Const]\r\n   */\n\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values\n    });\n  }\n  /**\r\n   * InputObjectTypeExtension :\r\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\r\n   *   - extend input Name Directives[Const]\r\n   */\n\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields\n    });\n  }\n  /**\r\n   * ```\r\n   * DirectiveDefinition :\r\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\r\n   * ```\r\n   */\n\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations\n    });\n  }\n  /**\r\n   * DirectiveLocations :\r\n   *   - `|`? DirectiveLocation\r\n   *   - DirectiveLocations | DirectiveLocation\r\n   */\n\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\r\n   * DirectiveLocation :\r\n   *   - ExecutableDirectiveLocation\r\n   *   - TypeSystemDirectiveLocation\r\n   *\r\n   * ExecutableDirectiveLocation : one of\r\n   *   `QUERY`\r\n   *   `MUTATION`\r\n   *   `SUBSCRIPTION`\r\n   *   `FIELD`\r\n   *   `FRAGMENT_DEFINITION`\r\n   *   `FRAGMENT_SPREAD`\r\n   *   `INLINE_FRAGMENT`\r\n   *\r\n   * TypeSystemDirectiveLocation : one of\r\n   *   `SCHEMA`\r\n   *   `SCALAR`\r\n   *   `OBJECT`\r\n   *   `FIELD_DEFINITION`\r\n   *   `ARGUMENT_DEFINITION`\r\n   *   `INTERFACE`\r\n   *   `UNION`\r\n   *   `ENUM`\r\n   *   `ENUM_VALUE`\r\n   *   `INPUT_OBJECT`\r\n   *   `INPUT_FIELD_DEFINITION`\r\n   */\n\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\r\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\r\n   * location object, used to identify the place in the source that created a\r\n   * given parsed object.\r\n   */\n\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.noLocation) !== true) {\n      node.loc = new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n\n    return node;\n  }\n  /**\r\n   * Determines if the next token is of a given kind\r\n   */\n\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\r\n   * If the next token is of the given kind, return that token after advancing the lexer.\r\n   * Otherwise, do not change the parser state and throw an error.\r\n   */\n\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);\n  }\n  /**\r\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\r\n   * Otherwise, do not change the parser state and return \"false\".\r\n   */\n\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * If the next token is a given keyword, advance the lexer.\r\n   * Otherwise, do not change the parser state and throw an error.\r\n   */\n\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, `Expected \"${value}\", found ${getTokenDesc(token)}.`);\n    }\n  }\n  /**\r\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\r\n   * Otherwise, do not change the parser state and return \"false\".\r\n   */\n\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * Helper function for creating an error when an unexpected lexed token is encountered.\r\n   */\n\n\n  unexpected(atToken) {\n    const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);\n  }\n  /**\r\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\r\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\r\n   * Advances the parser to the next lex token after the closing token.\r\n   */\n\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\r\n   * Returns a list of parse nodes, determined by the parseFn.\r\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\r\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\r\n   * Advances the parser to the next lex token after the closing token.\r\n   */\n\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\r\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\r\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\r\n   * Advances the parser to the next lex token after the closing token.\r\n   */\n\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\r\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\r\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\r\n   * Advances the parser to the next lex token after last item in the list.\r\n   */\n\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n}\n/**\r\n * A helper function to describe a token as a string for debugging.\r\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\r\n * A helper function to describe a token kind as a string for debugging.\r\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}","map":{"version":3,"names":["syntaxError","Location","OperationTypeNode","DirectiveLocation","Kind","isPunctuatorTokenKind","Lexer","isSource","Source","TokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseConstValue","parseConstValueLiteral","parseType","type","parseTypeReference","constructor","sourceObj","_lexer","_options","parseName","token","NAME","node","kind","DOCUMENT","definitions","many","parseDefinition","peek","BRACE_L","parseOperationDefinition","hasDescription","peekDescription","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","start","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","operation","QUERY","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","parseConstDirectives","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advance","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","BRACKET_R","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","innerType","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","parseDescription","description","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","AMP","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","Object","prototype","hasOwnProperty","call","startToken","_this$_options2","noLocation","loc","lastToken","getTokenKindDesc","atToken","openKind","parseFn","closeKind","nodes","delimiterKind"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/language/parser.mjs"],"sourcesContent":["import { syntaxError } from '../error/syntaxError.mjs';\r\nimport { Location, OperationTypeNode } from './ast.mjs';\r\nimport { DirectiveLocation } from './directiveLocation.mjs';\r\nimport { Kind } from './kinds.mjs';\r\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\r\nimport { isSource, Source } from './source.mjs';\r\nimport { TokenKind } from './tokenKind.mjs';\r\n/**\r\n * Configuration options to control parser behavior\r\n */\r\n\r\n/**\r\n * Given a GraphQL source, parses it into a Document.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n */\r\nexport function parse(source, options) {\r\n  const parser = new Parser(source, options);\r\n  return parser.parseDocument();\r\n}\r\n/**\r\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\r\n * that value.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Values directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: valueFromAST().\r\n */\r\n\r\nexport function parseValue(source, options) {\r\n  const parser = new Parser(source, options);\r\n  parser.expectToken(TokenKind.SOF);\r\n  const value = parser.parseValueLiteral(false);\r\n  parser.expectToken(TokenKind.EOF);\r\n  return value;\r\n}\r\n/**\r\n * Similar to parseValue(), but raises a parse error if it encounters a\r\n * variable. The return type will be a constant value.\r\n */\r\n\r\nexport function parseConstValue(source, options) {\r\n  const parser = new Parser(source, options);\r\n  parser.expectToken(TokenKind.SOF);\r\n  const value = parser.parseConstValueLiteral();\r\n  parser.expectToken(TokenKind.EOF);\r\n  return value;\r\n}\r\n/**\r\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\r\n * that type.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Types directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: typeFromAST().\r\n */\r\n\r\nexport function parseType(source, options) {\r\n  const parser = new Parser(source, options);\r\n  parser.expectToken(TokenKind.SOF);\r\n  const type = parser.parseTypeReference();\r\n  parser.expectToken(TokenKind.EOF);\r\n  return type;\r\n}\r\n/**\r\n * This class is exported only to assist people in implementing their own parsers\r\n * without duplicating too much code and should be used only as last resort for cases\r\n * such as experimental syntax or if certain features could not be contributed upstream.\r\n *\r\n * It is still part of the internal API and is versioned, so any changes to it are never\r\n * considered breaking changes. If you still need to support multiple versions of the\r\n * library, please use the `versionInfo` variable for version detection.\r\n *\r\n * @internal\r\n */\r\n\r\nexport class Parser {\r\n  constructor(source, options) {\r\n    const sourceObj = isSource(source) ? source : new Source(source);\r\n    this._lexer = new Lexer(sourceObj);\r\n    this._options = options;\r\n  }\r\n  /**\r\n   * Converts a name lex token into a name parse node.\r\n   */\r\n\r\n  parseName() {\r\n    const token = this.expectToken(TokenKind.NAME);\r\n    return this.node(token, {\r\n      kind: Kind.NAME,\r\n      value: token.value,\r\n    });\r\n  } // Implements the parsing rules in the Document section.\r\n\r\n  /**\r\n   * Document : Definition+\r\n   */\r\n\r\n  parseDocument() {\r\n    return this.node(this._lexer.token, {\r\n      kind: Kind.DOCUMENT,\r\n      definitions: this.many(\r\n        TokenKind.SOF,\r\n        this.parseDefinition,\r\n        TokenKind.EOF,\r\n      ),\r\n    });\r\n  }\r\n  /**\r\n   * Definition :\r\n   *   - ExecutableDefinition\r\n   *   - TypeSystemDefinition\r\n   *   - TypeSystemExtension\r\n   *\r\n   * ExecutableDefinition :\r\n   *   - OperationDefinition\r\n   *   - FragmentDefinition\r\n   *\r\n   * TypeSystemDefinition :\r\n   *   - SchemaDefinition\r\n   *   - TypeDefinition\r\n   *   - DirectiveDefinition\r\n   *\r\n   * TypeDefinition :\r\n   *   - ScalarTypeDefinition\r\n   *   - ObjectTypeDefinition\r\n   *   - InterfaceTypeDefinition\r\n   *   - UnionTypeDefinition\r\n   *   - EnumTypeDefinition\r\n   *   - InputObjectTypeDefinition\r\n   */\r\n\r\n  parseDefinition() {\r\n    if (this.peek(TokenKind.BRACE_L)) {\r\n      return this.parseOperationDefinition();\r\n    } // Many definitions begin with a description and require a lookahead.\r\n\r\n    const hasDescription = this.peekDescription();\r\n    const keywordToken = hasDescription\r\n      ? this._lexer.lookahead()\r\n      : this._lexer.token;\r\n\r\n    if (keywordToken.kind === TokenKind.NAME) {\r\n      switch (keywordToken.value) {\r\n        case 'schema':\r\n          return this.parseSchemaDefinition();\r\n\r\n        case 'scalar':\r\n          return this.parseScalarTypeDefinition();\r\n\r\n        case 'type':\r\n          return this.parseObjectTypeDefinition();\r\n\r\n        case 'interface':\r\n          return this.parseInterfaceTypeDefinition();\r\n\r\n        case 'union':\r\n          return this.parseUnionTypeDefinition();\r\n\r\n        case 'enum':\r\n          return this.parseEnumTypeDefinition();\r\n\r\n        case 'input':\r\n          return this.parseInputObjectTypeDefinition();\r\n\r\n        case 'directive':\r\n          return this.parseDirectiveDefinition();\r\n      }\r\n\r\n      if (hasDescription) {\r\n        throw syntaxError(\r\n          this._lexer.source,\r\n          this._lexer.token.start,\r\n          'Unexpected description, descriptions are supported only on type definitions.',\r\n        );\r\n      }\r\n\r\n      switch (keywordToken.value) {\r\n        case 'query':\r\n        case 'mutation':\r\n        case 'subscription':\r\n          return this.parseOperationDefinition();\r\n\r\n        case 'fragment':\r\n          return this.parseFragmentDefinition();\r\n\r\n        case 'extend':\r\n          return this.parseTypeSystemExtension();\r\n      }\r\n    }\r\n\r\n    throw this.unexpected(keywordToken);\r\n  } // Implements the parsing rules in the Operations section.\r\n\r\n  /**\r\n   * OperationDefinition :\r\n   *  - SelectionSet\r\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\r\n   */\r\n\r\n  parseOperationDefinition() {\r\n    const start = this._lexer.token;\r\n\r\n    if (this.peek(TokenKind.BRACE_L)) {\r\n      return this.node(start, {\r\n        kind: Kind.OPERATION_DEFINITION,\r\n        operation: OperationTypeNode.QUERY,\r\n        name: undefined,\r\n        variableDefinitions: [],\r\n        directives: [],\r\n        selectionSet: this.parseSelectionSet(),\r\n      });\r\n    }\r\n\r\n    const operation = this.parseOperationType();\r\n    let name;\r\n\r\n    if (this.peek(TokenKind.NAME)) {\r\n      name = this.parseName();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.OPERATION_DEFINITION,\r\n      operation,\r\n      name,\r\n      variableDefinitions: this.parseVariableDefinitions(),\r\n      directives: this.parseDirectives(false),\r\n      selectionSet: this.parseSelectionSet(),\r\n    });\r\n  }\r\n  /**\r\n   * OperationType : one of query mutation subscription\r\n   */\r\n\r\n  parseOperationType() {\r\n    const operationToken = this.expectToken(TokenKind.NAME);\r\n\r\n    switch (operationToken.value) {\r\n      case 'query':\r\n        return OperationTypeNode.QUERY;\r\n\r\n      case 'mutation':\r\n        return OperationTypeNode.MUTATION;\r\n\r\n      case 'subscription':\r\n        return OperationTypeNode.SUBSCRIPTION;\r\n    }\r\n\r\n    throw this.unexpected(operationToken);\r\n  }\r\n  /**\r\n   * VariableDefinitions : ( VariableDefinition+ )\r\n   */\r\n\r\n  parseVariableDefinitions() {\r\n    return this.optionalMany(\r\n      TokenKind.PAREN_L,\r\n      this.parseVariableDefinition,\r\n      TokenKind.PAREN_R,\r\n    );\r\n  }\r\n  /**\r\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\r\n   */\r\n\r\n  parseVariableDefinition() {\r\n    return this.node(this._lexer.token, {\r\n      kind: Kind.VARIABLE_DEFINITION,\r\n      variable: this.parseVariable(),\r\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\r\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\r\n        ? this.parseConstValueLiteral()\r\n        : undefined,\r\n      directives: this.parseConstDirectives(),\r\n    });\r\n  }\r\n  /**\r\n   * Variable : $ Name\r\n   */\r\n\r\n  parseVariable() {\r\n    const start = this._lexer.token;\r\n    this.expectToken(TokenKind.DOLLAR);\r\n    return this.node(start, {\r\n      kind: Kind.VARIABLE,\r\n      name: this.parseName(),\r\n    });\r\n  }\r\n  /**\r\n   * ```\r\n   * SelectionSet : { Selection+ }\r\n   * ```\r\n   */\r\n\r\n  parseSelectionSet() {\r\n    return this.node(this._lexer.token, {\r\n      kind: Kind.SELECTION_SET,\r\n      selections: this.many(\r\n        TokenKind.BRACE_L,\r\n        this.parseSelection,\r\n        TokenKind.BRACE_R,\r\n      ),\r\n    });\r\n  }\r\n  /**\r\n   * Selection :\r\n   *   - Field\r\n   *   - FragmentSpread\r\n   *   - InlineFragment\r\n   */\r\n\r\n  parseSelection() {\r\n    return this.peek(TokenKind.SPREAD)\r\n      ? this.parseFragment()\r\n      : this.parseField();\r\n  }\r\n  /**\r\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\r\n   *\r\n   * Alias : Name :\r\n   */\r\n\r\n  parseField() {\r\n    const start = this._lexer.token;\r\n    const nameOrAlias = this.parseName();\r\n    let alias;\r\n    let name;\r\n\r\n    if (this.expectOptionalToken(TokenKind.COLON)) {\r\n      alias = nameOrAlias;\r\n      name = this.parseName();\r\n    } else {\r\n      name = nameOrAlias;\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.FIELD,\r\n      alias,\r\n      name,\r\n      arguments: this.parseArguments(false),\r\n      directives: this.parseDirectives(false),\r\n      selectionSet: this.peek(TokenKind.BRACE_L)\r\n        ? this.parseSelectionSet()\r\n        : undefined,\r\n    });\r\n  }\r\n  /**\r\n   * Arguments[Const] : ( Argument[?Const]+ )\r\n   */\r\n\r\n  parseArguments(isConst) {\r\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\r\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\r\n  }\r\n  /**\r\n   * Argument[Const] : Name : Value[?Const]\r\n   */\r\n\r\n  parseArgument(isConst = false) {\r\n    const start = this._lexer.token;\r\n    const name = this.parseName();\r\n    this.expectToken(TokenKind.COLON);\r\n    return this.node(start, {\r\n      kind: Kind.ARGUMENT,\r\n      name,\r\n      value: this.parseValueLiteral(isConst),\r\n    });\r\n  }\r\n\r\n  parseConstArgument() {\r\n    return this.parseArgument(true);\r\n  } // Implements the parsing rules in the Fragments section.\r\n\r\n  /**\r\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\r\n   *\r\n   * FragmentSpread : ... FragmentName Directives?\r\n   *\r\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\r\n   */\r\n\r\n  parseFragment() {\r\n    const start = this._lexer.token;\r\n    this.expectToken(TokenKind.SPREAD);\r\n    const hasTypeCondition = this.expectOptionalKeyword('on');\r\n\r\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\r\n      return this.node(start, {\r\n        kind: Kind.FRAGMENT_SPREAD,\r\n        name: this.parseFragmentName(),\r\n        directives: this.parseDirectives(false),\r\n      });\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.INLINE_FRAGMENT,\r\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\r\n      directives: this.parseDirectives(false),\r\n      selectionSet: this.parseSelectionSet(),\r\n    });\r\n  }\r\n  /**\r\n   * FragmentDefinition :\r\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\r\n   *\r\n   * TypeCondition : NamedType\r\n   */\r\n\r\n  parseFragmentDefinition() {\r\n    var _this$_options;\r\n\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\r\n    // the grammar of FragmentDefinition:\r\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\r\n\r\n    if (\r\n      ((_this$_options = this._options) === null || _this$_options === void 0\r\n        ? void 0\r\n        : _this$_options.allowLegacyFragmentVariables) === true\r\n    ) {\r\n      return this.node(start, {\r\n        kind: Kind.FRAGMENT_DEFINITION,\r\n        name: this.parseFragmentName(),\r\n        variableDefinitions: this.parseVariableDefinitions(),\r\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\r\n        directives: this.parseDirectives(false),\r\n        selectionSet: this.parseSelectionSet(),\r\n      });\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.FRAGMENT_DEFINITION,\r\n      name: this.parseFragmentName(),\r\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\r\n      directives: this.parseDirectives(false),\r\n      selectionSet: this.parseSelectionSet(),\r\n    });\r\n  }\r\n  /**\r\n   * FragmentName : Name but not `on`\r\n   */\r\n\r\n  parseFragmentName() {\r\n    if (this._lexer.token.value === 'on') {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.parseName();\r\n  } // Implements the parsing rules in the Values section.\r\n\r\n  /**\r\n   * Value[Const] :\r\n   *   - [~Const] Variable\r\n   *   - IntValue\r\n   *   - FloatValue\r\n   *   - StringValue\r\n   *   - BooleanValue\r\n   *   - NullValue\r\n   *   - EnumValue\r\n   *   - ListValue[?Const]\r\n   *   - ObjectValue[?Const]\r\n   *\r\n   * BooleanValue : one of `true` `false`\r\n   *\r\n   * NullValue : `null`\r\n   *\r\n   * EnumValue : Name but not `true`, `false` or `null`\r\n   */\r\n\r\n  parseValueLiteral(isConst) {\r\n    const token = this._lexer.token;\r\n\r\n    switch (token.kind) {\r\n      case TokenKind.BRACKET_L:\r\n        return this.parseList(isConst);\r\n\r\n      case TokenKind.BRACE_L:\r\n        return this.parseObject(isConst);\r\n\r\n      case TokenKind.INT:\r\n        this._lexer.advance();\r\n\r\n        return this.node(token, {\r\n          kind: Kind.INT,\r\n          value: token.value,\r\n        });\r\n\r\n      case TokenKind.FLOAT:\r\n        this._lexer.advance();\r\n\r\n        return this.node(token, {\r\n          kind: Kind.FLOAT,\r\n          value: token.value,\r\n        });\r\n\r\n      case TokenKind.STRING:\r\n      case TokenKind.BLOCK_STRING:\r\n        return this.parseStringLiteral();\r\n\r\n      case TokenKind.NAME:\r\n        this._lexer.advance();\r\n\r\n        switch (token.value) {\r\n          case 'true':\r\n            return this.node(token, {\r\n              kind: Kind.BOOLEAN,\r\n              value: true,\r\n            });\r\n\r\n          case 'false':\r\n            return this.node(token, {\r\n              kind: Kind.BOOLEAN,\r\n              value: false,\r\n            });\r\n\r\n          case 'null':\r\n            return this.node(token, {\r\n              kind: Kind.NULL,\r\n            });\r\n\r\n          default:\r\n            return this.node(token, {\r\n              kind: Kind.ENUM,\r\n              value: token.value,\r\n            });\r\n        }\r\n\r\n      case TokenKind.DOLLAR:\r\n        if (isConst) {\r\n          this.expectToken(TokenKind.DOLLAR);\r\n\r\n          if (this._lexer.token.kind === TokenKind.NAME) {\r\n            const varName = this._lexer.token.value;\r\n            throw syntaxError(\r\n              this._lexer.source,\r\n              token.start,\r\n              `Unexpected variable \"$${varName}\" in constant value.`,\r\n            );\r\n          } else {\r\n            throw this.unexpected(token);\r\n          }\r\n        }\r\n\r\n        return this.parseVariable();\r\n\r\n      default:\r\n        throw this.unexpected();\r\n    }\r\n  }\r\n\r\n  parseConstValueLiteral() {\r\n    return this.parseValueLiteral(true);\r\n  }\r\n\r\n  parseStringLiteral() {\r\n    const token = this._lexer.token;\r\n\r\n    this._lexer.advance();\r\n\r\n    return this.node(token, {\r\n      kind: Kind.STRING,\r\n      value: token.value,\r\n      block: token.kind === TokenKind.BLOCK_STRING,\r\n    });\r\n  }\r\n  /**\r\n   * ListValue[Const] :\r\n   *   - [ ]\r\n   *   - [ Value[?Const]+ ]\r\n   */\r\n\r\n  parseList(isConst) {\r\n    const item = () => this.parseValueLiteral(isConst);\r\n\r\n    return this.node(this._lexer.token, {\r\n      kind: Kind.LIST,\r\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\r\n    });\r\n  }\r\n  /**\r\n   * ```\r\n   * ObjectValue[Const] :\r\n   *   - { }\r\n   *   - { ObjectField[?Const]+ }\r\n   * ```\r\n   */\r\n\r\n  parseObject(isConst) {\r\n    const item = () => this.parseObjectField(isConst);\r\n\r\n    return this.node(this._lexer.token, {\r\n      kind: Kind.OBJECT,\r\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\r\n    });\r\n  }\r\n  /**\r\n   * ObjectField[Const] : Name : Value[?Const]\r\n   */\r\n\r\n  parseObjectField(isConst) {\r\n    const start = this._lexer.token;\r\n    const name = this.parseName();\r\n    this.expectToken(TokenKind.COLON);\r\n    return this.node(start, {\r\n      kind: Kind.OBJECT_FIELD,\r\n      name,\r\n      value: this.parseValueLiteral(isConst),\r\n    });\r\n  } // Implements the parsing rules in the Directives section.\r\n\r\n  /**\r\n   * Directives[Const] : Directive[?Const]+\r\n   */\r\n\r\n  parseDirectives(isConst) {\r\n    const directives = [];\r\n\r\n    while (this.peek(TokenKind.AT)) {\r\n      directives.push(this.parseDirective(isConst));\r\n    }\r\n\r\n    return directives;\r\n  }\r\n\r\n  parseConstDirectives() {\r\n    return this.parseDirectives(true);\r\n  }\r\n  /**\r\n   * ```\r\n   * Directive[Const] : @ Name Arguments[?Const]?\r\n   * ```\r\n   */\r\n\r\n  parseDirective(isConst) {\r\n    const start = this._lexer.token;\r\n    this.expectToken(TokenKind.AT);\r\n    return this.node(start, {\r\n      kind: Kind.DIRECTIVE,\r\n      name: this.parseName(),\r\n      arguments: this.parseArguments(isConst),\r\n    });\r\n  } // Implements the parsing rules in the Types section.\r\n\r\n  /**\r\n   * Type :\r\n   *   - NamedType\r\n   *   - ListType\r\n   *   - NonNullType\r\n   */\r\n\r\n  parseTypeReference() {\r\n    const start = this._lexer.token;\r\n    let type;\r\n\r\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\r\n      const innerType = this.parseTypeReference();\r\n      this.expectToken(TokenKind.BRACKET_R);\r\n      type = this.node(start, {\r\n        kind: Kind.LIST_TYPE,\r\n        type: innerType,\r\n      });\r\n    } else {\r\n      type = this.parseNamedType();\r\n    }\r\n\r\n    if (this.expectOptionalToken(TokenKind.BANG)) {\r\n      return this.node(start, {\r\n        kind: Kind.NON_NULL_TYPE,\r\n        type,\r\n      });\r\n    }\r\n\r\n    return type;\r\n  }\r\n  /**\r\n   * NamedType : Name\r\n   */\r\n\r\n  parseNamedType() {\r\n    return this.node(this._lexer.token, {\r\n      kind: Kind.NAMED_TYPE,\r\n      name: this.parseName(),\r\n    });\r\n  } // Implements the parsing rules in the Type Definition section.\r\n\r\n  peekDescription() {\r\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\r\n  }\r\n  /**\r\n   * Description : StringValue\r\n   */\r\n\r\n  parseDescription() {\r\n    if (this.peekDescription()) {\r\n      return this.parseStringLiteral();\r\n    }\r\n  }\r\n  /**\r\n   * ```\r\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\r\n   * ```\r\n   */\r\n\r\n  parseSchemaDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('schema');\r\n    const directives = this.parseConstDirectives();\r\n    const operationTypes = this.many(\r\n      TokenKind.BRACE_L,\r\n      this.parseOperationTypeDefinition,\r\n      TokenKind.BRACE_R,\r\n    );\r\n    return this.node(start, {\r\n      kind: Kind.SCHEMA_DEFINITION,\r\n      description,\r\n      directives,\r\n      operationTypes,\r\n    });\r\n  }\r\n  /**\r\n   * OperationTypeDefinition : OperationType : NamedType\r\n   */\r\n\r\n  parseOperationTypeDefinition() {\r\n    const start = this._lexer.token;\r\n    const operation = this.parseOperationType();\r\n    this.expectToken(TokenKind.COLON);\r\n    const type = this.parseNamedType();\r\n    return this.node(start, {\r\n      kind: Kind.OPERATION_TYPE_DEFINITION,\r\n      operation,\r\n      type,\r\n    });\r\n  }\r\n  /**\r\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\r\n   */\r\n\r\n  parseScalarTypeDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('scalar');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n    return this.node(start, {\r\n      kind: Kind.SCALAR_TYPE_DEFINITION,\r\n      description,\r\n      name,\r\n      directives,\r\n    });\r\n  }\r\n  /**\r\n   * ObjectTypeDefinition :\r\n   *   Description?\r\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\r\n   */\r\n\r\n  parseObjectTypeDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('type');\r\n    const name = this.parseName();\r\n    const interfaces = this.parseImplementsInterfaces();\r\n    const directives = this.parseConstDirectives();\r\n    const fields = this.parseFieldsDefinition();\r\n    return this.node(start, {\r\n      kind: Kind.OBJECT_TYPE_DEFINITION,\r\n      description,\r\n      name,\r\n      interfaces,\r\n      directives,\r\n      fields,\r\n    });\r\n  }\r\n  /**\r\n   * ImplementsInterfaces :\r\n   *   - implements `&`? NamedType\r\n   *   - ImplementsInterfaces & NamedType\r\n   */\r\n\r\n  parseImplementsInterfaces() {\r\n    return this.expectOptionalKeyword('implements')\r\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\r\n      : [];\r\n  }\r\n  /**\r\n   * ```\r\n   * FieldsDefinition : { FieldDefinition+ }\r\n   * ```\r\n   */\r\n\r\n  parseFieldsDefinition() {\r\n    return this.optionalMany(\r\n      TokenKind.BRACE_L,\r\n      this.parseFieldDefinition,\r\n      TokenKind.BRACE_R,\r\n    );\r\n  }\r\n  /**\r\n   * FieldDefinition :\r\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\r\n   */\r\n\r\n  parseFieldDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    const name = this.parseName();\r\n    const args = this.parseArgumentDefs();\r\n    this.expectToken(TokenKind.COLON);\r\n    const type = this.parseTypeReference();\r\n    const directives = this.parseConstDirectives();\r\n    return this.node(start, {\r\n      kind: Kind.FIELD_DEFINITION,\r\n      description,\r\n      name,\r\n      arguments: args,\r\n      type,\r\n      directives,\r\n    });\r\n  }\r\n  /**\r\n   * ArgumentsDefinition : ( InputValueDefinition+ )\r\n   */\r\n\r\n  parseArgumentDefs() {\r\n    return this.optionalMany(\r\n      TokenKind.PAREN_L,\r\n      this.parseInputValueDef,\r\n      TokenKind.PAREN_R,\r\n    );\r\n  }\r\n  /**\r\n   * InputValueDefinition :\r\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\r\n   */\r\n\r\n  parseInputValueDef() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    const name = this.parseName();\r\n    this.expectToken(TokenKind.COLON);\r\n    const type = this.parseTypeReference();\r\n    let defaultValue;\r\n\r\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\r\n      defaultValue = this.parseConstValueLiteral();\r\n    }\r\n\r\n    const directives = this.parseConstDirectives();\r\n    return this.node(start, {\r\n      kind: Kind.INPUT_VALUE_DEFINITION,\r\n      description,\r\n      name,\r\n      type,\r\n      defaultValue,\r\n      directives,\r\n    });\r\n  }\r\n  /**\r\n   * InterfaceTypeDefinition :\r\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\r\n   */\r\n\r\n  parseInterfaceTypeDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('interface');\r\n    const name = this.parseName();\r\n    const interfaces = this.parseImplementsInterfaces();\r\n    const directives = this.parseConstDirectives();\r\n    const fields = this.parseFieldsDefinition();\r\n    return this.node(start, {\r\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\r\n      description,\r\n      name,\r\n      interfaces,\r\n      directives,\r\n      fields,\r\n    });\r\n  }\r\n  /**\r\n   * UnionTypeDefinition :\r\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\r\n   */\r\n\r\n  parseUnionTypeDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('union');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n    const types = this.parseUnionMemberTypes();\r\n    return this.node(start, {\r\n      kind: Kind.UNION_TYPE_DEFINITION,\r\n      description,\r\n      name,\r\n      directives,\r\n      types,\r\n    });\r\n  }\r\n  /**\r\n   * UnionMemberTypes :\r\n   *   - = `|`? NamedType\r\n   *   - UnionMemberTypes | NamedType\r\n   */\r\n\r\n  parseUnionMemberTypes() {\r\n    return this.expectOptionalToken(TokenKind.EQUALS)\r\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\r\n      : [];\r\n  }\r\n  /**\r\n   * EnumTypeDefinition :\r\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\r\n   */\r\n\r\n  parseEnumTypeDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('enum');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n    const values = this.parseEnumValuesDefinition();\r\n    return this.node(start, {\r\n      kind: Kind.ENUM_TYPE_DEFINITION,\r\n      description,\r\n      name,\r\n      directives,\r\n      values,\r\n    });\r\n  }\r\n  /**\r\n   * ```\r\n   * EnumValuesDefinition : { EnumValueDefinition+ }\r\n   * ```\r\n   */\r\n\r\n  parseEnumValuesDefinition() {\r\n    return this.optionalMany(\r\n      TokenKind.BRACE_L,\r\n      this.parseEnumValueDefinition,\r\n      TokenKind.BRACE_R,\r\n    );\r\n  }\r\n  /**\r\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\r\n   */\r\n\r\n  parseEnumValueDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    const name = this.parseEnumValueName();\r\n    const directives = this.parseConstDirectives();\r\n    return this.node(start, {\r\n      kind: Kind.ENUM_VALUE_DEFINITION,\r\n      description,\r\n      name,\r\n      directives,\r\n    });\r\n  }\r\n  /**\r\n   * EnumValue : Name but not `true`, `false` or `null`\r\n   */\r\n\r\n  parseEnumValueName() {\r\n    if (\r\n      this._lexer.token.value === 'true' ||\r\n      this._lexer.token.value === 'false' ||\r\n      this._lexer.token.value === 'null'\r\n    ) {\r\n      throw syntaxError(\r\n        this._lexer.source,\r\n        this._lexer.token.start,\r\n        `${getTokenDesc(\r\n          this._lexer.token,\r\n        )} is reserved and cannot be used for an enum value.`,\r\n      );\r\n    }\r\n\r\n    return this.parseName();\r\n  }\r\n  /**\r\n   * InputObjectTypeDefinition :\r\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\r\n   */\r\n\r\n  parseInputObjectTypeDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('input');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n    const fields = this.parseInputFieldsDefinition();\r\n    return this.node(start, {\r\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\r\n      description,\r\n      name,\r\n      directives,\r\n      fields,\r\n    });\r\n  }\r\n  /**\r\n   * ```\r\n   * InputFieldsDefinition : { InputValueDefinition+ }\r\n   * ```\r\n   */\r\n\r\n  parseInputFieldsDefinition() {\r\n    return this.optionalMany(\r\n      TokenKind.BRACE_L,\r\n      this.parseInputValueDef,\r\n      TokenKind.BRACE_R,\r\n    );\r\n  }\r\n  /**\r\n   * TypeSystemExtension :\r\n   *   - SchemaExtension\r\n   *   - TypeExtension\r\n   *\r\n   * TypeExtension :\r\n   *   - ScalarTypeExtension\r\n   *   - ObjectTypeExtension\r\n   *   - InterfaceTypeExtension\r\n   *   - UnionTypeExtension\r\n   *   - EnumTypeExtension\r\n   *   - InputObjectTypeDefinition\r\n   */\r\n\r\n  parseTypeSystemExtension() {\r\n    const keywordToken = this._lexer.lookahead();\r\n\r\n    if (keywordToken.kind === TokenKind.NAME) {\r\n      switch (keywordToken.value) {\r\n        case 'schema':\r\n          return this.parseSchemaExtension();\r\n\r\n        case 'scalar':\r\n          return this.parseScalarTypeExtension();\r\n\r\n        case 'type':\r\n          return this.parseObjectTypeExtension();\r\n\r\n        case 'interface':\r\n          return this.parseInterfaceTypeExtension();\r\n\r\n        case 'union':\r\n          return this.parseUnionTypeExtension();\r\n\r\n        case 'enum':\r\n          return this.parseEnumTypeExtension();\r\n\r\n        case 'input':\r\n          return this.parseInputObjectTypeExtension();\r\n      }\r\n    }\r\n\r\n    throw this.unexpected(keywordToken);\r\n  }\r\n  /**\r\n   * ```\r\n   * SchemaExtension :\r\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\r\n   *  - extend schema Directives[Const]\r\n   * ```\r\n   */\r\n\r\n  parseSchemaExtension() {\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('extend');\r\n    this.expectKeyword('schema');\r\n    const directives = this.parseConstDirectives();\r\n    const operationTypes = this.optionalMany(\r\n      TokenKind.BRACE_L,\r\n      this.parseOperationTypeDefinition,\r\n      TokenKind.BRACE_R,\r\n    );\r\n\r\n    if (directives.length === 0 && operationTypes.length === 0) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.SCHEMA_EXTENSION,\r\n      directives,\r\n      operationTypes,\r\n    });\r\n  }\r\n  /**\r\n   * ScalarTypeExtension :\r\n   *   - extend scalar Name Directives[Const]\r\n   */\r\n\r\n  parseScalarTypeExtension() {\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('extend');\r\n    this.expectKeyword('scalar');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n\r\n    if (directives.length === 0) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.SCALAR_TYPE_EXTENSION,\r\n      name,\r\n      directives,\r\n    });\r\n  }\r\n  /**\r\n   * ObjectTypeExtension :\r\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\r\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\r\n   *  - extend type Name ImplementsInterfaces\r\n   */\r\n\r\n  parseObjectTypeExtension() {\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('extend');\r\n    this.expectKeyword('type');\r\n    const name = this.parseName();\r\n    const interfaces = this.parseImplementsInterfaces();\r\n    const directives = this.parseConstDirectives();\r\n    const fields = this.parseFieldsDefinition();\r\n\r\n    if (\r\n      interfaces.length === 0 &&\r\n      directives.length === 0 &&\r\n      fields.length === 0\r\n    ) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.OBJECT_TYPE_EXTENSION,\r\n      name,\r\n      interfaces,\r\n      directives,\r\n      fields,\r\n    });\r\n  }\r\n  /**\r\n   * InterfaceTypeExtension :\r\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\r\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\r\n   *  - extend interface Name ImplementsInterfaces\r\n   */\r\n\r\n  parseInterfaceTypeExtension() {\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('extend');\r\n    this.expectKeyword('interface');\r\n    const name = this.parseName();\r\n    const interfaces = this.parseImplementsInterfaces();\r\n    const directives = this.parseConstDirectives();\r\n    const fields = this.parseFieldsDefinition();\r\n\r\n    if (\r\n      interfaces.length === 0 &&\r\n      directives.length === 0 &&\r\n      fields.length === 0\r\n    ) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\r\n      name,\r\n      interfaces,\r\n      directives,\r\n      fields,\r\n    });\r\n  }\r\n  /**\r\n   * UnionTypeExtension :\r\n   *   - extend union Name Directives[Const]? UnionMemberTypes\r\n   *   - extend union Name Directives[Const]\r\n   */\r\n\r\n  parseUnionTypeExtension() {\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('extend');\r\n    this.expectKeyword('union');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n    const types = this.parseUnionMemberTypes();\r\n\r\n    if (directives.length === 0 && types.length === 0) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.UNION_TYPE_EXTENSION,\r\n      name,\r\n      directives,\r\n      types,\r\n    });\r\n  }\r\n  /**\r\n   * EnumTypeExtension :\r\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\r\n   *   - extend enum Name Directives[Const]\r\n   */\r\n\r\n  parseEnumTypeExtension() {\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('extend');\r\n    this.expectKeyword('enum');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n    const values = this.parseEnumValuesDefinition();\r\n\r\n    if (directives.length === 0 && values.length === 0) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.ENUM_TYPE_EXTENSION,\r\n      name,\r\n      directives,\r\n      values,\r\n    });\r\n  }\r\n  /**\r\n   * InputObjectTypeExtension :\r\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\r\n   *   - extend input Name Directives[Const]\r\n   */\r\n\r\n  parseInputObjectTypeExtension() {\r\n    const start = this._lexer.token;\r\n    this.expectKeyword('extend');\r\n    this.expectKeyword('input');\r\n    const name = this.parseName();\r\n    const directives = this.parseConstDirectives();\r\n    const fields = this.parseInputFieldsDefinition();\r\n\r\n    if (directives.length === 0 && fields.length === 0) {\r\n      throw this.unexpected();\r\n    }\r\n\r\n    return this.node(start, {\r\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\r\n      name,\r\n      directives,\r\n      fields,\r\n    });\r\n  }\r\n  /**\r\n   * ```\r\n   * DirectiveDefinition :\r\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\r\n   * ```\r\n   */\r\n\r\n  parseDirectiveDefinition() {\r\n    const start = this._lexer.token;\r\n    const description = this.parseDescription();\r\n    this.expectKeyword('directive');\r\n    this.expectToken(TokenKind.AT);\r\n    const name = this.parseName();\r\n    const args = this.parseArgumentDefs();\r\n    const repeatable = this.expectOptionalKeyword('repeatable');\r\n    this.expectKeyword('on');\r\n    const locations = this.parseDirectiveLocations();\r\n    return this.node(start, {\r\n      kind: Kind.DIRECTIVE_DEFINITION,\r\n      description,\r\n      name,\r\n      arguments: args,\r\n      repeatable,\r\n      locations,\r\n    });\r\n  }\r\n  /**\r\n   * DirectiveLocations :\r\n   *   - `|`? DirectiveLocation\r\n   *   - DirectiveLocations | DirectiveLocation\r\n   */\r\n\r\n  parseDirectiveLocations() {\r\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\r\n  }\r\n  /*\r\n   * DirectiveLocation :\r\n   *   - ExecutableDirectiveLocation\r\n   *   - TypeSystemDirectiveLocation\r\n   *\r\n   * ExecutableDirectiveLocation : one of\r\n   *   `QUERY`\r\n   *   `MUTATION`\r\n   *   `SUBSCRIPTION`\r\n   *   `FIELD`\r\n   *   `FRAGMENT_DEFINITION`\r\n   *   `FRAGMENT_SPREAD`\r\n   *   `INLINE_FRAGMENT`\r\n   *\r\n   * TypeSystemDirectiveLocation : one of\r\n   *   `SCHEMA`\r\n   *   `SCALAR`\r\n   *   `OBJECT`\r\n   *   `FIELD_DEFINITION`\r\n   *   `ARGUMENT_DEFINITION`\r\n   *   `INTERFACE`\r\n   *   `UNION`\r\n   *   `ENUM`\r\n   *   `ENUM_VALUE`\r\n   *   `INPUT_OBJECT`\r\n   *   `INPUT_FIELD_DEFINITION`\r\n   */\r\n\r\n  parseDirectiveLocation() {\r\n    const start = this._lexer.token;\r\n    const name = this.parseName();\r\n\r\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\r\n      return name;\r\n    }\r\n\r\n    throw this.unexpected(start);\r\n  } // Core parsing utility functions\r\n\r\n  /**\r\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\r\n   * location object, used to identify the place in the source that created a\r\n   * given parsed object.\r\n   */\r\n\r\n  node(startToken, node) {\r\n    var _this$_options2;\r\n\r\n    if (\r\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\r\n        ? void 0\r\n        : _this$_options2.noLocation) !== true\r\n    ) {\r\n      node.loc = new Location(\r\n        startToken,\r\n        this._lexer.lastToken,\r\n        this._lexer.source,\r\n      );\r\n    }\r\n\r\n    return node;\r\n  }\r\n  /**\r\n   * Determines if the next token is of a given kind\r\n   */\r\n\r\n  peek(kind) {\r\n    return this._lexer.token.kind === kind;\r\n  }\r\n  /**\r\n   * If the next token is of the given kind, return that token after advancing the lexer.\r\n   * Otherwise, do not change the parser state and throw an error.\r\n   */\r\n\r\n  expectToken(kind) {\r\n    const token = this._lexer.token;\r\n\r\n    if (token.kind === kind) {\r\n      this._lexer.advance();\r\n\r\n      return token;\r\n    }\r\n\r\n    throw syntaxError(\r\n      this._lexer.source,\r\n      token.start,\r\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\r\n    );\r\n  }\r\n  /**\r\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\r\n   * Otherwise, do not change the parser state and return \"false\".\r\n   */\r\n\r\n  expectOptionalToken(kind) {\r\n    const token = this._lexer.token;\r\n\r\n    if (token.kind === kind) {\r\n      this._lexer.advance();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  /**\r\n   * If the next token is a given keyword, advance the lexer.\r\n   * Otherwise, do not change the parser state and throw an error.\r\n   */\r\n\r\n  expectKeyword(value) {\r\n    const token = this._lexer.token;\r\n\r\n    if (token.kind === TokenKind.NAME && token.value === value) {\r\n      this._lexer.advance();\r\n    } else {\r\n      throw syntaxError(\r\n        this._lexer.source,\r\n        token.start,\r\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\r\n   * Otherwise, do not change the parser state and return \"false\".\r\n   */\r\n\r\n  expectOptionalKeyword(value) {\r\n    const token = this._lexer.token;\r\n\r\n    if (token.kind === TokenKind.NAME && token.value === value) {\r\n      this._lexer.advance();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  /**\r\n   * Helper function for creating an error when an unexpected lexed token is encountered.\r\n   */\r\n\r\n  unexpected(atToken) {\r\n    const token =\r\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\r\n    return syntaxError(\r\n      this._lexer.source,\r\n      token.start,\r\n      `Unexpected ${getTokenDesc(token)}.`,\r\n    );\r\n  }\r\n  /**\r\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\r\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\r\n   * Advances the parser to the next lex token after the closing token.\r\n   */\r\n\r\n  any(openKind, parseFn, closeKind) {\r\n    this.expectToken(openKind);\r\n    const nodes = [];\r\n\r\n    while (!this.expectOptionalToken(closeKind)) {\r\n      nodes.push(parseFn.call(this));\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n  /**\r\n   * Returns a list of parse nodes, determined by the parseFn.\r\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\r\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\r\n   * Advances the parser to the next lex token after the closing token.\r\n   */\r\n\r\n  optionalMany(openKind, parseFn, closeKind) {\r\n    if (this.expectOptionalToken(openKind)) {\r\n      const nodes = [];\r\n\r\n      do {\r\n        nodes.push(parseFn.call(this));\r\n      } while (!this.expectOptionalToken(closeKind));\r\n\r\n      return nodes;\r\n    }\r\n\r\n    return [];\r\n  }\r\n  /**\r\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\r\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\r\n   * Advances the parser to the next lex token after the closing token.\r\n   */\r\n\r\n  many(openKind, parseFn, closeKind) {\r\n    this.expectToken(openKind);\r\n    const nodes = [];\r\n\r\n    do {\r\n      nodes.push(parseFn.call(this));\r\n    } while (!this.expectOptionalToken(closeKind));\r\n\r\n    return nodes;\r\n  }\r\n  /**\r\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\r\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\r\n   * Advances the parser to the next lex token after last item in the list.\r\n   */\r\n\r\n  delimitedMany(delimiterKind, parseFn) {\r\n    this.expectOptionalToken(delimiterKind);\r\n    const nodes = [];\r\n\r\n    do {\r\n      nodes.push(parseFn.call(this));\r\n    } while (this.expectOptionalToken(delimiterKind));\r\n\r\n    return nodes;\r\n  }\r\n}\r\n/**\r\n * A helper function to describe a token as a string for debugging.\r\n */\r\n\r\nfunction getTokenDesc(token) {\r\n  const value = token.value;\r\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\r\n}\r\n/**\r\n * A helper function to describe a token kind as a string for debugging.\r\n */\r\n\r\nfunction getTokenKindDesc(kind) {\r\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}