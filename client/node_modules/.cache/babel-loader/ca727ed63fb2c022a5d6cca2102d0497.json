{"ast":null,"code":"import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\r\n * A visitor is provided to visit, it contains the collection of\r\n * relevant functions to be called during the visitor's traversal.\r\n */\n\nexport const BREAK = Object.freeze({});\n/**\r\n * visit() will walk through an AST using a depth-first traversal, calling\r\n * the visitor's enter function at each node in the traversal, and calling the\r\n * leave function after visiting that node and all of its child nodes.\r\n *\r\n * By returning different values from the enter and leave functions, the\r\n * behavior of the visitor can be altered, including skipping over a sub-tree of\r\n * the AST (by returning false), editing the AST by returning a value or null\r\n * to remove the value, or to stop the whole traversal by returning BREAK.\r\n *\r\n * When using visit() to edit an AST, the original AST will not be modified, and\r\n * a new version of the AST with the changes applied will be returned from the\r\n * visit function.\r\n *\r\n * ```ts\r\n * const editedAST = visit(ast, {\r\n *   enter(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: skip visiting this node\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   },\r\n *   leave(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: no action\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Alternatively to providing enter() and leave() functions, a visitor can\r\n * instead provide functions named the same as the kinds of AST nodes, or\r\n * enter/leave visitors at a named key, leading to three permutations of the\r\n * visitor API:\r\n *\r\n * 1) Named visitors triggered when entering a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind(node) {\r\n *     // enter the \"Kind\" node\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind: {\r\n *     enter(node) {\r\n *       // enter the \"Kind\" node\r\n *     }\r\n *     leave(node) {\r\n *       // leave the \"Kind\" node\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 3) Generic visitors that trigger upon entering and leaving any node.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   enter(node) {\r\n *     // enter any node\r\n *   },\r\n *   leave(node) {\r\n *     // leave any node\r\n *   }\r\n * })\r\n * ```\r\n */\n\nexport function visit(root, visitor) {\n  let visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties({}, Object.getOwnPropertyDescriptors(node));\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;\n      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\r\n * Creates a new visitor instance which delegates to many visitors to run in\r\n * parallel. Each visitor will be visited for each node before moving on.\r\n *\r\n * If a prior visitor edits a node, no following visitors will see that node.\r\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const {\n        enter,\n        leave\n      } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result = (_enterList$i = enterList[i]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave() {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result = (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      }\n\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\r\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\r\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined\n    };\n  } // { enter() {}, leave() {} }\n\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave\n  };\n}\n/**\r\n * Given a visitor instance, if it is leaving or not, and a node kind, return\r\n * the function the visitor runtime should call.\r\n *\r\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\r\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const {\n    enter,\n    leave\n  } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}","map":{"version":3,"names":["devAssert","inspect","isNode","QueryDocumentKeys","Kind","BREAK","Object","freeze","visit","root","visitor","visitorKeys","enterLeaveMap","Map","kind","values","set","getEnterLeaveForKind","stack","undefined","inArray","Array","isArray","keys","index","edits","node","key","parent","path","ancestors","isLeaving","length","isEdited","pop","slice","editOffset","editKey","editValue","arrayKey","splice","defineProperties","getOwnPropertyDescriptors","prev","push","result","_enterLeaveMap$get","_enterLeaveMap$get2","visitFn","get","leave","enter","call","_node$kind","visitInParallel","visitors","skipping","fill","mergedVisitor","create","hasVisitor","enterList","leaveList","i","mergedEnterLeave","args","_enterList$i","apply","_leaveList$i","kindVisitor","getVisitFn"],"sources":["C:/Users/Dani/Desktop/projects/dream-small/dream-small/node_modules/graphql/language/visitor.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { inspect } from '../jsutils/inspect.mjs';\r\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\r\nimport { Kind } from './kinds.mjs';\r\n/**\r\n * A visitor is provided to visit, it contains the collection of\r\n * relevant functions to be called during the visitor's traversal.\r\n */\r\n\r\nexport const BREAK = Object.freeze({});\r\n/**\r\n * visit() will walk through an AST using a depth-first traversal, calling\r\n * the visitor's enter function at each node in the traversal, and calling the\r\n * leave function after visiting that node and all of its child nodes.\r\n *\r\n * By returning different values from the enter and leave functions, the\r\n * behavior of the visitor can be altered, including skipping over a sub-tree of\r\n * the AST (by returning false), editing the AST by returning a value or null\r\n * to remove the value, or to stop the whole traversal by returning BREAK.\r\n *\r\n * When using visit() to edit an AST, the original AST will not be modified, and\r\n * a new version of the AST with the changes applied will be returned from the\r\n * visit function.\r\n *\r\n * ```ts\r\n * const editedAST = visit(ast, {\r\n *   enter(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: skip visiting this node\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   },\r\n *   leave(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: no action\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Alternatively to providing enter() and leave() functions, a visitor can\r\n * instead provide functions named the same as the kinds of AST nodes, or\r\n * enter/leave visitors at a named key, leading to three permutations of the\r\n * visitor API:\r\n *\r\n * 1) Named visitors triggered when entering a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind(node) {\r\n *     // enter the \"Kind\" node\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind: {\r\n *     enter(node) {\r\n *       // enter the \"Kind\" node\r\n *     }\r\n *     leave(node) {\r\n *       // leave the \"Kind\" node\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 3) Generic visitors that trigger upon entering and leaving any node.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   enter(node) {\r\n *     // enter any node\r\n *   },\r\n *   leave(node) {\r\n *     // leave any node\r\n *   }\r\n * })\r\n * ```\r\n */\r\n\r\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\r\n  const enterLeaveMap = new Map();\r\n\r\n  for (const kind of Object.values(Kind)) {\r\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\r\n  }\r\n  /* eslint-disable no-undef-init */\r\n\r\n  let stack = undefined;\r\n  let inArray = Array.isArray(root);\r\n  let keys = [root];\r\n  let index = -1;\r\n  let edits = [];\r\n  let node = root;\r\n  let key = undefined;\r\n  let parent = undefined;\r\n  const path = [];\r\n  const ancestors = [];\r\n  /* eslint-enable no-undef-init */\r\n\r\n  do {\r\n    index++;\r\n    const isLeaving = index === keys.length;\r\n    const isEdited = isLeaving && edits.length !== 0;\r\n\r\n    if (isLeaving) {\r\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\r\n      node = parent;\r\n      parent = ancestors.pop();\r\n\r\n      if (isEdited) {\r\n        if (inArray) {\r\n          node = node.slice();\r\n          let editOffset = 0;\r\n\r\n          for (const [editKey, editValue] of edits) {\r\n            const arrayKey = editKey - editOffset;\r\n\r\n            if (editValue === null) {\r\n              node.splice(arrayKey, 1);\r\n              editOffset++;\r\n            } else {\r\n              node[arrayKey] = editValue;\r\n            }\r\n          }\r\n        } else {\r\n          node = Object.defineProperties(\r\n            {},\r\n            Object.getOwnPropertyDescriptors(node),\r\n          );\r\n\r\n          for (const [editKey, editValue] of edits) {\r\n            node[editKey] = editValue;\r\n          }\r\n        }\r\n      }\r\n\r\n      index = stack.index;\r\n      keys = stack.keys;\r\n      edits = stack.edits;\r\n      inArray = stack.inArray;\r\n      stack = stack.prev;\r\n    } else if (parent) {\r\n      key = inArray ? index : keys[index];\r\n      node = parent[key];\r\n\r\n      if (node === null || node === undefined) {\r\n        continue;\r\n      }\r\n\r\n      path.push(key);\r\n    }\r\n\r\n    let result;\r\n\r\n    if (!Array.isArray(node)) {\r\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\r\n\r\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\r\n      const visitFn = isLeaving\r\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\r\n          _enterLeaveMap$get === void 0\r\n          ? void 0\r\n          : _enterLeaveMap$get.leave\r\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\r\n          _enterLeaveMap$get2 === void 0\r\n        ? void 0\r\n        : _enterLeaveMap$get2.enter;\r\n      result =\r\n        visitFn === null || visitFn === void 0\r\n          ? void 0\r\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\r\n\r\n      if (result === BREAK) {\r\n        break;\r\n      }\r\n\r\n      if (result === false) {\r\n        if (!isLeaving) {\r\n          path.pop();\r\n          continue;\r\n        }\r\n      } else if (result !== undefined) {\r\n        edits.push([key, result]);\r\n\r\n        if (!isLeaving) {\r\n          if (isNode(result)) {\r\n            node = result;\r\n          } else {\r\n            path.pop();\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (result === undefined && isEdited) {\r\n      edits.push([key, node]);\r\n    }\r\n\r\n    if (isLeaving) {\r\n      path.pop();\r\n    } else {\r\n      var _node$kind;\r\n\r\n      stack = {\r\n        inArray,\r\n        index,\r\n        keys,\r\n        edits,\r\n        prev: stack,\r\n      };\r\n      inArray = Array.isArray(node);\r\n      keys = inArray\r\n        ? node\r\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\r\n          _node$kind !== void 0\r\n        ? _node$kind\r\n        : [];\r\n      index = -1;\r\n      edits = [];\r\n\r\n      if (parent) {\r\n        ancestors.push(parent);\r\n      }\r\n\r\n      parent = node;\r\n    }\r\n  } while (stack !== undefined);\r\n\r\n  if (edits.length !== 0) {\r\n    // New root\r\n    return edits[edits.length - 1][1];\r\n  }\r\n\r\n  return root;\r\n}\r\n/**\r\n * Creates a new visitor instance which delegates to many visitors to run in\r\n * parallel. Each visitor will be visited for each node before moving on.\r\n *\r\n * If a prior visitor edits a node, no following visitors will see that node.\r\n */\r\n\r\nexport function visitInParallel(visitors) {\r\n  const skipping = new Array(visitors.length).fill(null);\r\n  const mergedVisitor = Object.create(null);\r\n\r\n  for (const kind of Object.values(Kind)) {\r\n    let hasVisitor = false;\r\n    const enterList = new Array(visitors.length).fill(undefined);\r\n    const leaveList = new Array(visitors.length).fill(undefined);\r\n\r\n    for (let i = 0; i < visitors.length; ++i) {\r\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\r\n      hasVisitor || (hasVisitor = enter != null || leave != null);\r\n      enterList[i] = enter;\r\n      leaveList[i] = leave;\r\n    }\r\n\r\n    if (!hasVisitor) {\r\n      continue;\r\n    }\r\n\r\n    const mergedEnterLeave = {\r\n      enter(...args) {\r\n        const node = args[0];\r\n\r\n        for (let i = 0; i < visitors.length; i++) {\r\n          if (skipping[i] === null) {\r\n            var _enterList$i;\r\n\r\n            const result =\r\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\r\n                ? void 0\r\n                : _enterList$i.apply(visitors[i], args);\r\n\r\n            if (result === false) {\r\n              skipping[i] = node;\r\n            } else if (result === BREAK) {\r\n              skipping[i] = BREAK;\r\n            } else if (result !== undefined) {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      leave(...args) {\r\n        const node = args[0];\r\n\r\n        for (let i = 0; i < visitors.length; i++) {\r\n          if (skipping[i] === null) {\r\n            var _leaveList$i;\r\n\r\n            const result =\r\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\r\n                ? void 0\r\n                : _leaveList$i.apply(visitors[i], args);\r\n\r\n            if (result === BREAK) {\r\n              skipping[i] = BREAK;\r\n            } else if (result !== undefined && result !== false) {\r\n              return result;\r\n            }\r\n          } else if (skipping[i] === node) {\r\n            skipping[i] = null;\r\n          }\r\n        }\r\n      },\r\n    };\r\n    mergedVisitor[kind] = mergedEnterLeave;\r\n  }\r\n\r\n  return mergedVisitor;\r\n}\r\n/**\r\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\r\n */\r\n\r\nexport function getEnterLeaveForKind(visitor, kind) {\r\n  const kindVisitor = visitor[kind];\r\n\r\n  if (typeof kindVisitor === 'object') {\r\n    // { Kind: { enter() {}, leave() {} } }\r\n    return kindVisitor;\r\n  } else if (typeof kindVisitor === 'function') {\r\n    // { Kind() {} }\r\n    return {\r\n      enter: kindVisitor,\r\n      leave: undefined,\r\n    };\r\n  } // { enter() {}, leave() {} }\r\n\r\n  return {\r\n    enter: visitor.enter,\r\n    leave: visitor.leave,\r\n  };\r\n}\r\n/**\r\n * Given a visitor instance, if it is leaving or not, and a node kind, return\r\n * the function the visitor runtime should call.\r\n *\r\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\r\n */\r\n\r\n/* c8 ignore next 8 */\r\n\r\nexport function getVisitFn(visitor, kind, isLeaving) {\r\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\r\n  return isLeaving ? leave : enter;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}