{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isEnumType } from \"../../type/definition.mjs\";\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\nexport function UniqueEnumValueNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    var valueNames = knownValueNames[typeName];\n\n    for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {\n      var valueDef = valueNodes[_i2];\n      var valueName = valueDef.name.value;\n      var existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), valueDef.name));\n      } else if (valueNames[valueName]) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\"), [valueNames[valueName], valueDef.name]));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","isEnumType","UniqueEnumValueNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","_node$values","typeName","name","value","valueNodes","values","valueNames","_i2","length","valueDef","valueName","existingType","getValue","reportError","concat"],"sources":["C:/Users/jleig/Desktop/challenges/dream-small/client/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isEnumType } from \"../../type/definition.mjs\";\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    var valueNames = knownValueNames[typeName];\n\n    for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {\n      var valueDef = valueNodes[_i2];\n      var valueName = valueDef.name.value;\n      var existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), valueDef.name));\n      } else if (valueNames[valueName]) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\"), [valueNames[valueName], valueDef.name]));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;EAChD,IAAIC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAb;EACA,IAAIC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArD;EACA,IAAIC,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;EACA,OAAO;IACLE,kBAAkB,EAAEC,oBADf;IAELC,iBAAiB,EAAED;EAFd,CAAP;;EAKA,SAASA,oBAAT,CAA8BE,IAA9B,EAAoC;IAClC,IAAIC,YAAJ;;IAEA,IAAIC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAAzB;;IAEA,IAAI,CAACR,eAAe,CAACM,QAAD,CAApB,EAAgC;MAC9BN,eAAe,CAACM,QAAD,CAAf,GAA4BR,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;IACD,CAPiC,CAOhC;;;IAGF,IAAIU,UAAU,GAAG,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAArB,MAAiC,IAAjC,IAAyCL,YAAY,KAAK,KAAK,CAA/D,GAAmEA,YAAnE,GAAkF,EAAnG;IACA,IAAIM,UAAU,GAAGX,eAAe,CAACM,QAAD,CAAhC;;IAEA,KAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,UAAU,CAACI,MAAnC,EAA2CD,GAAG,EAA9C,EAAkD;MAChD,IAAIE,QAAQ,GAAGL,UAAU,CAACG,GAAD,CAAzB;MACA,IAAIG,SAAS,GAAGD,QAAQ,CAACP,IAAT,CAAcC,KAA9B;MACA,IAAIQ,YAAY,GAAGpB,eAAe,CAACU,QAAD,CAAlC;;MAEA,IAAIf,UAAU,CAACyB,YAAD,CAAV,IAA4BA,YAAY,CAACC,QAAb,CAAsBF,SAAtB,CAAhC,EAAkE;QAChEtB,OAAO,CAACyB,WAAR,CAAoB,IAAI5B,YAAJ,CAAiB,gBAAgB6B,MAAhB,CAAuBb,QAAvB,EAAiC,GAAjC,EAAsCa,MAAtC,CAA6CJ,SAA7C,EAAwD,oFAAxD,CAAjB,EAAgKD,QAAQ,CAACP,IAAzK,CAApB;MACD,CAFD,MAEO,IAAII,UAAU,CAACI,SAAD,CAAd,EAA2B;QAChCtB,OAAO,CAACyB,WAAR,CAAoB,IAAI5B,YAAJ,CAAiB,gBAAgB6B,MAAhB,CAAuBb,QAAvB,EAAiC,GAAjC,EAAsCa,MAAtC,CAA6CJ,SAA7C,EAAwD,8BAAxD,CAAjB,EAA0G,CAACJ,UAAU,CAACI,SAAD,CAAX,EAAwBD,QAAQ,CAACP,IAAjC,CAA1G,CAApB;MACD,CAFM,MAEA;QACLI,UAAU,CAACI,SAAD,CAAV,GAAwBD,QAAQ,CAACP,IAAjC;MACD;IACF;;IAED,OAAO,KAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}